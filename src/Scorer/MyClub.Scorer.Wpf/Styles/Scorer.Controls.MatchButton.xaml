<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ctrl="clr-namespace:MyClub.Scorer.Wpf.Controls"
                    xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain"
                    xmlns:my="http://mynet.com/xaml/themes"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <my:SharedResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Themes/MyNet.Styles.xaml" />
        <my:SharedResourceDictionary Source="pack://application:,,,/Scorer;component/Styles/Scorer.Team.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <sys:Int32 x:Key="One">1</sys:Int32>
    <sys:Int32 x:Key="Two">2</sys:Int32>
    <sys:Int32 x:Key="Five">5</sys:Int32>
    <sys:Int32 x:Key="Ten">10</sys:Int32>
    <sys:Int32 x:Key="Fifteen">15</sys:Int32>
    <sys:Int32 x:Key="Thirty">30</sys:Int32>

    <Style x:Key="Scorer.Styles.MatchButton" TargetType="{x:Type ctrl:MatchButton}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}">
        <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Content" Value="{Binding Item, RelativeSource={RelativeSource Self}}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Border Background="White" Opacity="0.002" />

                        <!-- IsCancelled -->
                        <my:PackIcon x:Name="cancel"
                                     Width="18"
                                     Height="18"
                                     Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                     Kind="ProgressClose"
                                     ToolTip="{my:Resource Cancelled}"
                                     Visibility="Collapsed" />

                        <!-- IsPostponed -->
                        <my:PackIcon x:Name="postponed"
                                     Width="18"
                                     Height="18"
                                     Foreground="{DynamicResource MyNet.Brushes.Warning}"
                                     Kind="ProgressQuestion"
                                     ToolTip="{my:Resource Postponed}"
                                     Visibility="Collapsed" />

                        <!-- DateTime -->
                        <Grid x:Name="date" Visibility="Collapsed">
                            <TextBlock Text="{my:DisplayDateTime Date, Format=ShortDateFormat, Casing=Title}">
                                <TextBlock.Visibility>
                                    <MultiBinding Converter="{x:Static my:EqualityToVisibilityConverter.CollapsedIfEqual}">
                                        <Binding Path="Date.Date" />
                                        <Binding Path="Stage.StartDate.Date" />
                                    </MultiBinding>
                                </TextBlock.Visibility>
                            </TextBlock>
                            <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:DisplayDateTime Date, Format=t, Casing=Title}">
                                <TextBlock.Visibility>
                                    <MultiBinding Converter="{x:Static my:EqualityToVisibilityConverter.CollapsedIfNotEqual}">
                                        <Binding Path="Date.Date" />
                                        <Binding Path="Stage.StartDate.Date" />
                                    </MultiBinding>
                                </TextBlock.Visibility>
                            </TextBlock>
                        </Grid>

                        <!-- Versus -->
                        <TextBlock x:Name="versus"
                                   Text="{my:Resource VersusAbbr}"
                                   Visibility="Collapsed" />

                        <!-- Score -->
                        <Grid x:Name="score" Visibility="Collapsed">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="4" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Label x:Name="homeScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Content="{Binding Home.Score}" />
                            <Label x:Name="awayScore"
                                   Style="{StaticResource Scorer.Styles.Label.Score.Small}"
                                   Grid.Column="2"
                                   Content="{Binding Away.Score}" />
                        </Grid>

                    </Grid>

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
                            <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                            <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
                            <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                            <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                            <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
                            <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
                            <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                                <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchButton}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="date" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                                <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchButton}}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="versus" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="3 0 3 1" />
        <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>