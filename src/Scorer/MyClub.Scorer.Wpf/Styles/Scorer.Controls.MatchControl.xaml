<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ctrl="clr-namespace:MyClub.Scorer.Wpf.Controls"
                    xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain"
                    xmlns:my="http://mynet.com/xaml/themes"
                    xmlns:p="clr-namespace:MyClub.Scorer.Wpf.Parameters">

    <ResourceDictionary.MergedDictionaries>
        <my:SharedResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Themes/MyNet.Styles.xaml" />
        <my:SharedResourceDictionary Source="pack://application:,,,/Scorer;component/Styles/Scorer.Controls.TeamControl.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="Scorer.Styles.Label.Score.Small" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation.Custom}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Inverse}" />
        <Setter Property="FontFamily" Value="{StaticResource MyNet.Font.Family.Daggersquare}" />
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
        <Setter Property="Height" Value="18" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Width" Value="18" />
    </Style>

    <Style x:Key="Scorer.Styles.Label.Score.Medium" TargetType="{x:Type Label}" BasedOn="{StaticResource Scorer.Styles.Label.Score.Small}">
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Title}" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Width" Value="28" />
    </Style>

    <Style x:Key="Scorer.Styles.Label.Score.Large" TargetType="{x:Type Label}" BasedOn="{StaticResource Scorer.Styles.Label.Score.Small}">
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Header}" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="40" />
    </Style>

    <Style x:Key="Scorer.Styles.Label.Score.VeryLarge" TargetType="{x:Type Label}" BasedOn="{StaticResource Scorer.Styles.Label.Score.Small}">
        <Setter Property="FontSize" Value="45" />
        <Setter Property="Height" Value="60" />
        <Setter Property="Width" Value="60" />
    </Style>

    <Style x:Key="Scorer.Styles.MatchControl.Small" TargetType="{x:Type ctrl:MatchControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="15" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="col1" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="col2" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="col3" />
                            <ColumnDefinition Width="15" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <!-- Home -->
                        <ctrl:TeamControl x:Name="home"
                                          Style="{StaticResource Scorer.Styles.TeamControl.Horizontal.Small}"
                                          Grid.Column="0"
                                          HorizontalAlignment="Right"
                                          QualificationState="{Binding Match.Home.QualificationState, RelativeSource={RelativeSource TemplatedParent}}"
                                          Team="{Binding Match.Home.Team, RelativeSource={RelativeSource TemplatedParent}}" />

                        <!-- Home is withdrawn -->
                        <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}"
                               Grid.Column="2"
                               Width="18"
                               Height="18"
                               HorizontalAlignment="Center"
                               Background="{DynamicResource MyNet.Brushes.Negative}"
                               Content="{my:Resource WithdrawAbbr,
                                                     Casing=AllCaps}"
                               ToolTip="{my:Resource Withdraw}"
                               Visibility="{Binding Match.Home.IsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <!-- Home won after extra time -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="2"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource AfterExtraTimeAbbr2}"
                                   ToolTip="{my:Resource AfterExtraTime}"
                                   Visibility="{Binding Match.Home.HasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <!-- Home won after shootouts -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="2"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource ShootoutsAbbr2}"
                                   ToolTip="{my:Resource Shootouts}"
                                   Visibility="{Binding Match.Home.HasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <!-- Score -->
                        <ctrl:MatchButton x:Name="button"
                                          Grid.Column="3"
                                          HorizontalAlignment="Center"
                                          Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}"
                                          ShowTime="{Binding ShowTime, RelativeSource={RelativeSource TemplatedParent}}" />

                        <!-- Away won after extra time -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="4"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource AfterExtraTimeAbbr2}"
                                   ToolTip="{my:Resource AfterExtraTime}"
                                   Visibility="{Binding Match.Away.HasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <!-- Away won after shootouts -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="4"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource ShootoutsAbbr2}"
                                   ToolTip="{my:Resource Shootouts}"
                                   Visibility="{Binding Match.Away.HasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <!-- Away is withdrawn -->
                        <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}"
                               Grid.Column="4"
                               Width="18"
                               Height="18"
                               HorizontalAlignment="Center"
                               Background="{DynamicResource MyNet.Brushes.Negative}"
                               Content="{my:Resource WithdrawAbbr,
                                                     Casing=AllCaps}"
                               ToolTip="{my:Resource Withdraw}"
                               Visibility="{Binding Match.Away.IsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <!-- Away -->
                        <ctrl:TeamControl x:Name="away"
                                          Style="{StaticResource Scorer.Styles.TeamControl.Horizontal.Small}"
                                          Grid.Column="6"
                                          HorizontalAlignment="Left"
                                          IsAway="True"
                                          QualificationState="{Binding Match.Away.QualificationState, RelativeSource={RelativeSource TemplatedParent}}"
                                          Team="{Binding Match.Away.Team, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Match.Home.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Match.Away.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Scorer.Styles.MatchControl.Medium" TargetType="{x:Type ctrl:MatchControl}" BasedOn="{StaticResource Scorer.Styles.MatchControl.Small}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
                    <Grid Height="35">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="15" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="col1" />
                            <ColumnDefinition Width="AUto" SharedSizeGroup="col2" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="col3" />
                            <ColumnDefinition Width="15" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <!-- Home -->
                        <ctrl:TeamControl x:Name="home"
                                          Grid.Column="0"
                                          HorizontalAlignment="Right"
                                          QualificationState="{Binding Match.Home.QualificationState, RelativeSource={RelativeSource TemplatedParent}}"
                                          Team="{Binding Match.Home.Team, RelativeSource={RelativeSource TemplatedParent}}"
                                          TextWrapping="Wrap" />

                        <!-- Home is withdrawn -->
                        <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}"
                               Grid.Column="2"
                               Width="18"
                               Height="18"
                               HorizontalAlignment="Center"
                               Background="{DynamicResource MyNet.Brushes.Negative}"
                               Content="{my:Resource WithdrawAbbr,
                                                     Casing=AllCaps}"
                               ToolTip="{my:Resource Withdraw}"
                               Visibility="{Binding Match.Home.IsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <!-- Home won after extra time -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="2"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource AfterExtraTimeAbbr2}"
                                   ToolTip="{my:Resource AfterExtraTime}"
                                   Visibility="{Binding Match.Home.HasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <!-- Home won after shootouts -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="2"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource ShootoutsAbbr2}"
                                   ToolTip="{my:Resource Shootouts}"
                                   Visibility="{Binding Match.Home.HasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <ctrl:MatchButton x:Name="button"
                                          Grid.Column="3"
                                          HorizontalAlignment="Center"
                                          Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}">
                            <ctrl:MatchButton.ContentTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Border Background="White" Opacity="0.002" />

                                        <!-- IsCancelled -->
                                        <my:PackIcon x:Name="cancel"
                                                     Width="24"
                                                     Height="24"
                                                     Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                                     Kind="ProgressClose"
                                                     ToolTip="{my:Resource Cancelled}"
                                                     Visibility="Collapsed" />

                                        <!-- IsPostponed -->
                                        <my:PackIcon x:Name="postponed"
                                                     Width="24"
                                                     Height="24"
                                                     Foreground="{DynamicResource MyNet.Brushes.Warning}"
                                                     Kind="ProgressQuestion"
                                                     ToolTip="{my:Resource Postponed}"
                                                     Visibility="Collapsed" />

                                        <!-- Time -->
                                        <TextBlock x:Name="time"
                                                   Style="{StaticResource MyNet.Styles.TextBlock.Caption}"
                                                   FontFamily="{StaticResource MyNet.Font.Family.Digital}"
                                                   Text="{my:DisplayDateTime Date,
                                                                             Format=t,
                                                                             Casing=Title}"
                                                   Visibility="Collapsed" />

                                        <!-- Versus -->
                                        <TextBlock x:Name="versus"
                                                   Style="{StaticResource MyNet.Styles.TextBlock.Caption}"
                                                   Text="{my:Resource VersusAbbr}"
                                                   Visibility="Collapsed" />

                                        <!-- Score -->
                                        <Grid x:Name="score" Visibility="Collapsed">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="4" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>

                                            <Label x:Name="homeScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Content="{Binding Home.Score}" />
                                            <Label x:Name="awayScore"
                                                   Style="{StaticResource Scorer.Styles.Label.Score.Small}"
                                                   Grid.Column="2"
                                                   Content="{Binding Away.Score}" />
                                        </Grid>

                                    </Grid>

                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
                                            <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                            <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
                                            <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
                                            <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
                                            <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                                                <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchControl}}}" Value="True" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="time" Property="Visibility" Value="Visible" />
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                                                <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchControl}}}" Value="False" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="versus" Property="Visibility" Value="Visible" />
                                        </MultiDataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ctrl:MatchButton.ContentTemplate>
                        </ctrl:MatchButton>

                        <!-- Away won after extra time -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="4"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource AfterExtraTimeAbbr2}"
                                   ToolTip="{my:Resource AfterExtraTime}"
                                   Visibility="{Binding Match.Away.HasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <!-- Away won after shootouts -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="4"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource ShootoutsAbbr2}"
                                   ToolTip="{my:Resource Shootouts}"
                                   Visibility="{Binding Match.Away.HasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <!-- Away is withdrawn -->
                        <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}"
                               Grid.Column="4"
                               Width="18"
                               Height="18"
                               HorizontalAlignment="Center"
                               Background="{DynamicResource MyNet.Brushes.Negative}"
                               Content="{my:Resource WithdrawAbbr,
                                                     Casing=AllCaps}"
                               ToolTip="{my:Resource Withdraw}"
                               Visibility="{Binding Match.Away.IsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                        <!-- Away -->
                        <ctrl:TeamControl x:Name="away"
                                          Grid.Column="6"
                                          HorizontalAlignment="Left"
                                          IsAway="True"
                                          QualificationState="{Binding Match.Away.QualificationState, RelativeSource={RelativeSource TemplatedParent}}"
                                          Team="{Binding Match.Away.Team, RelativeSource={RelativeSource TemplatedParent}}"
                                          TextWrapping="Wrap" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Match.Home.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Match.Away.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Scorer.Styles.MatchControl.Large" TargetType="{x:Type ctrl:MatchControl}" BasedOn="{StaticResource Scorer.Styles.MatchControl.Small}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="10" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="10" />
                            <ColumnDefinition Width="70" />
                            <ColumnDefinition Width="10" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <!-- Date -->
                        <my:SimpleStackPanel Grid.ColumnSpan="5" HorizontalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Small}">
                            <TextBlock Text="{my:DisplayDateTime Match.Date, RelativeSource={RelativeSource TemplatedParent}, Format=D, Casing=Title}" Typography.Capitals="AllSmallCaps" />
                        </my:SimpleStackPanel>

                        <!-- Home -->
                        <ctrl:TeamControl x:Name="home"
                                          Style="{StaticResource Scorer.Styles.TeamControl.Vertical.Large}"
                                          Grid.Row="2"
                                          HorizontalAlignment="Center"
                                          QualificationState="{Binding Match.Home.QualificationState, RelativeSource={RelativeSource TemplatedParent}}"
                                          Team="{Binding Match.Home.Team, RelativeSource={RelativeSource TemplatedParent}}"
                                          TextWrapping="Wrap" />

                        <ctrl:MatchButton x:Name="button"
                                          Grid.Row="2"
                                          Grid.Column="2"
                                          HorizontalAlignment="Center"
                                          Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}">
                            <ctrl:MatchButton.ContentTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Border Background="White" Opacity="0.002" />

                                        <!-- IsCancelled -->
                                        <my:SimpleStackPanel x:Name="cancel" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="Collapsed">
                                            <my:PackIcon Width="36"
                                                         Height="36"
                                                         HorizontalAlignment="Center"
                                                         Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                                         Kind="ProgressClose" />
                                            <TextBlock Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource Cancelled}" />
                                        </my:SimpleStackPanel>

                                        <!-- IsPostponed -->
                                        <my:SimpleStackPanel x:Name="postponed" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="Collapsed">
                                            <my:PackIcon Width="36"
                                                         Height="36"
                                                         HorizontalAlignment="Center"
                                                         Foreground="{DynamicResource MyNet.Brushes.Warning}"
                                                         Kind="ProgressQuestion" />
                                            <TextBlock Foreground="{DynamicResource MyNet.Brushes.Warning}" Text="{my:Resource Postponed}" />
                                        </my:SimpleStackPanel>

                                        <!-- Time -->
                                        <TextBlock x:Name="time"
                                                   FontFamily="{StaticResource MyNet.Font.Family.Digital}"
                                                   FontSize="{StaticResource MyNet.Font.Size.Title}"
                                                   Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                                   Text="{my:DisplayDateTime Date,
                                                                             Format=t,
                                                                             Casing=Title}"
                                                   Visibility="Collapsed" />

                                        <!-- Versus -->
                                        <TextBlock x:Name="versus"
                                                   FontSize="{StaticResource MyNet.Font.Size.Title}"
                                                   Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                                   Text="{my:Resource VersusAbbr}"
                                                   Visibility="Collapsed" />

                                        <!-- Score -->
                                        <Grid x:Name="score" Visibility="Collapsed">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="6" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="5" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>

                                            <Label x:Name="homeScore" Style="{StaticResource Scorer.Styles.Label.Score.Medium}" Content="{Binding Home.Score}" />
                                            <Label x:Name="awayScore"
                                                   Style="{StaticResource Scorer.Styles.Label.Score.Medium}"
                                                   Grid.Column="2"
                                                   Content="{Binding Away.Score}" />

                                            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                                       Grid.Row="2"
                                                       Grid.ColumnSpan="3"
                                                       HorizontalAlignment="Center"
                                                       Text="{my:Resource AfterExtraTimeAbbr}"
                                                       ToolTip="{my:Resource AfterExtraTime}"
                                                       Visibility="{Binding AfterExtraTime, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                                            <my:SimpleStackPanel Grid.Row="3"
                                                                 Grid.ColumnSpan="3"
                                                                 HorizontalAlignment="Center"
                                                                 Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                                                 Orientation="Horizontal"
                                                                 Spacing="{StaticResource MyNet.Margin.Default}"
                                                                 Visibility="{Binding AfterShootouts, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                                                <Label x:Name="homeShootoutScore"
                                                       Style="{StaticResource Scorer.Styles.Label.Score.Small}"
                                                       Grid.Row="2"
                                                       Content="{Binding Home.ShootoutScore}" />
                                                <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Text="{my:Resource ShootoutsAbbr}" ToolTip="{my:Resource Shootouts}" />
                                                <Label x:Name="awayShootoutScore"
                                                       Style="{StaticResource Scorer.Styles.Label.Score.Small}"
                                                       Grid.Row="2"
                                                       Grid.Column="2"
                                                       Content="{Binding Away.ShootoutScore}" />
                                            </my:SimpleStackPanel>

                                            <!-- Home is withdrawn -->
                                            <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}"
                                                   Grid.Row="3"
                                                   Grid.Column="0"
                                                   Width="18"
                                                   Height="18"
                                                   HorizontalAlignment="Center"
                                                   Background="{DynamicResource MyNet.Brushes.Negative}"
                                                   Content="{my:Resource WithdrawAbbr,
                                                                         Casing=AllCaps}"
                                                   ToolTip="{my:Resource Withdraw}"
                                                   Visibility="{Binding Home.IsWithdrawn, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                                            <!-- Away is withdrawn -->
                                            <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}"
                                                   Grid.Row="3"
                                                   Grid.Column="2"
                                                   Width="18"
                                                   Height="18"
                                                   HorizontalAlignment="Center"
                                                   Background="{DynamicResource MyNet.Brushes.Negative}"
                                                   Content="{my:Resource WithdrawAbbr,
                                                                         Casing=AllCaps}"
                                                   ToolTip="{my:Resource Withdraw}"
                                                   Visibility="{Binding Away.IsWithdrawn, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
                                        </Grid>
                                    </Grid>

                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
                                            <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                            <Setter TargetName="awayShootoutScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                            <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                            <Setter TargetName="homeShootoutScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
                                            <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="awayShootoutScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="homeShootoutScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
                                            <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
                                            <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                                                <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchControl}}}" Value="True" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="time" Property="Visibility" Value="Visible" />
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                                                <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchControl}}}" Value="False" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="versus" Property="Visibility" Value="Visible" />
                                        </MultiDataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ctrl:MatchButton.ContentTemplate>
                        </ctrl:MatchButton>

                        <!-- Away -->
                        <ctrl:TeamControl x:Name="away"
                                          Style="{StaticResource Scorer.Styles.TeamControl.Vertical.Large}"
                                          Grid.Row="2"
                                          Grid.Column="4"
                                          HorizontalAlignment="Center"
                                          QualificationState="{Binding Match.Away.QualificationState, RelativeSource={RelativeSource TemplatedParent}}"
                                          Team="{Binding Match.Away.Team, RelativeSource={RelativeSource TemplatedParent}}"
                                          TextWrapping="Wrap" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Match.Home.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Match.Away.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>