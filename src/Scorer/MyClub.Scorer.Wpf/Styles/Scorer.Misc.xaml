<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:my="http://mynet.com/xaml/themes"
                    xmlns:units="clr-namespace:MyNet.Utilities.Units;assembly=MyNet.Utilities"
                    xmlns:vm="clr-namespace:MyNet.UI.ViewModels.Import;assembly=MyNet.UI">

    <ResourceDictionary.MergedDictionaries>
        <my:SharedResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Themes/MyNet.Styles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Dates and times -->
    <Style x:Key="Scorer.Styles.ContentControl.Date.Accent" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource MyNet.Styles.ContentControl}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent.Dark}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border BorderBrush="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="1" CornerRadius="2">
                        <StackPanel Orientation="Horizontal">
                            <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}"
                                    HorizontalAlignment="Left"
                                    Background="{Binding Path=(my:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
                                    BorderThickness="0"
                                    CornerRadius="2 0 0 2">
                                <TextBlock VerticalAlignment="Top"
                                           FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
                                           FontWeight="{StaticResource MyNet.Font.Weight.Header}"
                                           Foreground="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
                                           Text="{my:Translation Path='',
                                                                 Format=dd}" />
                            </Border>
                            <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}"
                                    HorizontalAlignment="Left"
                                    Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
                                    BorderThickness="0"
                                    CornerRadius="0 2 2 0"
                                    TextElement.Foreground="{Binding Path=(my:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}">
                                <StackPanel VerticalAlignment="Center">
                                    <TextBlock FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.4}" Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Text="{my:Translation Path='', Format=MMM, Casing=AllCaps}" />
                                    <Separator Margin="0" />
                                    <TextBlock FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.45}"
                                               Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
                                               Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                               Text="{my:Translation Path='',
                                                                     Format=yyyy}" />
                                </StackPanel>
                            </Border>
                        </StackPanel>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="50" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.White}" />
        <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Black}" />
    </Style>

    <Style x:Key="Scorer.Styles.ContentControl.Date.Foreground" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Scorer.Styles.ContentControl.Date.Accent}">
        <Setter Property="Background" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Secondary}}" />
        <Setter Property="BorderBrush" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="Foreground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
        <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <Style x:Key="Scorer.Styles.ContentControl.Time.Accent" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource MyNet.Styles.ContentControl}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent.Dark}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border BorderBrush="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="1" CornerRadius="2">
                        <StackPanel Orientation="Horizontal">
                            <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}"
                                    HorizontalAlignment="Left"
                                    Background="{Binding Path=(my:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
                                    BorderThickness="0"
                                    CornerRadius="2 0 0 2">
                                <TextBlock VerticalAlignment="Top"
                                           FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
                                           FontWeight="{StaticResource MyNet.Font.Weight.Header}"
                                           Foreground="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
                                           Text="{my:Translation Path='',
                                                                 Format=HH}" />
                            </Border>
                            <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}"
                                    HorizontalAlignment="Left"
                                    Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
                                    BorderThickness="0"
                                    CornerRadius="0 2 2 0"
                                    TextElement.Foreground="{Binding Path=(my:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}">
                                <TextBlock VerticalAlignment="Top"
                                           FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
                                           Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}"
                                           Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                           Text="{my:Translation Path='',
                                                                 Format=mm}" />
                            </Border>
                        </StackPanel>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.White}" />
        <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Black}" />
    </Style>

    <Style x:Key="Scorer.Styles.ContentControl.Time.Foreground" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Scorer.Styles.ContentControl.Time.Accent}">
        <Setter Property="Background" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Secondary}}" />
        <Setter Property="BorderBrush" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
        <Setter Property="Foreground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
        <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
        <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
    </Style>

    <!-- ListView -->
    <DataTemplate x:Key="Scorer.DataTemplates.ListView.SelectAll">
        <CheckBox x:Name="SelectAllCheckBox"
                  Margin="{StaticResource MyNet.Margins.Small.Left}"
                  HorizontalAlignment="Center"
                  IsChecked="{Binding DataContext.AreAllSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}"
                  ToolTip="{my:Resource SelectAll}" />
        <DataTemplate.Triggers>
            <Trigger SourceName="SelectAllCheckBox" Property="IsChecked" Value="True">
                <Setter TargetName="SelectAllCheckBox" Property="ToolBar.ToolTip" Value="{my:Resource UnselectAll}" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <Style x:Key="Scorer.Styles.ListViewItem.Selectable" TargetType="ListViewItem" BasedOn="{StaticResource MyNet.Styles.ListViewItem}">
        <Setter Property="IsEnabled" Value="{Binding IsSelectable}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
    </Style>
    <Style x:Key="Scorer.Styles.ListView.Selectable" TargetType="{x:Type ListView}" BasedOn="{StaticResource MyNet.Styles.ListView}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource Scorer.Styles.ListViewItem.Selectable}" />
    </Style>

    <!-- DataGrid -->
    <Style x:Key="Scorer.Styles.CheckBox.Embedded.DataGrid.Import" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Custom}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <my:PackIcon Width="24" Height="24" Kind="Close" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Height" Value="30" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Width" Value="30" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Item.Mode}" Value="{x:Static vm:ImportMode.Add}" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Positive}" />
                <Setter Property="my:ToggleButtonAssist.OnContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <my:PackIcon Width="24" Height="24" Kind="Plus" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Item.Mode}" Value="{x:Static vm:ImportMode.Update}" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                <Setter Property="my:ToggleButtonAssist.OnContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <my:PackIcon Width="20" Height="20" Kind="Edit" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Scorer.Styles.CheckBox.Embedded.DataGrid.Import.Edition" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource Scorer.Styles.CheckBox.Embedded.DataGrid.Import}">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="IsHitTestVisible" Value="True" />
    </Style>

    <Style x:Key="Scorer.Styles.ToggleButton.Embedded.ListView.Selection" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Custom}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- NavigationView -->
    <Style x:Key="Scorer.Styles.NavigationView.Top" TargetType="{x:Type my:NavigationView}" BasedOn="{StaticResource MyNet.Styles.NavigationView.Top}">
        <Setter Property="FrameBackground" Value="Transparent" />
        <Setter Property="FrameCornerRadius" Value="0" />
        <Setter Property="FrameMargin" Value="{StaticResource MyNet.Margins.Medium.Top}" />
        <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Medium}" />
        <Setter Property="ShowAutoSuggestBox" Value="False" />
        <Setter Property="ShowHeader" Value="False" />
        <Setter Property="ShowNavigationButtons" Value="False" />
    </Style>

    <!-- Count List -->
    <DataTemplate x:Key="Scorer.DataTemplates.List.Count">
        <Border x:Name="border"
                VerticalAlignment="Center"
                BorderBrush="{DynamicResource MyNet.Brushes.Control.Border}"
                BorderThickness="1"
                CornerRadius="17">
            <!-- Count -->
            <StackPanel Margin="11 5" Orientation="Horizontal" TextElement.FontSize="{StaticResource MyNet.Font.Size.Caption}">
                <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                <TextBlock Text="{Binding WrappersSource.Count}" />
            </StackPanel>
        </Border>
    </DataTemplate>
    <DataTemplate x:Key="Scorer.DataTemplates.List.Count.Selectable">
        <Button Style="{StaticResource MyNet.Styles.Button.Outlined}"
                my:IconAssist.Alignment="Right"
                my:IconAssist.Icon="{my:ToolIcon Kind=CheckAll}"
                my:IconAssist.Margin="{StaticResource MyNet.Margins.Default.Left}"
                my:ThemeAssist.CornerRadius="17"
                my:ToolTipAssist.Content="{my:ShortcutResource SelectAll,
                                                               ShortcutKey='Ctrl+A'}"
                my:ToolTipAssist.PlacementMode="BottomAndAlignCentres"
                Command="{Binding SelectAllCommand}"
                FontSize="{StaticResource MyNet.Font.Size.Caption}">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                <TextBlock Text="{Binding WrappersSource.Count}" />
            </StackPanel>
        </Button>
    </DataTemplate>
    <DataTemplate x:Key="Scorer.DataTemplates.List.Count.Selectable.DropDownButton">
        <Border x:Name="border"
                BorderBrush="{DynamicResource MyNet.Brushes.Control.Border}"
                BorderThickness="1"
                CornerRadius="17">
            <Border.Clip>
                <MultiBinding Converter="{x:Static my:GeometryConverter.Border}">
                    <Binding ElementName="border" Path="ActualWidth" />
                    <Binding ElementName="border" Path="ActualHeight" />
                    <Binding ElementName="border" Path="CornerRadius" />
                </MultiBinding>
            </Border.Clip>
            <my:SplitButton Style="{StaticResource MyNet.Styles.SplitButton.Outlined}"
                            my:IconAssist.Alignment="Right"
                            my:IconAssist.Icon="{my:ToolIcon Kind=CheckAll}"
                            my:IconAssist.Margin="{StaticResource MyNet.Margins.Default.Left}"
                            BorderThickness="0"
                            Command="{Binding SelectAllCommand}"
                            FontSize="{StaticResource MyNet.Font.Size.Caption}"
                            PopupPadding="0"
                            ToolTip="{my:ShortcutResource SelectAll,
                                                          ShortcutKey='Ctrl+A'}">
                <my:DropDownButton.ToggleContent>
                    <StackPanel Orientation="Horizontal" TextElement.FontSize="{StaticResource MyNet.Font.Size.Title}">
                        <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                        <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                        <TextBlock Text="{Binding WrappersSource.Count}" />
                    </StackPanel>
                </my:DropDownButton.ToggleContent>
                <my:Submenu ItemsSource="{Binding PresetSelections}">
                    <my:Submenu.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MyNet.Styles.MenuItem}">
                            <Setter Property="Command" Value="{Binding Value}" />
                            <Setter Property="Header" Value="{my:Translation Key}" />
                        </Style>
                    </my:Submenu.ItemContainerStyle>
                </my:Submenu>
            </my:SplitButton>
        </Border>
    </DataTemplate>

    <!-- Ghost No data -->
    <DataTemplate x:Key="Scorer.DataTemplates.Ghost.NoData.Large">
        <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Huge}">
            <my:PackIcon Width="150"
                         Height="150"
                         HorizontalAlignment="Center"
                         Kind="CircleOffOutline"
                         Opacity="{StaticResource MyNet.Opacity.Secondary}" />
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}"
                       HorizontalAlignment="Center"
                       FontSize="{StaticResource MyNet.Font.Size.Title}"
                       Text="{my:Resource NoData}" />
        </my:SimpleStackPanel>
    </DataTemplate>
    <DataTemplate x:Key="Scorer.DataTemplates.Ghost.NoData.Medium">
        <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
            <my:PackIcon Width="80"
                         Height="80"
                         HorizontalAlignment="Center"
                         Kind="CircleOffOutline"
                         Opacity="{StaticResource MyNet.Opacity.Secondary}" />
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" Text="{Binding}" />
        </my:SimpleStackPanel>
    </DataTemplate>
    <DataTemplate x:Key="Scorer.DataTemplates.Ghost.NoSelection.Medium">
        <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
            <my:PackIcon Width="80"
                         Height="80"
                         HorizontalAlignment="Center"
                         Kind="SquareOffOutline"
                         Opacity="{StaticResource MyNet.Opacity.Secondary}" />
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" Text="{Binding}" />
        </my:SimpleStackPanel>
    </DataTemplate>

    <!-- Reschedule -->
    <DataTemplate x:Key="Scorer.DataTemplates.Reschedule.Unit">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="65" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="90" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <my:NumericUpDown x:Name="Value" Style="{StaticResource MyNet.Styles.NumericUpDown}" HorizontalAlignment="Stretch" />
            <ComboBox x:Name="Unit"
                      Style="{StaticResource MyNet.Styles.ComboBox}"
                      Grid.Column="2"
                      HorizontalAlignment="Stretch"
                      SelectedIndex="0"
                      SelectedValuePath="DataContext">
                <ComboBoxItem Content="{my:Resource TimeUnitMinute}" DataContext="{x:Static units:TimeUnit.Minute}" />
                <ComboBoxItem Content="{my:Resource TimeUnitHour}" DataContext="{x:Static units:TimeUnit.Hour}" />
                <ComboBoxItem Content="{my:Resource TimeUnitDay}" DataContext="{x:Static units:TimeUnit.Day}" />
                <ComboBoxItem Content="{my:Resource TimeUnitWeek}" DataContext="{x:Static units:TimeUnit.Week}" />
                <ComboBoxItem Content="{my:Resource TimeUnitMonth}" DataContext="{x:Static units:TimeUnit.Month}" />
            </ComboBox>
            <Button Style="{StaticResource MyNet.Styles.Button.Icon}"
                    Grid.Column="4"
                    my:MenuAssist.CloseOnClick="True"
                    Command="{Binding}"
                    Content="{my:MediumIcon Kind=Check}"
                    ToolTip="{my:Resource Validate}">
                <Button.CommandParameter>
                    <MultiBinding Converter="{x:Static my:MultipleArrayConverter.Default}">
                        <Binding ElementName="Value" Path="Value" />
                        <Binding ElementName="Unit" Path="SelectedValue" />
                    </MultiBinding>
                </Button.CommandParameter>
            </Button>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="Scorer.DataTemplates.Reschedule.Date">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="10" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <!-- Date -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}"
                       HorizontalAlignment="Center"
                       Text="{my:Resource KeepDate}"
                       Visibility="{Binding SelectedDate, Converter={x:Static my:NullToVisibilityConverter.HiddenIfNotNull}, ElementName=date}" />
            <my:SimpleStackPanel HorizontalAlignment="Center" Orientation="Horizontal" Visibility="{Binding SelectedDate, Converter={x:Static my:NullToVisibilityConverter.HiddenIfNull}, ElementName=date}">
                <TextBlock FontSize="{StaticResource MyNet.Font.Size.Caption}" Text="{my:Translation SelectedDate, Format=LongDateFormat, ElementName=date, Casing=Title}" />
                <Button Style="{StaticResource MyNet.Styles.Button.Icon.Tool.Clear}" Command="{x:Static my:TextFieldAssist.ClearControlCommand}" CommandParameter="{Binding ElementName=date}" />
            </my:SimpleStackPanel>
            <Calendar x:Name="date"
                      Grid.Row="2"
                      my:CalendarAssist.IsHeaderVisible="False"
                      my:TextFieldAssist.HandlesClearCommand="True"
                      Background="Transparent"
                      Focusable="False" />

            <!-- Time -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}"
                       Grid.Column="2"
                       HorizontalAlignment="Center"
                       Text="{my:Resource KeepTime}"
                       Visibility="{Binding Time, Converter={x:Static my:NullToVisibilityConverter.HiddenIfNotNull}, ElementName=time}" />
            <my:SimpleStackPanel Grid.Column="2"
                                 HorizontalAlignment="Center"
                                 Orientation="Horizontal"
                                 Visibility="{Binding Time, Converter={x:Static my:NullToVisibilityConverter.HiddenIfNull}, ElementName=time}">
                <RadioButton Style="{StaticResource MyNet.Styles.ToggleButton.Icon.Foreground}"
                             Content="{my:Translation Time,
                                                      Format=HH,
                                                      ElementName=time}"
                             FontSize="{StaticResource MyNet.Font.Size.Caption}"
                             IsChecked="{Binding DisplayMode, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static md:ClockDisplayMode.Hours}, ElementName=time}" />
                <TextBlock FontSize="{StaticResource MyNet.Font.Size.Caption}" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text=":" />
                <RadioButton Style="{StaticResource MyNet.Styles.ToggleButton.Icon.Foreground}"
                             Content="{my:Translation Time,
                                                      Format=mm,
                                                      ElementName=time}"
                             FontSize="{StaticResource MyNet.Font.Size.Caption}"
                             IsChecked="{Binding DisplayMode, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static md:ClockDisplayMode.Minutes}, ElementName=time}" />
                <Button Style="{StaticResource MyNet.Styles.Button.Icon.Tool.Clear}" Command="{x:Static my:TextFieldAssist.ClearControlCommand}" CommandParameter="{Binding ElementName=time}" />
            </my:SimpleStackPanel>
            <my:Clock x:Name="time"
                      Grid.Row="2"
                      Grid.Column="2"
                      my:TextFieldAssist.HandlesClearCommand="True"
                      Background="Transparent"
                      IsHeaderVisible="False" />

            <Button Style="{StaticResource MyNet.Styles.Button.Icon}"
                    Grid.Row="2"
                    Grid.Column="4"
                    my:MenuAssist.CloseOnClick="True"
                    Command="{Binding}"
                    Content="{my:MediumIcon Kind=Check}"
                    ToolTip="{my:Resource Validate}">
                <Button.CommandParameter>
                    <MultiBinding Converter="{x:Static my:MultipleArrayConverter.Default}">
                        <Binding ElementName="date" Path="SelectedDate" />
                        <Binding Converter="{x:Static my:TimeConverter.Default}" ElementName="time" Path="Time" />
                    </MultiBinding>
                </Button.CommandParameter>
            </Button>
        </Grid>
    </DataTemplate>

</ResourceDictionary>