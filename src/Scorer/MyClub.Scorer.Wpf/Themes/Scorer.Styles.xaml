<!--
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
-->
<!--
Source files:
Styles\Scorer.Controls.MatchButton.xaml
Styles\Scorer.Controls.MatchControl.xaml
Styles\Scorer.Controls.MatchdayButton.xaml
Styles\Scorer.Controls.PlayerButton.xaml
Styles\Scorer.Controls.StadiumButton.xaml
Styles\Scorer.Controls.TeamButton.xaml
Styles\Scorer.Icons.xaml
Styles\Scorer.Misc.xaml
Styles\Scorer.Player.xaml
Styles\Scorer.Ranking.xaml
Styles\Scorer.Team.xaml
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ctrl="clr-namespace:MyClub.Scorer.Wpf.Controls" xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain" xmlns:my="http://mynet.com/xaml/themes" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:units="clr-namespace:MyNet.Utilities.Units;assembly=MyNet.Utilities" xmlns:vm="clr-namespace:MyNet.UI.ViewModels.Import;assembly=MyNet.UI" xmlns:utils="clr-namespace:MyNet.Utilities;assembly=MyNet.Utilities" xmlns:entities="clr-namespace:MyClub.Scorer.Wpf.ViewModels.Entities">
  <ResourceDictionary.MergedDictionaries>
    <my:SharedResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Themes/MyNet.Styles.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <sys:Int32 x:Key="One">1</sys:Int32>
  <sys:Int32 x:Key="Two">2</sys:Int32>
  <sys:Int32 x:Key="Five">5</sys:Int32>
  <sys:Int32 x:Key="Ten">10</sys:Int32>
  <sys:Int32 x:Key="Fifteen">15</sys:Int32>
  <sys:Int32 x:Key="Thirty">30</sys:Int32>
  <Geometry x:Key="Scorer.Geometries.Scorer" po:Freeze="True">M18 2C17.1 2 16 3 16 4H8C8 3 6.9 2 6 2H2V11C2 12 3 13 4 13H6.2C6.6 15 7.9 16.7 11 17V19.08C8 19.54 8 22 8 22H16C16 22 16 19.54 13 19.08V17C16.1 16.7 17.4 15 17.8 13H20C21 13 22 12 22 11V2H18M6 11H4V4H6V11M20 11H18V4H20V11Z</Geometry>
  <Style x:Key="Scorer.Styles.Label.Score.Medium" BasedOn="{StaticResource MyNet.Styles.Label.Elevation.Custom}" TargetType="{x:Type Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Title}" />
    <Setter Property="FontFamily" Value="{StaticResource MyNet.Font.Family.Daggersquare}" />
    <Setter Property="Height" Value="28" />
    <Setter Property="Width" Value="28" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
  </Style>
  <Style x:Key="Scorer.Styles.Label.Score.Small" BasedOn="{StaticResource Scorer.Styles.Label.Score.Medium}" TargetType="{x:Type Label}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="Height" Value="18" />
    <Setter Property="Width" Value="18" />
  </Style>
  <Style x:Key="Scorer.Styles.Label.Score.Large" BasedOn="{StaticResource Scorer.Styles.Label.Score.Medium}" TargetType="{x:Type Label}">
    <Setter Property="FontSize" Value="40" />
    <Setter Property="Height" Value="65" />
    <Setter Property="Width" Value="65" />
  </Style>
  <Style x:Key="Scorer.Styles.MatchdayButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:MatchdayButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.Name, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:MatchdayButton}}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="MatchdayProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Header="{Binding Name}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
          <MenuItem Command="{Binding AddMatchCommand}" Header="{my:Resource AddMatch}" Icon="{my:ToolIcon Kind=LibraryAdd}" />
          <MenuItem Command="{Binding DuplicateCommand}" Header="{my:Resource Duplicate}" Icon="{my:ToolIcon Kind=ContentDuplicate}" />
          <MenuItem Command="{Binding PostponeCommand}" Header="{my:Resource Postpone}" Icon="{my:ToolIcon Kind=ProgressQuestion}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Background="{DynamicResource MyNet.Brushes.Negative}" Command="{Binding RemoveCommand}" Foreground="{my:BrushBinding SelfPath=Background,                                                            Contrast=True}" Header="{my:Resource Remove}" Icon="{my:ToolIcon Kind=Trash}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.StadiumButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:StadiumButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.DisplayName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:StadiumButton}}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="StadiumProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Header="{Binding DisplayName}" Icon="{my:Icon Kind=Stadium}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding OpenGoogleMapsCommand}" Header="{my:Resource OpenInGoogleMaps}" Icon="{my:ToolIcon Kind=GoogleMaps}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <DataTemplate x:Key="Scorer.DataTemplates.ListView.SelectAll">
    <CheckBox x:Name="SelectAllCheckBox" Margin="{StaticResource MyNet.Margins.Small.Left}" HorizontalAlignment="Center" IsChecked="{Binding DataContext.AreAllSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" ToolTip="{my:Resource SelectAll}" />
    <DataTemplate.Triggers>
      <Trigger SourceName="SelectAllCheckBox" Property="IsChecked" Value="True">
        <Setter TargetName="SelectAllCheckBox" Property="ToolBar.ToolTip" Value="{my:Resource UnselectAll}" />
      </Trigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <Style x:Key="Scorer.Styles.ListViewItem.Selectable" BasedOn="{StaticResource MyNet.Styles.ListViewItem}" TargetType="ListViewItem">
    <Setter Property="IsSelected" Value="{Binding IsSelected}" />
    <Setter Property="IsEnabled" Value="{Binding IsSelectable}" />
  </Style>
  <Style x:Key="Scorer.Styles.ListView.Selectable" BasedOn="{StaticResource MyNet.Styles.ListView}" TargetType="{x:Type ListView}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource Scorer.Styles.ListViewItem.Selectable}" />
  </Style>
  <Style x:Key="Scorer.Styles.CheckBox.Embedded.DataGrid.Import" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Custom}" TargetType="{x:Type CheckBox}">
    <Setter Property="Width" Value="30" />
    <Setter Property="Height" Value="30" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:PackIcon Width="24" Height="24" Kind="Close" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Item.Mode}" Value="{x:Static vm:ImportMode.Add}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Positive}" />
        <Setter Property="my:ToggleButtonAssist.OnContentTemplate">
          <Setter.Value>
            <DataTemplate>
              <my:PackIcon Width="24" Height="24" Kind="Plus" />
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Item.Mode}" Value="{x:Static vm:ImportMode.Update}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
        <Setter Property="my:ToggleButtonAssist.OnContentTemplate">
          <Setter.Value>
            <DataTemplate>
              <my:PackIcon Width="20" Height="20" Kind="Edit" />
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.CheckBox.Embedded.DataGrid.Import.Edition" BasedOn="{StaticResource Scorer.Styles.CheckBox.Embedded.DataGrid.Import}" TargetType="{x:Type CheckBox}">
    <Setter Property="IsHitTestVisible" Value="True" />
    <Setter Property="Focusable" Value="True" />
  </Style>
  <Style x:Key="Scorer.Styles.ToggleButton.Embedded.ListView.Selection" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Custom}" TargetType="{x:Type ToggleButton}">
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.NavigationView.Top" BasedOn="{StaticResource MyNet.Styles.NavigationView.Top}" TargetType="{x:Type my:NavigationView}">
    <Setter Property="ShowAutoSuggestBox" Value="False" />
    <Setter Property="ShowHeader" Value="False" />
    <Setter Property="ShowNavigationButtons" Value="False" />
    <Setter Property="FrameBackground" Value="Transparent" />
    <Setter Property="FrameCornerRadius" Value="0" />
    <Setter Property="FrameMargin" Value="{StaticResource MyNet.Margins.Medium.Top}" />
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Medium}" />
  </Style>
  <DataTemplate x:Key="Scorer.DataTemplates.List.Count">
    <Border x:Name="border" VerticalAlignment="Center" BorderBrush="{DynamicResource MyNet.Brushes.Control.Border}" BorderThickness="1" CornerRadius="17">
      <!--  Count  -->
      <StackPanel Margin="11 5" Orientation="Horizontal" TextElement.FontSize="{StaticResource MyNet.Font.Size.Caption}">
        <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Text="{Binding WrappersSource.Count}" />
      </StackPanel>
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.List.Count.Selectable">
    <Button Style="{StaticResource MyNet.Styles.Button.Outlined}" my:IconAssist.Alignment="Right" my:IconAssist.Icon="{my:ToolIcon Kind=CheckAll}" my:IconAssist.Margin="{StaticResource MyNet.Margins.Default.Left}" my:ThemeAssist.CornerRadius="17" Command="{Binding SelectAllCommand}" FontSize="{StaticResource MyNet.Font.Size.Caption}" ToolTip="{my:ShortcutResource SelectAll,                                               ShortcutKey='Ctrl+A'}">
      <StackPanel Orientation="Horizontal">
        <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Text="{Binding WrappersSource.Count}" />
      </StackPanel>
    </Button>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.List.Count.Selectable.DropDownButton">
    <Border x:Name="border" BorderBrush="{DynamicResource MyNet.Brushes.Control.Border}" BorderThickness="1" CornerRadius="17">
      <Border.Clip>
        <MultiBinding Converter="{x:Static my:GeometryConverter.Border}">
          <Binding ElementName="border" Path="ActualWidth" />
          <Binding ElementName="border" Path="ActualHeight" />
          <Binding ElementName="border" Path="CornerRadius" />
        </MultiBinding>
      </Border.Clip>
      <my:SplitButton Style="{StaticResource MyNet.Styles.SplitButton.Outlined}" my:IconAssist.Alignment="Right" my:IconAssist.Icon="{my:ToolIcon Kind=CheckAll}" my:IconAssist.Margin="{StaticResource MyNet.Margins.Default.Left}" BorderThickness="0" Command="{Binding SelectAllCommand}" FontSize="{StaticResource MyNet.Font.Size.Caption}" PopupPadding="0" ToolTip="{my:ShortcutResource SelectAll,                                                           ShortcutKey='Ctrl+A'}">
        <my:DropDownButton.ToggleContent>
          <StackPanel Orientation="Horizontal" TextElement.FontSize="{StaticResource MyNet.Font.Size.Title}">
            <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <TextBlock Text="{Binding WrappersSource.Count}" />
          </StackPanel>
        </my:DropDownButton.ToggleContent>
        <my:Submenu ItemsSource="{Binding PresetSelections}">
          <my:Submenu.ItemContainerStyle>
            <Style BasedOn="{StaticResource MyNet.Styles.MenuItem}" TargetType="{x:Type MenuItem}">
              <Setter Property="Header" Value="{my:Translation Key}" />
              <Setter Property="Command" Value="{Binding Value}" />
            </Style>
          </my:Submenu.ItemContainerStyle>
        </my:Submenu>
      </my:SplitButton>
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Ghost.NoData.Large">
    <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Huge}">
      <my:PackIcon Width="150" Height="150" HorizontalAlignment="Center" Kind="CircleOffOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Title}" Text="{my:Resource NoData}" />
    </my:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Ghost.NoData.Medium">
    <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
      <my:PackIcon Width="80" Height="80" HorizontalAlignment="Center" Kind="CircleOffOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" Text="{Binding}" />
    </my:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Ghost.NoSelection.Medium">
    <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
      <my:PackIcon Width="80" Height="80" HorizontalAlignment="Center" Kind="SquareOffOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" Text="{Binding}" />
    </my:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Reschedule">
    <my:SimpleStackPanel Spacing="{StaticResource MyNet.Margin.Small}">
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" HorizontalAlignment="Center" Text="{my:Resource Personalize}" />
      <my:SimpleStackPanel Orientation="Horizontal">
        <my:NumericUpDown x:Name="Value" Style="{StaticResource MyNet.Styles.NumericUpDown}" Width="65" />
        <ComboBox x:Name="Unit" Style="{StaticResource MyNet.Styles.ComboBox}" Width="90" SelectedIndex="0" SelectedValuePath="DataContext">
          <ComboBoxItem Content="{my:Resource TimeUnitMinute}" DataContext="{x:Static units:TimeUnit.Minute}" />
          <ComboBoxItem Content="{my:Resource TimeUnitHour}" DataContext="{x:Static units:TimeUnit.Hour}" />
          <ComboBoxItem Content="{my:Resource TimeUnitDay}" DataContext="{x:Static units:TimeUnit.Day}" />
          <ComboBoxItem Content="{my:Resource TimeUnitWeek}" DataContext="{x:Static units:TimeUnit.Week}" />
          <ComboBoxItem Content="{my:Resource TimeUnitMonth}" DataContext="{x:Static units:TimeUnit.Month}" />
        </ComboBox>
        <Button Style="{StaticResource MyNet.Styles.Button.Icon}" my:MenuAssist.CloseOnClick="True" Command="{Binding}" Content="{my:MediumIcon Kind=Check}" ToolTip="{my:Resource Validate}">
          <Button.CommandParameter>
            <MultiBinding Converter="{x:Static my:MultipleArrayConverter.Default}">
              <Binding ElementName="Value" Path="Value" />
              <Binding ElementName="Unit" Path="SelectedValue" />
            </MultiBinding>
          </Button.CommandParameter>
        </Button>
      </my:SimpleStackPanel>
    </my:SimpleStackPanel>
  </DataTemplate>
  <Style x:Key="Scorer.Styles.PictureControl.Player.Small" BasedOn="{StaticResource {x:Type my:PictureControl}}" TargetType="{x:Type my:PictureControl}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background.Secondary}" />
    <Setter Property="Image" Value="{Binding DataContext.Photo, RelativeSource={RelativeSource Self}, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:BytesToImageConverter.Default}}" />
    <Setter Property="Width" Value="32" />
    <Setter Property="Height" Value="32" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:GeometryIcon x:Name="GenderIcon" Width="37" Height="37" Margin="0 0 0 -7" Data="{StaticResource MyNet.Geometries.Male}" Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
              <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Scorer.Styles.ListView.Ranking" BasedOn="{StaticResource MyNet.Styles.ListView}" TargetType="{x:Type ListView}">
    <Style.Resources>
      <Style BasedOn="{StaticResource MyNet.Styles.GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="my:DataGridAssist.ColumnHeaderPadding" Value="3" />
      </Style>
    </Style.Resources>
    <Setter Property="ItemsSource" Value="{Binding Items}" />
    <Setter Property="my:ListAssist.SynchronizedList" Value="{Binding}" />
    <Setter Property="my:ListViewAssist.HeaderHeight" Value="32" />
    <Setter Property="my:ListViewAssist.ItemMinHeight" Value="37" />
    <Setter Property="my:ListBoxItemAssist.ShowSelection" Value="False" />
    <Setter Property="my:ListViewAssist.AutoResizeIsEnabled" Value="True" />
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style BasedOn="{StaticResource MyNet.Styles.ListViewItem}" TargetType="{x:Type ListViewItem}">
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ListViewItem}">
                <Border Margin="{TemplateBinding Margin}" Padding="{Binding RelativeSource={RelativeSource Self}, Path=(my:ListViewAssist.ListViewItemPadding)}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}">
                  <Grid>
                    <Border x:Name="rankBorder" Background="{Binding Label.Color, Converter={x:Static my:BrushConverter.Default}}" Opacity="{StaticResource MyNet.Opacity.Checked}" />
                    <GridViewRowPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                      <GridViewRowPresenter.Resources>
                        <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
                          <Setter Property="TextWrapping" Value="NoWrap" />
                          <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                        </Style>
                      </GridViewRowPresenter.Resources>
                    </GridViewRowPresenter>
                  </Grid>
                </Border>
                <ControlTemplate.Triggers>
                  <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Scorer.Styles.ListView.Ranking.Small" BasedOn="{StaticResource Scorer.Styles.ListView.Ranking}" TargetType="{x:Type ListView}">
    <Setter Property="my:ListViewAssist.HeaderHeight" Value="25" />
    <Setter Property="my:ListViewAssist.ItemMinHeight" Value="22" />
  </Style>
  <Style x:Key="Scorer.Styles.PictureControl.Team" BasedOn="{StaticResource MyNet.Styles.PictureControl}" TargetType="{x:Type my:PictureControl}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Stretch" Value="Uniform" />
    <Setter Property="Image" Value="{Binding DataContext.Logo, RelativeSource={RelativeSource Self}, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:BytesToImageConverter.Default}}" />
    <Setter Property="Width" Value="25" />
    <Setter Property="Height" Value="25" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:PackIcon Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}}" Kind="Shield" Visibility="{Binding Image, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <DataTemplate x:Key="Scorer.DataTemplates.Team.ShortName.Away" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}" Width="19" Height="19" Margin="{StaticResource MyNet.Margins.Default.Right}" DataContext="{Binding}" DockPanel.Dock="Left" />
      <ctrl:TeamButton Item="{Binding}">
        <ctrl:TeamButton.ContentTemplate>
          <DataTemplate>
            <TextBlock Text="{Binding ShortName, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:StringConverter.ToUpper}}" />
          </DataTemplate>
        </ctrl:TeamButton.ContentTemplate>
      </ctrl:TeamButton>
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Team.ShortName.Home" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}" Width="19" Height="19" Margin="{StaticResource MyNet.Margins.Default.Left}" DataContext="{Binding}" DockPanel.Dock="Right" />
      <ctrl:TeamButton HorizontalAlignment="Right" Item="{Binding}">
        <ctrl:TeamButton.ContentTemplate>
          <DataTemplate>
            <TextBlock Text="{Binding ShortName, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:StringConverter.ToUpper}}" />
          </DataTemplate>
        </ctrl:TeamButton.ContentTemplate>
      </ctrl:TeamButton>
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Team.Small.Away" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}" Width="19" Height="19" Margin="{StaticResource MyNet.Margins.Default.Right}" DataContext="{Binding}" DockPanel.Dock="Left" />
      <ctrl:TeamButton Item="{Binding}" />
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Team.Small.Home" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}" Width="19" Height="19" Margin="{StaticResource MyNet.Margins.Default.Left}" DataContext="{Binding}" DockPanel.Dock="Right" />
      <ctrl:TeamButton HorizontalAlignment="Right" Item="{Binding}" />
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Team.Medium.Away" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}" Width="25" Height="25" Margin="{StaticResource MyNet.Margins.Default.Right}" DataContext="{Binding}" DockPanel.Dock="Left" />
      <ctrl:TeamButton Item="{Binding}" />
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Team.Medium.Home" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}" Width="25" Height="25" Margin="{StaticResource MyNet.Margins.Default.Left}" DataContext="{Binding}" DockPanel.Dock="Right" />
      <ctrl:TeamButton HorizontalAlignment="Right" Item="{Binding}" />
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Team.Large" DataType="{x:Type entities:TeamViewModel}">
    <my:SimpleStackPanel>
      <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}" Width="80" Height="80" DataContext="{Binding}" />
      <ctrl:TeamButton HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Caption}" Item="{Binding}" Typography.Capitals="AllSmallCaps" />
    </my:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Team.ComboBox" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}" Width="17" Height="17" Margin="{StaticResource MyNet.Margins.Default.Right}" DataContext="{Binding}" DockPanel.Dock="Left" />
      <TextBlock Text="{Binding Name}" />
    </DockPanel>
  </DataTemplate>
  <Style x:Key="Scorer.Styles.MatchButton" TargetType="{x:Type ctrl:MatchButton}" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}">
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Content" Value="{Binding Item, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <Border Background="White" Opacity="0.002" />
            <!-- IsCancelled -->
            <my:PackIcon x:Name="cancel" Width="18" Height="18" Foreground="{DynamicResource MyNet.Brushes.Negative}" Kind="ProgressClose" ToolTip="{my:Resource Cancelled}" Visibility="Collapsed" />
            <!-- IsPostponed -->
            <my:PackIcon x:Name="postponed" Width="18" Height="18" Foreground="{DynamicResource MyNet.Brushes.Warning}" Kind="ProgressQuestion" ToolTip="{my:Resource Postponed}" Visibility="Collapsed" />
            <!-- DateTime -->
            <Grid x:Name="date">
              <TextBlock Text="{my:DisplayDateTime Date, Format=ShortDateFormat, Casing=Title}">
                <TextBlock.Visibility>
                  <MultiBinding Converter="{x:Static my:EqualityToVisibilityConverter.CollapsedIfEqual}">
                    <Binding Path="Date.Date" />
                    <Binding Path="Parent.Date.Date" />
                  </MultiBinding>
                </TextBlock.Visibility>
              </TextBlock>
              <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:DisplayDateTime Date, Format=t, Casing=Title}">
                <TextBlock.Visibility>
                  <MultiBinding Converter="{x:Static my:EqualityToVisibilityConverter.CollapsedIfNotEqual}">
                    <Binding Path="Date.Date" />
                    <Binding Path="Parent.Date.Date" />
                  </MultiBinding>
                </TextBlock.Visibility>
              </TextBlock>
            </Grid>
            <!-- Score -->
            <Grid x:Name="score" Visibility="Collapsed">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="4" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Label x:Name="homeScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Content="{Binding HomeScore}" />
              <Label x:Name="awayScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Grid.Column="2" Content="{Binding AwayScore}" />
            </Grid>
          </Grid>
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
              <Setter TargetName="date" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="score" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
              <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
              <Setter TargetName="date" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
              <Setter TargetName="score" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
              <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
              <Setter TargetName="date" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
              <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
              <Setter TargetName="score" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
              <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
              <Setter TargetName="date" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
              <Setter TargetName="date" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="MatchProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Icon="{my:ToolIcon Kind=Eye}">
            <MenuItem.Header>
              <my:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
                <ContentControl Content="{Binding HomeTeam}" ContentTemplate="{StaticResource Scorer.DataTemplates.Team.ShortName.Home}" IsEnabled="False" />
                <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Resource VersusAbbr}" />
                <ContentControl Content="{Binding AwayTeam}" ContentTemplate="{StaticResource Scorer.DataTemplates.Team.ShortName.Away}" IsEnabled="False" />
              </my:SimpleStackPanel>
            </MenuItem.Header>
          </MenuItem>
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
          <MenuItem Header="{my:Resource Reschedule}" Icon="{my:ToolIcon Kind=ClockPlus}" IsEnabled="{Binding CanBeRescheduled}">
            <MenuItem Command="{Binding RescheduleAutomaticCommand}" Header="{my:Resource Automatic}" Icon="{my:ToolIcon Kind=Magic}" />
            <MenuItem Command="{Binding RescheduleXMinutesCommand}" CommandParameter="{StaticResource Five}" Header="{my:Translation Source={StaticResource Five}, Format=TimeSpanMinute, Pluralize=True}">
              <MenuItem.Icon>
                <Grid>
                  <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Foreground}" Width="16" Height="16" Padding="0" Content="{StaticResource Five}" FontSize="{StaticResource MyNet.Font.Size.Secondary}" FontWeight="Bold" />
                </Grid>
              </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding RescheduleXMinutesCommand}" CommandParameter="{StaticResource Ten}" Header="{my:Translation Source={StaticResource Ten}, Format=TimeSpanMinute, Pluralize=True}">
              <MenuItem.Icon>
                <Grid>
                  <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Foreground}" Width="16" Height="16" Padding="0" Content="{StaticResource Ten}" FontSize="{StaticResource MyNet.Font.Size.Secondary}" FontWeight="Bold" />
                </Grid>
              </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding RescheduleXMinutesCommand}" CommandParameter="{StaticResource Fifteen}" Header="{my:Translation Source={StaticResource Fifteen}, Format=TimeSpanMinute, Pluralize=True}">
              <MenuItem.Icon>
                <Grid>
                  <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Foreground}" Width="16" Height="16" Padding="0" Content="{StaticResource Fifteen}" FontSize="{StaticResource MyNet.Font.Size.Secondary}" FontWeight="Bold" />
                </Grid>
              </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding RescheduleXMinutesCommand}" CommandParameter="{StaticResource Thirty}" Header="{my:Translation Source={StaticResource Thirty}, Format=TimeSpanMinute, Pluralize=True}">
              <MenuItem.Icon>
                <Grid>
                  <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Foreground}" Width="16" Height="16" Padding="0" Content="{StaticResource Thirty}" FontSize="{StaticResource MyNet.Font.Size.Secondary}" FontWeight="Bold" />
                </Grid>
              </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding RescheduleXHoursCommand}" CommandParameter="{StaticResource One}" Header="{my:Translation Source={StaticResource One}, Format=TimeSpanHour, Pluralize=True}">
              <MenuItem.Icon>
                <Grid>
                  <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Foreground}" Width="16" Height="16" Padding="0" Content="{StaticResource One}" FontSize="{StaticResource MyNet.Font.Size.Secondary}" FontWeight="Bold" />
                </Grid>
              </MenuItem.Icon>
            </MenuItem>
            <MenuItem Command="{Binding RescheduleXHoursCommand}" CommandParameter="{StaticResource Two}" Header="{my:Translation Source={StaticResource Two}, Format=TimeSpanHour, Pluralize=True}">
              <MenuItem.Icon>
                <Grid>
                  <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Foreground}" Width="16" Height="16" Padding="0" Content="{StaticResource Two}" FontSize="{StaticResource MyNet.Font.Size.Secondary}" FontWeight="Bold" />
                </Grid>
              </MenuItem.Icon>
            </MenuItem>
            <MenuItem Height="50" my:RippleAssist.Feedback="Transparent" my:ThemeAssist.IsMouseOverBackground="Transparent" Header="{Binding Data.RescheduleCommand, Source={StaticResource MatchProxy}}" HeaderTemplate="{StaticResource Scorer.DataTemplates.Reschedule}" Icon="{my:ToolIcon Kind=ClockEdit}" />
          </MenuItem>
          <MenuItem Command="{Binding InvertTeamsCommand}" Header="{my:Resource InvertTeams}" Icon="{my:ToolIcon Kind=SwapHorizontal}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Header="{my:Resource Update}" Icon="{my:ToolIcon Kind=TimerRefreshOutline}">
            <MenuItem Command="{Binding ResetCommand}" Header="{my:Resource Reset}" Icon="{my:ToolIcon Kind=ProgressClock}" />
            <MenuItem Command="{Binding StartCommand}" Header="{my:Resource Start}" Icon="{my:ToolIcon Kind=ProgressHelper}" />
            <MenuItem Command="{Binding SuspendCommand}" Header="{my:Resource Suspend}" Icon="{my:ToolIcon Kind=ProgressAlert}" />
            <MenuItem Command="{Binding PostponeCommand}" Header="{my:Resource Postpone}" Icon="{my:ToolIcon Kind=ProgressQuestion}" />
            <MenuItem Command="{Binding CancelCommand}" Header="{my:Resource Cancel}" Icon="{my:ToolIcon Kind=ProgressClose}" />
          </MenuItem>
          <MenuItem Command="{Binding RandomizeCommand}" Header="{my:Resource Randomize}" Icon="{my:ToolIcon Kind=Counter}" />
          <MenuItem Header="{my:Resource DoWithdraw}" Icon="{my:ToolIcon Kind=Close}" IsEnabled="{Binding CanBeWithdraw}">
            <MenuItem Command="{Binding DoWithdrawForHomeTeamCommand}" Header="{my:Resource HomeTeam}" Icon="{my:ToolIcon Kind=Home}" />
            <MenuItem Command="{Binding DoWithdrawForAwayTeamCommand}" Header="{my:Resource AwayTeam}" Icon="{my:ToolIcon Kind=Plane}" />
          </MenuItem>
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Background="{DynamicResource MyNet.Brushes.Negative}" Command="{Binding RemoveCommand}" Foreground="{my:BrushBinding SelfPath=Background,                                                            Contrast=True}" Header="{my:Resource Remove}" Icon="{my:ToolIcon Kind=Trash}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Padding" Value="3 0 3 1" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.MatchControl" TargetType="{x:Type ctrl:MatchControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="10" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="10" />
              <ColumnDefinition Width="70" />
              <ColumnDefinition Width="10" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <!--  Date  -->
            <my:SimpleStackPanel Grid.ColumnSpan="5" HorizontalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Small}">
              <TextBlock Text="{my:DisplayDateTime Match.Date, RelativeSource={RelativeSource TemplatedParent}, Format=D, Casing=Title}" Typography.Capitals="AllSmallCaps" />
              <!--<Button Style="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}"
                                    HorizontalAlignment="Center"
                                    Command="{Binding Match.OpenParentCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                    Content="{Binding Match.Parent.Name, RelativeSource={RelativeSource TemplatedParent}}"
                                    Opacity="{StaticResource MyNet.Opacity.Secondary}" />-->
            </my:SimpleStackPanel>
            <!--  Home  -->
            <ContentControl x:Name="home" Grid.Row="2" HorizontalAlignment="Center" Content="{Binding Match.HomeTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Scorer.DataTemplates.Team.Large}" />
            <ctrl:MatchButton x:Name="button" Grid.Row="2" Grid.Column="2" HorizontalAlignment="Center" Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}">
              <ctrl:MatchButton.ContentTemplate>
                <DataTemplate>
                  <Grid>
                    <Border Background="White" Opacity="0.002" />
                    <!--  IsCancelled  -->
                    <my:SimpleStackPanel x:Name="cancel" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="Collapsed">
                      <my:PackIcon Width="36" Height="36" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Negative}" Kind="ProgressClose" />
                      <TextBlock Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource Cancelled}" />
                    </my:SimpleStackPanel>
                    <!--  IsPostponed  -->
                    <my:SimpleStackPanel x:Name="postponed" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="Collapsed">
                      <my:PackIcon Width="36" Height="36" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Warning}" Kind="ProgressQuestion" />
                      <TextBlock Foreground="{DynamicResource MyNet.Brushes.Warning}" Text="{my:Resource Postponed}" />
                    </my:SimpleStackPanel>
                    <!--  Time  -->
                    <TextBlock x:Name="time" FontFamily="{StaticResource MyNet.Font.Family.Digital}" FontSize="{StaticResource MyNet.Font.Size.Title}" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:DisplayDateTime Date,                                                                          Format=t,                                                                          Casing=Title}" Visibility="Visible" />
                    <!--  Score  -->
                    <Grid x:Name="score" Visibility="Collapsed">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="6" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <Label x:Name="homeScore" Style="{StaticResource Scorer.Styles.Label.Score.Medium}" Content="{Binding HomeScore}" />
                      <Label x:Name="awayScore" Style="{StaticResource Scorer.Styles.Label.Score.Medium}" Grid.Column="2" Content="{Binding AwayScore}" />
                      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Row="2" Grid.ColumnSpan="3" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding AfterExtraTime, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                      <my:SimpleStackPanel Grid.Row="3" Grid.ColumnSpan="3" HorizontalAlignment="Center" Opacity="{StaticResource MyNet.Opacity.Secondary}" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="{Binding AfterShootouts, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                        <Label x:Name="homeShootoutScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Grid.Row="2" Content="{Binding HomeShootoutScore}" />
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Text="{my:Resource ShootoutsAbbr}" ToolTip="{my:Resource Shootouts}" />
                        <Label x:Name="awayShootoutScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Grid.Row="2" Grid.Column="2" Content="{Binding AwayShootoutScore}" />
                      </my:SimpleStackPanel>
                      <!--  Home is withdrawn  -->
                      <TextBlock Grid.Row="3" Grid.Column="0" HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Caption}" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                                           Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding HomeIsWithdrawn, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                      <!--  Away is withdrawn  -->
                      <TextBlock Grid.Row="3" Grid.Column="2" HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Caption}" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                                           Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding AwayIsWithdrawn, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                    </Grid>
                  </Grid>
                  <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="homeShootoutScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="awayShootoutScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="homeShootoutScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="awayShootoutScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
                      <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
                      <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                  </DataTemplate.Triggers>
                </DataTemplate>
              </ctrl:MatchButton.ContentTemplate>
            </ctrl:MatchButton>
            <!--  Away  -->
            <ContentControl x:Name="away" Grid.Row="2" Grid.Column="4" HorizontalAlignment="Center" Content="{Binding Match.AwayTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Scorer.DataTemplates.Team.Large}" />
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Match.HomeHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Match.AwayHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <Trigger Property="EnableContextMenu" Value="False">
              <Setter TargetName="button" Property="ContextMenu" Value="{x:Null}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Scorer.Styles.MatchControl.Medium" BasedOn="{StaticResource Scorer.Styles.MatchControl}" TargetType="{x:Type ctrl:MatchControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
          <Grid Height="35">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="40" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="60" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="40" />
            </Grid.ColumnDefinitions>
            <!--  Home Rank  -->
            <!--<TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="0"
                                   Margin="{StaticResource MyNet.Margins.Medium.Right}"
                                   Text="{Binding Match.HomeRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:IntegerToOrdinalizeConverter.Default}}"
                                   Visibility="{Binding Match.HomeRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:EqualityToVisibilityConverter.CollapsedIfEqual}, ConverterParameter=0}" />-->
            <!--  Home  -->
            <ContentControl x:Name="home" Grid.Column="1" HorizontalAlignment="Right" Content="{Binding Match.HomeTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Scorer.DataTemplates.Team.Medium.Home}" />
            <!--  Home is withdrawn  -->
            <TextBlock Grid.Column="3" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                       Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.HomeIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Home won after extra time  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="3" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.HomeHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Home won after shootouts  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="3" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.HomeHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <ctrl:MatchButton x:Name="button" Grid.Column="4" HorizontalAlignment="Center" Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}">
              <ctrl:MatchButton.ContentTemplate>
                <DataTemplate>
                  <Grid>
                    <Border Background="White" Opacity="0.002" />
                    <!--  IsCancelled  -->
                    <my:PackIcon x:Name="cancel" Width="24" Height="24" Foreground="{DynamicResource MyNet.Brushes.Negative}" Kind="ProgressClose" ToolTip="{my:Resource Cancelled}" Visibility="Collapsed" />
                    <!--  IsPostponed  -->
                    <my:PackIcon x:Name="postponed" Width="24" Height="24" Foreground="{DynamicResource MyNet.Brushes.Warning}" Kind="ProgressQuestion" ToolTip="{my:Resource Postponed}" Visibility="Collapsed" />
                    <!--  Time  -->
                    <TextBlock x:Name="time" Style="{StaticResource MyNet.Styles.TextBlock.Caption}" FontFamily="{StaticResource MyNet.Font.Family.Digital}" Text="{my:DisplayDateTime Date,                                                                          Format=t,                                                                          Casing=Title}" Visibility="Visible" />
                    <!--  Score  -->
                    <Grid x:Name="score" Visibility="Collapsed">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="4" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <Label x:Name="homeScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Content="{Binding HomeScore}" />
                      <Label x:Name="awayScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Grid.Column="2" Content="{Binding AwayScore}" />
                    </Grid>
                  </Grid>
                  <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
                      <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
                      <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                  </DataTemplate.Triggers>
                </DataTemplate>
              </ctrl:MatchButton.ContentTemplate>
            </ctrl:MatchButton>
            <!--  Away won after extra time  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="5" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.AwayHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away won after shootouts  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="5" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.AwayHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away is withdrawn  -->
            <TextBlock Grid.Column="5" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                       Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.AwayIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away  -->
            <ContentControl x:Name="away" Grid.Column="7" HorizontalAlignment="Left" Content="{Binding Match.AwayTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Scorer.DataTemplates.Team.Medium.Away}" />
            <!--  Away Rank  -->
            <!--<TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="8"
                                   Margin="{StaticResource MyNet.Margins.Medium.Left}"
                                   Text="{Binding Match.AwayRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:IntegerToOrdinalizeConverter.Default}}"
                                   Visibility="{Binding Match.AwayRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:EqualityToVisibilityConverter.CollapsedIfEqual}, ConverterParameter=0}" />-->
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Match.HomeHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Match.AwayHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <Trigger Property="EnableContextMenu" Value="False">
              <Setter TargetName="button" Property="ContextMenu" Value="{x:Null}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Scorer.Styles.MatchControl.Small" BasedOn="{StaticResource Scorer.Styles.MatchControl}" TargetType="{x:Type ctrl:MatchControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="60" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <!--  Home  -->
            <ContentControl x:Name="home" Grid.Column="0" HorizontalAlignment="Right" Content="{Binding Match.HomeTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Scorer.DataTemplates.Team.Small.Home}" />
            <!--  Home is withdrawn  -->
            <TextBlock Grid.Column="2" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                       Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.HomeIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Home won after extra time  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="2" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.HomeHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Home won after shootouts  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="2" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.HomeHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Score  -->
            <ctrl:MatchButton x:Name="button" Grid.Column="3" HorizontalAlignment="Center" Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}" ShowTime="True" />
            <!--  Away won after extra time  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="4" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.AwayHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away won after shootouts  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="4" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.AwayHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away is withdrawn  -->
            <TextBlock Grid.Column="4" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                       Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.AwayIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away  -->
            <ContentControl x:Name="away" Grid.Column="6" HorizontalAlignment="Left" Content="{Binding Match.AwayTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Scorer.DataTemplates.Team.Small.Away}" />
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Match.HomeHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Match.AwayHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <Trigger Property="EnableContextMenu" Value="False">
              <Setter TargetName="button" Property="ContextMenu" Value="{x:Null}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Scorer.Styles.PlayerButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:PlayerButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <StackPanel Orientation="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}}">
            <DockPanel HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
              <TextBlock Padding="0" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" DockPanel.Dock="Left" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.LastName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}, Converter={x:Static my:StringConverter.ToUpper}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
              <TextBlock Padding="{StaticResource MyNet.Margins.Small.Horizontal}" Visibility="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}, Converter={x:Static my:EnumToVisibilityConverter.CollapsedIfNotAny}, ConverterParameter={x:Static Orientation.Horizontal}}" />
            </DockPanel>
            <TextBlock Padding="0" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.FirstName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
          </StackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="PlayerProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Header="{Binding FullName}">
            <MenuItem.Icon>
              <Grid>
                <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Player.Small}" DataContext="{Binding Data, Source={StaticResource PlayerProxy}}" />
              </Grid>
            </MenuItem.Icon>
          </MenuItem>
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.TeamButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:TeamButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="Padding" Value="3 0 3 1" />
    <Setter Property="Content" Value="{Binding Item, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="TeamProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Header="{Binding Name}">
            <MenuItem.Icon>
              <Grid>
                <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}" Margin="-5 0 0 0" DataContext="{Binding Data, Source={StaticResource TeamProxy}}" />
              </Grid>
            </MenuItem.Icon>
          </MenuItem>
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>