<!--
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
-->
<!--
Source files:
Styles\Scorer.Controls.CompetitionStageButton.xaml
Styles\Scorer.Controls.MatchButton.xaml
Styles\Scorer.Controls.MatchControl.xaml
Styles\Scorer.Controls.PlayerButton.xaml
Styles\Scorer.Controls.StadiumButton.xaml
Styles\Scorer.Controls.TeamButton.xaml
Styles\Scorer.Controls.TeamControl.xaml
Styles\Scorer.Controls.Timeline.xaml
Styles\Scorer.Icons.xaml
Styles\Scorer.Misc.xaml
Styles\Scorer.Player.xaml
Styles\Scorer.Ranking.xaml
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ctrl="clr-namespace:MyClub.Scorer.Wpf.Controls" xmlns:my="http://mynet.com/xaml/themes" xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:p="clr-namespace:MyClub.Scorer.Wpf.Parameters" xmlns:entities="clr-namespace:MyClub.Scorer.Wpf.ViewModels.Entities" xmlns:entitiesInterfaces="clr-namespace:MyClub.Scorer.Wpf.ViewModels.Entities.Interfaces" xmlns:s="clr-namespace:MyClub.Scorer.Wpf.Selectors" xmlns:c="clr-namespace:MyClub.Scorer.Wpf.Converters" xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:units="clr-namespace:MyNet.Utilities.Units;assembly=MyNet.Utilities" xmlns:vm="clr-namespace:MyNet.UI.ViewModels.Import;assembly=MyNet.UI" xmlns:utils="clr-namespace:MyNet.Utilities;assembly=MyNet.Utilities">
  <ResourceDictionary.MergedDictionaries>
    <my:SharedResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Themes/MyNet.Styles.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <sys:Int32 x:Key="One">1</sys:Int32>
  <sys:Int32 x:Key="Two">2</sys:Int32>
  <sys:Int32 x:Key="Five">5</sys:Int32>
  <sys:Int32 x:Key="Ten">10</sys:Int32>
  <sys:Int32 x:Key="Fifteen">15</sys:Int32>
  <sys:Int32 x:Key="Thirty">30</sys:Int32>
  <Geometry x:Key="Scorer.Geometries.Scorer" po:Freeze="True">M18 2C17.1 2 16 3 16 4H8C8 3 6.9 2 6 2H2V11C2 12 3 13 4 13H6.2C6.6 15 7.9 16.7 11 17V19.08C8 19.54 8 22 8 22H16C16 22 16 19.54 13 19.08V17C16.1 16.7 17.4 15 17.8 13H20C21 13 22 12 22 11V2H18M6 11H4V4H6V11M20 11H18V4H20V11Z</Geometry>
  <Style x:Key="Scorer.Styles.CompetitionStageButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:CompetitionStageButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.Name, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:CompetitionStageButton}}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.Label.Score.Small" TargetType="{x:Type Label}" BasedOn="{StaticResource MyNet.Styles.Label.Elevation.Custom}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background.Inverse}" />
    <Setter Property="FontFamily" Value="{StaticResource MyNet.Font.Family.Daggersquare}" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="Height" Value="18" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Width" Value="18" />
  </Style>
  <Style x:Key="Scorer.Styles.Label.Score.Medium" TargetType="{x:Type Label}" BasedOn="{StaticResource Scorer.Styles.Label.Score.Small}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Title}" />
    <Setter Property="Height" Value="28" />
    <Setter Property="Width" Value="28" />
  </Style>
  <Style x:Key="Scorer.Styles.Label.Score.Large" TargetType="{x:Type Label}" BasedOn="{StaticResource Scorer.Styles.Label.Score.Small}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Header}" />
    <Setter Property="Height" Value="40" />
    <Setter Property="Width" Value="40" />
  </Style>
  <Style x:Key="Scorer.Styles.Label.Score.VeryLarge" TargetType="{x:Type Label}" BasedOn="{StaticResource Scorer.Styles.Label.Score.Small}">
    <Setter Property="FontSize" Value="45" />
    <Setter Property="Height" Value="60" />
    <Setter Property="Width" Value="60" />
  </Style>
  <Style x:Key="Scorer.Styles.PlayerButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:PlayerButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <StackPanel Orientation="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}}">
            <DockPanel HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
              <TextBlock Padding="0" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" DockPanel.Dock="Left" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.LastName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}, Converter={x:Static my:StringConverter.ToUpper}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
              <TextBlock Padding="{StaticResource MyNet.Margins.Small.Horizontal}" Visibility="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}, Converter={x:Static my:EnumToVisibilityConverter.CollapsedIfNotAny}, ConverterParameter={x:Static Orientation.Horizontal}}" />
            </DockPanel>
            <TextBlock Padding="0" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.FirstName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
          </StackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.StadiumButton" TargetType="{x:Type ctrl:StadiumButton}" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon.ToolTip}">
    <Setter Property="BorderBrush" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="ButtonStyle" Value="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="PopupContent" Value="{Binding Item, RelativeSource={RelativeSource Self}}" />
    <Setter Property="PopupContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <ToolBar Style="{StaticResource MyNet.Styles.ToolBar.Tools}">
            <Button Command="{Binding OpenGoogleMapsCommand}" Content="{my:ToolIcon Kind=GoogleMaps}" ToolTip="{my:Resource OpenInGoogleMaps}" />
          </ToolBar>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ToggleCheckedContent" Value="{Binding Item, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToggleCheckedContentCommand" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToggleContent" Value="{Binding Item, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToggleContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:StadiumButton}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:StadiumButton}}}" Text="{Binding DisplayName, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.TeamButton" TargetType="{x:Type ctrl:TeamButton}" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}">
    <Setter Property="Command" Value="{Binding Item.EditCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Content" Value="{Binding Item, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock x:Name="text" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" TextWrapping="{Binding TextWrapping, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamButton}}}" />
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ShowShortName, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamButton}}}" Value="True">
              <Setter TargetName="text" Property="Text" Value="{Binding ShortName, UpdateSourceTrigger=PropertyChanged}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamButton}}}" Value="Center">
              <Setter TargetName="text" Property="TextAlignment" Value="Center" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="Padding" Value="3 0 3 1" />
    <Setter Property="ToolTip" Value="{my:Resource Edit}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.VirtualTeamButton" TargetType="{x:Type ctrl:VirtualTeamButton}" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}">
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Content" Value="{Binding Item, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock x:Name="text" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" TextWrapping="{Binding TextWrapping, RelativeSource={RelativeSource AncestorType={x:Type ctrl:VirtualTeamButton}}}" />
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ShowShortName, RelativeSource={RelativeSource AncestorType={x:Type ctrl:VirtualTeamButton}}}" Value="True">
              <Setter TargetName="text" Property="Text" Value="{Binding ShortName, UpdateSourceTrigger=PropertyChanged}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding HorizontalAlignment, RelativeSource={RelativeSource AncestorType={x:Type ctrl:VirtualTeamButton}}}" Value="Center">
              <Setter TargetName="text" Property="TextAlignment" Value="Center" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FontStyle" Value="Italic" />
    <Setter Property="FontWeight" Value="{Binding Path=(TextElement.FontWeight), RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="Padding" Value="3 0 3 1" />
    <Setter Property="ToolTip" Value="{my:Resource SeeMatch}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.PictureControl.Team" TargetType="{x:Type my:PictureControl}" BasedOn="{StaticResource MyNet.Styles.PictureControl}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:PackIcon Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}}" Kind="ShieldFavorite" Visibility="{Binding Image, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Height" Value="25" />
    <Setter Property="Image" Value="{Binding Logo, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:BytesToImageConverter.Default}}" />
    <Setter Property="Stretch" Value="Uniform" />
    <Setter Property="Width" Value="25" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.TeamControl.Horizontal" TargetType="{x:Type ctrl:TeamControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="LogoSize" Value="24" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:TeamControl}">
          <DockPanel>
            <!-- Qualification state -->
            <my:PackIcon x:Name="icon" Width="14" Height="14" Margin="{StaticResource MyNet.Margins.Default.Right}" DockPanel.Dock="Left" Foreground="{DynamicResource MyNet.Brushes.Gold}" Kind="Star" ToolTip="{my:Resource Qualified}">
              <my:PackIcon.Visibility>
                <Binding Converter="{x:Static my:EnumToVisibilityConverter.CollapsedIfNotAny}" Path="QualificationState" RelativeSource="{RelativeSource TemplatedParent}">
                  <Binding.ConverterParameter>
                    <x:Array Type="{x:Type entities:QualificationState}">
                      <entities:QualificationState>IsQualified</entities:QualificationState>
                      <entities:QualificationState>IsTemporaryQualified</entities:QualificationState>
                    </x:Array>
                  </Binding.ConverterParameter>
                </Binding>
              </my:PackIcon.Visibility>
            </my:PackIcon>
            <!-- Logo -->
            <ContentControl x:Name="logo" Margin="{StaticResource MyNet.Margins.Default.Left}" Content="{TemplateBinding Team}" DockPanel.Dock="Right">
              <ContentControl.ContentTemplateSelector>
                <s:TeamDataTemplateSelector>
                  <s:TeamDataTemplateSelector.TeamTemplate>
                    <DataTemplate>
                      <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}" Width="{Binding LogoSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" Height="{Binding LogoSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" DataContext="{Binding}" />
                    </DataTemplate>
                  </s:TeamDataTemplateSelector.TeamTemplate>
                  <s:TeamDataTemplateSelector.VirtualTeamTemplate>
                    <DataTemplate>
                      <my:PackIcon Width="{Binding LogoSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" Height="{Binding LogoSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" Kind="Shield" Opacity="{StaticResource MyNet.Opacity.Overlay}" />
                    </DataTemplate>
                  </s:TeamDataTemplateSelector.VirtualTeamTemplate>
                </s:TeamDataTemplateSelector>
              </ContentControl.ContentTemplateSelector>
            </ContentControl>
            <!-- Team -->
            <ContentControl x:Name="team" HorizontalAlignment="Right" Content="{TemplateBinding Team}">
              <ContentControl.ContentTemplateSelector>
                <s:TeamDataTemplateSelector>
                  <s:TeamDataTemplateSelector.TeamTemplate>
                    <DataTemplate>
                      <ctrl:TeamButton Item="{Binding}" ShowShortName="{Binding ShowShortName, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" TextWrapping="{Binding TextWrapping, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" />
                    </DataTemplate>
                  </s:TeamDataTemplateSelector.TeamTemplate>
                  <s:TeamDataTemplateSelector.VirtualTeamTemplate>
                    <DataTemplate>
                      <ctrl:VirtualTeamButton Item="{Binding}" ShowShortName="{Binding ShowShortName, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" TextWrapping="{Binding TextWrapping, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" />
                    </DataTemplate>
                  </s:TeamDataTemplateSelector.VirtualTeamTemplate>
                </s:TeamDataTemplateSelector>
              </ContentControl.ContentTemplateSelector>
            </ContentControl>
          </DockPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="QualificationState" Value="IsTemporaryQualified">
              <Setter TargetName="icon" Property="Kind" Value="FavoriteHalfFull" />
              <Setter TargetName="icon" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
              <Setter TargetName="icon" Property="ToolTip" Value="{my:Resource TemporaryQualified}" />
            </Trigger>
            <Trigger Property="IsAway" Value="True">
              <Setter TargetName="icon" Property="DockPanel.Dock" Value="Right" />
              <Setter TargetName="icon" Property="Margin" Value="{StaticResource MyNet.Margins.Default.Left}" />
              <Setter TargetName="logo" Property="DockPanel.Dock" Value="Left" />
              <Setter TargetName="logo" Property="Margin" Value="{StaticResource MyNet.Margins.Default.Right}" />
              <Setter TargetName="team" Property="HorizontalAlignment" Value="Left" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Scorer.Styles.TeamControl.Horizontal.Small" TargetType="{x:Type ctrl:TeamControl}" BasedOn="{StaticResource Scorer.Styles.TeamControl.Horizontal}">
    <Setter Property="LogoSize" Value="19" />
  </Style>
  <Style x:Key="Scorer.Styles.TeamControl.Horizontal.Large" TargetType="{x:Type ctrl:TeamControl}" BasedOn="{StaticResource Scorer.Styles.TeamControl.Horizontal}">
    <Setter Property="LogoSize" Value="40" />
  </Style>
  <Style x:Key="Scorer.Styles.TeamControl.Vertical" TargetType="{x:Type ctrl:TeamControl}" BasedOn="{StaticResource Scorer.Styles.TeamControl.Horizontal}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Caption}" />
    <Setter Property="LogoSize" Value="60" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:TeamControl}">
          <my:SimpleStackPanel>
            <!-- Logo -->
            <ContentControl x:Name="logo" Content="{TemplateBinding Team}">
              <ContentControl.ContentTemplateSelector>
                <s:TeamDataTemplateSelector>
                  <s:TeamDataTemplateSelector.TeamTemplate>
                    <DataTemplate>
                      <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}" Width="{Binding LogoSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" Height="{Binding LogoSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" DataContext="{Binding}" />
                    </DataTemplate>
                  </s:TeamDataTemplateSelector.TeamTemplate>
                  <s:TeamDataTemplateSelector.VirtualTeamTemplate>
                    <DataTemplate>
                      <my:PackIcon Width="{Binding LogoSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" Height="{Binding LogoSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" Kind="Shield" Opacity="{StaticResource MyNet.Opacity.Overlay}" />
                    </DataTemplate>
                  </s:TeamDataTemplateSelector.VirtualTeamTemplate>
                </s:TeamDataTemplateSelector>
              </ContentControl.ContentTemplateSelector>
            </ContentControl>
            <DockPanel>
              <!-- Qualification state -->
              <my:PackIcon x:Name="icon" Width="14" Height="14" Margin="{StaticResource MyNet.Margins.Default.Right}" DockPanel.Dock="Left" Foreground="{DynamicResource MyNet.Brushes.Gold}" Kind="Star" ToolTip="{my:Resource Qualified}">
                <my:PackIcon.Visibility>
                  <Binding Converter="{x:Static my:EnumToVisibilityConverter.CollapsedIfNotAny}" Path="QualificationState" RelativeSource="{RelativeSource TemplatedParent}">
                    <Binding.ConverterParameter>
                      <x:Array Type="{x:Type entities:QualificationState}">
                        <entities:QualificationState>IsQualified</entities:QualificationState>
                        <entities:QualificationState>IsTemporaryQualified</entities:QualificationState>
                      </x:Array>
                    </Binding.ConverterParameter>
                  </Binding>
                </my:PackIcon.Visibility>
              </my:PackIcon>
              <!-- Team -->
              <ContentControl x:Name="team" HorizontalAlignment="Center" Content="{TemplateBinding Team}">
                <ContentControl.ContentTemplateSelector>
                  <s:TeamDataTemplateSelector>
                    <s:TeamDataTemplateSelector.TeamTemplate>
                      <DataTemplate>
                        <ctrl:TeamButton HorizontalAlignment="Center" Item="{Binding}" ShowShortName="{Binding ShowShortName, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" TextWrapping="{Binding TextWrapping, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" Typography.Capitals="AllSmallCaps" />
                      </DataTemplate>
                    </s:TeamDataTemplateSelector.TeamTemplate>
                    <s:TeamDataTemplateSelector.VirtualTeamTemplate>
                      <DataTemplate>
                        <ctrl:VirtualTeamButton HorizontalAlignment="Center" Item="{Binding}" ShowShortName="{Binding ShowShortName, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" TextWrapping="{Binding TextWrapping, RelativeSource={RelativeSource AncestorType={x:Type ctrl:TeamControl}}}" Typography.Capitals="AllSmallCaps" />
                      </DataTemplate>
                    </s:TeamDataTemplateSelector.VirtualTeamTemplate>
                  </s:TeamDataTemplateSelector>
                </ContentControl.ContentTemplateSelector>
              </ContentControl>
            </DockPanel>
          </my:SimpleStackPanel>
          <ControlTemplate.Triggers>
            <Trigger Property="QualificationState" Value="IsTemporaryQualified">
              <Setter TargetName="icon" Property="Kind" Value="FavoriteHalfFull" />
              <Setter TargetName="icon" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
              <Setter TargetName="icon" Property="ToolTip" Value="{my:Resource TemporaryQualified}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Scorer.Styles.TeamControl.Vertical.Large" TargetType="{x:Type ctrl:TeamControl}" BasedOn="{StaticResource Scorer.Styles.TeamControl.Vertical}">
    <Setter Property="LogoSize" Value="80" />
  </Style>
  <Style x:Key="Scorer.Styles.MatchTimeline" TargetType="{x:Type ctrl:MatchTimeline}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="BarWidth" Value="5" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ContentPresenter}">
          <Setter Property="Canvas.Left">
            <Setter.Value>
              <MultiBinding Converter="{x:Static c:MinuteToCanvasPositionConverter.Default}">
                <Binding Path="Minute" />
                <Binding Path="MatchFormat" RelativeSource="{RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}" />
                <Binding Path="ShowExtraTime" RelativeSource="{RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}" />
              </MultiBinding>
            </Setter.Value>
          </Setter>
          <Setter Property="Canvas.Top" Value="50" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <DataTemplate.Resources>
            <DataTemplate DataType="{x:Type entities:CardViewModel}">
              <my:Card x:Name="icon" Style="{StaticResource MyNet.Styles.Card.Elevation}" Grid.Column="0" Width="10" Height="14" Padding="0" HorizontalAlignment="Center" Background="{Binding Color, Converter={x:Static c:CardToBrushConverter.Default}}" UniformCornerRadius="3" />
            </DataTemplate>
            <DataTemplate DataType="{x:Type entities:GoalViewModel}">
              <my:PackIcon x:Name="icon" Width="14" Height="14" Margin="-1 0 0 0" HorizontalAlignment="Center" Kind="Soccer" />
              <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Type}" Value="{x:Static enums:GoalType.OwnGoal}">
                  <Setter TargetName="icon" Property="Foreground" Value="{DynamicResource MyNet.Brushes.Negative}" />
                </DataTrigger>
              </DataTemplate.Triggers>
            </DataTemplate>
          </DataTemplate.Resources>
          <Grid Margin="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={x:Static my:DoubleToThicknessConverter.All}}" HorizontalAlignment="Center" Tag="{Binding MinuteSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}, Converter={x:Static my:MathConverter.Divide}, ConverterParameter=-2}">
            <!-- Minute -->
            <Label x:Name="minute" Style="{StaticResource MyNet.Styles.Label.Rounded.Custom}" Width="{Binding MinuteSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}}" Height="{Binding MinuteSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}}" Background="{Binding Color, Converter={x:Static my:ColorToBrushConverter.Default}}">
              <StackPanel Orientation="Horizontal">
                <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" DockPanel.Dock="Left" FontSize="8" Text="{Binding Minute}" />
                <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Text="'" />
              </StackPanel>
            </Label>
            <Canvas>
              <Grid x:Name="event" Margin="-12 -40 0 0" ToolTip="{Binding DisplayName}">
                <Viewbox Width="30" Height="30">
                  <Path x:Name="marker" Data="M 12 2 A 7 7 0 0 0 5 9 C 5 14.25 12 22 12 22 C 12 22 19 14.25 19 9 A 7 7 0 0 0 12 2 Z" Fill="{Binding Color, Converter={x:Static my:ColorToBrushConverter.Default}}" RenderTransformOrigin="0.65 0.54" />
                </Viewbox>
                <ContentControl x:Name="label" Margin="7 -3 0 0" Content="{Binding Item}" Foreground="{Binding Color, Converter={x:Static my:BrushConverter.Contrast}}" />
              </Grid>
            </Canvas>
          </Grid>
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Color, Converter={x:Static my:NullToBooleanConverter.TrueIfNull}}" Value="True">
              <Setter TargetName="minute" Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
              <Setter TargetName="marker" Property="Fill" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
              <Setter TargetName="label" Property="Foreground" Value="{DynamicResource MyNet.Brushes.Application.Foreground}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsHome}" Value="False">
              <Setter TargetName="event" Property="Margin" Value="-12 17 0 0" />
              <Setter TargetName="label" Property="Margin" Value="10 7 0 0" />
              <Setter TargetName="marker" Property="RenderTransform">
                <Setter.Value>
                  <RotateTransform Angle="180" />
                </Setter.Value>
              </Setter>
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <my:RelativeCanvas IsItemsHost="True" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="MinuteSize" Value="15" />
    <Setter Property="PeriodSize" Value="25" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MatchTimeline}">
          <Grid Margin="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={x:Static my:DoubleToThicknessConverter.Horizontal}}" Tag="{Binding PeriodSize, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:MathConverter.Divide}, ConverterParameter=2}">
            <!-- Bar -->
            <my:Card Style="{StaticResource MyNet.Styles.Card.Elevation.Custom}" Height="{TemplateBinding BarWidth}" Padding="0" VerticalAlignment="Center" Background="{TemplateBinding Background}" />
            <!-- Periods -->
            <ItemsControl x:Name="PART_Periods" Style="{StaticResource MyNet.Styles.ItemsControl}" VerticalAlignment="Stretch" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
              <ItemsControl.ItemContainerStyle>
                <Style TargetType="{x:Type ContentPresenter}">
                  <Setter Property="Canvas.Left">
                    <Setter.Value>
                      <MultiBinding Converter="{x:Static c:MinuteToCanvasPositionConverter.Default}">
                        <Binding />
                        <Binding Path="MatchFormat" RelativeSource="{RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}" />
                        <Binding Path="ShowExtraTime" RelativeSource="{RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}" />
                      </MultiBinding>
                    </Setter.Value>
                  </Setter>
                  <Setter Property="Canvas.Top" Value="50" />
                  <Setter Property="Height" Value="{Binding PeriodSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}}" />
                  <Setter Property="Margin" Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={x:Static my:DoubleToThicknessConverter.All}}" />
                  <Setter Property="Tag" Value="{Binding PeriodSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}, Converter={x:Static my:MathConverter.Divide}, ConverterParameter=-2}" />
                  <Setter Property="Width" Value="{Binding PeriodSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}}" />
                </Style>
              </ItemsControl.ItemContainerStyle>
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <my:RelativeCanvas HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsItemsHost="True" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Custom}" Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}, AncestorLevel=2}}">
                    <StackPanel Opacity="{Binding Path=(my:HeaderAssist.Opacity), RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}}" Orientation="Horizontal" TextElement.FontSize="{Binding Path=(my:HeaderAssist.FontSize), RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}}" TextElement.Foreground="{Binding Path=(my:HeaderAssist.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchTimeline}}}">
                      <TextBlock DockPanel.Dock="Left" Text="{Binding}" />
                      <TextBlock Text="'" />
                    </StackPanel>
                  </Label>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
            <!-- Events -->
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="my:HeaderAssist.FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="my:HeaderAssist.Foreground" Value="{my:BrushBinding SelfPath=Foreground}" />
    <Setter Property="my:HeaderAssist.Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
  </Style>
  <Style x:Key="Scorer.Styles.ContentControl.Date.Accent" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource MyNet.Styles.ContentControl}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent.Dark}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Border BorderBrush="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="1" CornerRadius="2">
            <StackPanel Orientation="Horizontal">
              <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}" HorizontalAlignment="Left" Background="{Binding Path=(my:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="0" CornerRadius="2 0 0 2">
                <TextBlock VerticalAlignment="Top" FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" FontWeight="{StaticResource MyNet.Font.Weight.Header}" Foreground="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Text="{my:Translation Path='',                                                                  Format=dd}" />
              </Border>
              <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}" HorizontalAlignment="Left" Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="0" CornerRadius="0 2 2 0" TextElement.Foreground="{Binding Path=(my:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}">
                <StackPanel VerticalAlignment="Center">
                  <TextBlock FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.4}" Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Text="{my:Translation Path='', Format=MMM, Casing=AllCaps}" />
                  <Separator Margin="0" />
                  <TextBlock FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.45}" Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Translation Path='',                                                                      Format=yyyy}" />
                </StackPanel>
              </Border>
            </StackPanel>
          </Border>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="50" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.White}" />
    <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Black}" />
  </Style>
  <Style x:Key="Scorer.Styles.ContentControl.Date.Foreground" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Scorer.Styles.ContentControl.Date.Accent}">
    <Setter Property="Background" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Secondary}}" />
    <Setter Property="BorderBrush" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
    <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="Scorer.Styles.ContentControl.Time.Accent" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource MyNet.Styles.ContentControl}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent.Dark}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Border BorderBrush="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="1" CornerRadius="2">
            <StackPanel Orientation="Horizontal">
              <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}" HorizontalAlignment="Left" Background="{Binding Path=(my:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="0" CornerRadius="2 0 0 2">
                <TextBlock VerticalAlignment="Top" FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" FontWeight="{StaticResource MyNet.Font.Weight.Header}" Foreground="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Text="{my:Translation Path='',                                                                  Format=HH}" />
              </Border>
              <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}" HorizontalAlignment="Left" Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="0" CornerRadius="0 2 2 0" TextElement.Foreground="{Binding Path=(my:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}">
                <TextBlock VerticalAlignment="Top" FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Translation Path='',                                                                  Format=mm}" />
              </Border>
            </StackPanel>
          </Border>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="18" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.White}" />
    <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Black}" />
  </Style>
  <Style x:Key="Scorer.Styles.ContentControl.Time.Foreground" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Scorer.Styles.ContentControl.Time.Accent}">
    <Setter Property="Background" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Secondary}}" />
    <Setter Property="BorderBrush" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
    <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <DataTemplate x:Key="Scorer.DataTemplates.ListView.SelectAll">
    <CheckBox x:Name="SelectAllCheckBox" Margin="{StaticResource MyNet.Margins.Small.Left}" HorizontalAlignment="Center" IsChecked="{Binding DataContext.AreAllSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" ToolTip="{my:Resource SelectAll}" />
    <DataTemplate.Triggers>
      <Trigger SourceName="SelectAllCheckBox" Property="IsChecked" Value="True">
        <Setter TargetName="SelectAllCheckBox" Property="ToolBar.ToolTip" Value="{my:Resource UnselectAll}" />
      </Trigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <Style x:Key="Scorer.Styles.ListViewItem.Selectable" TargetType="ListViewItem" BasedOn="{StaticResource MyNet.Styles.ListViewItem}">
    <Setter Property="IsEnabled" Value="{Binding IsSelectable}" />
    <Setter Property="IsSelected" Value="{Binding IsSelected}" />
  </Style>
  <Style x:Key="Scorer.Styles.ListView.Selectable" TargetType="{x:Type ListView}" BasedOn="{StaticResource MyNet.Styles.ListView}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource Scorer.Styles.ListViewItem.Selectable}" />
  </Style>
  <Style x:Key="Scorer.Styles.CheckBox.Embedded.DataGrid.Import" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Custom}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:PackIcon Width="24" Height="24" Kind="Close" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Height" Value="30" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="Width" Value="30" />
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Item.Mode}" Value="{x:Static vm:ImportMode.Add}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Positive}" />
        <Setter Property="my:ToggleButtonAssist.OnContentTemplate">
          <Setter.Value>
            <DataTemplate>
              <my:PackIcon Width="24" Height="24" Kind="Plus" />
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Item.Mode}" Value="{x:Static vm:ImportMode.Update}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
        <Setter Property="my:ToggleButtonAssist.OnContentTemplate">
          <Setter.Value>
            <DataTemplate>
              <my:PackIcon Width="20" Height="20" Kind="Edit" />
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.CheckBox.Embedded.DataGrid.Import.Edition" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource Scorer.Styles.CheckBox.Embedded.DataGrid.Import}">
    <Setter Property="Focusable" Value="True" />
    <Setter Property="IsHitTestVisible" Value="True" />
  </Style>
  <Style x:Key="Scorer.Styles.ToggleButton.Embedded.ListView.Selection" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Custom}">
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.NavigationView.Top" TargetType="{x:Type my:NavigationView}" BasedOn="{StaticResource MyNet.Styles.NavigationView.Top}">
    <Setter Property="FrameBackground" Value="Transparent" />
    <Setter Property="FrameCornerRadius" Value="0" />
    <Setter Property="FrameMargin" Value="{StaticResource MyNet.Margins.Medium.Top}" />
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="ShowAutoSuggestBox" Value="False" />
    <Setter Property="ShowHeader" Value="False" />
    <Setter Property="ShowNavigationButtons" Value="False" />
  </Style>
  <DataTemplate x:Key="Scorer.DataTemplates.List.Count">
    <Border x:Name="border" VerticalAlignment="Center" BorderBrush="{DynamicResource MyNet.Brushes.Control.Border}" BorderThickness="1" CornerRadius="17">
      <!-- Count -->
      <StackPanel Margin="11 5" Orientation="Horizontal" TextElement.FontSize="{StaticResource MyNet.Font.Size.Caption}">
        <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Text="{Binding WrappersSource.Count}" />
      </StackPanel>
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.List.Count.Selectable">
    <Button Style="{StaticResource MyNet.Styles.Button.Outlined}" my:IconAssist.Alignment="Right" my:IconAssist.Icon="{my:ToolIcon Kind=CheckAll}" my:IconAssist.Margin="{StaticResource MyNet.Margins.Default.Left}" my:ThemeAssist.CornerRadius="17" my:ToolTipAssist.Content="{my:ShortcutResource SelectAll,                                                                ShortcutKey='Ctrl+A'}" my:ToolTipAssist.PlacementMode="BottomAndAlignCentres" Command="{Binding SelectAllCommand}" FontSize="{StaticResource MyNet.Font.Size.Caption}">
      <StackPanel Orientation="Horizontal">
        <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Text="{Binding WrappersSource.Count}" />
      </StackPanel>
    </Button>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.List.Count.Selectable.DropDownButton">
    <Border x:Name="border" BorderBrush="{DynamicResource MyNet.Brushes.Control.Border}" BorderThickness="1" CornerRadius="17">
      <Border.Clip>
        <MultiBinding Converter="{x:Static my:GeometryConverter.Border}">
          <Binding ElementName="border" Path="ActualWidth" />
          <Binding ElementName="border" Path="ActualHeight" />
          <Binding ElementName="border" Path="CornerRadius" />
        </MultiBinding>
      </Border.Clip>
      <my:SplitButton Style="{StaticResource MyNet.Styles.SplitButton.Outlined}" my:IconAssist.Alignment="Right" my:IconAssist.Icon="{my:ToolIcon Kind=CheckAll}" my:IconAssist.Margin="{StaticResource MyNet.Margins.Default.Left}" BorderThickness="0" Command="{Binding SelectAllCommand}" FontSize="{StaticResource MyNet.Font.Size.Caption}" PopupPadding="0" ToolTip="{my:ShortcutResource SelectAll,                                                           ShortcutKey='Ctrl+A'}">
        <my:DropDownButton.ToggleContent>
          <StackPanel Orientation="Horizontal" TextElement.FontSize="{StaticResource MyNet.Font.Size.Title}">
            <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <TextBlock Text="{Binding WrappersSource.Count}" />
          </StackPanel>
        </my:DropDownButton.ToggleContent>
        <my:Submenu ItemsSource="{Binding PresetSelections}">
          <my:Submenu.ItemContainerStyle>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MyNet.Styles.MenuItem}">
              <Setter Property="Command" Value="{Binding Value}" />
              <Setter Property="Header" Value="{my:Translation Key}" />
            </Style>
          </my:Submenu.ItemContainerStyle>
        </my:Submenu>
      </my:SplitButton>
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Ghost.NoData.Large">
    <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Huge}">
      <my:PackIcon Width="150" Height="150" HorizontalAlignment="Center" Kind="CircleOffOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Title}" Text="{my:Resource NoData}" />
    </my:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Ghost.NoData.Medium">
    <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
      <my:PackIcon Width="80" Height="80" HorizontalAlignment="Center" Kind="CircleOffOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" Text="{Binding}" />
    </my:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Ghost.NoSelection.Medium">
    <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
      <my:PackIcon Width="80" Height="80" HorizontalAlignment="Center" Kind="SquareOffOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" Text="{Binding}" />
    </my:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="Scorer.DataTemplates.Reschedule">
    <my:SimpleStackPanel Spacing="{StaticResource MyNet.Margin.Small}">
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" HorizontalAlignment="Center" Text="{my:Resource Personalize}" />
      <my:SimpleStackPanel Orientation="Horizontal">
        <my:NumericUpDown x:Name="Value" Style="{StaticResource MyNet.Styles.NumericUpDown}" Width="65" />
        <ComboBox x:Name="Unit" Style="{StaticResource MyNet.Styles.ComboBox}" Width="90" SelectedIndex="0" SelectedValuePath="DataContext">
          <ComboBoxItem Content="{my:Resource TimeUnitMinute}" DataContext="{x:Static units:TimeUnit.Minute}" />
          <ComboBoxItem Content="{my:Resource TimeUnitHour}" DataContext="{x:Static units:TimeUnit.Hour}" />
          <ComboBoxItem Content="{my:Resource TimeUnitDay}" DataContext="{x:Static units:TimeUnit.Day}" />
          <ComboBoxItem Content="{my:Resource TimeUnitWeek}" DataContext="{x:Static units:TimeUnit.Week}" />
          <ComboBoxItem Content="{my:Resource TimeUnitMonth}" DataContext="{x:Static units:TimeUnit.Month}" />
        </ComboBox>
        <Button Style="{StaticResource MyNet.Styles.Button.Icon}" my:MenuAssist.CloseOnClick="True" Command="{Binding}" Content="{my:MediumIcon Kind=Check}" ToolTip="{my:Resource Validate}">
          <Button.CommandParameter>
            <MultiBinding Converter="{x:Static my:MultipleArrayConverter.Default}">
              <Binding ElementName="Value" Path="Value" />
              <Binding ElementName="Unit" Path="SelectedValue" />
            </MultiBinding>
          </Button.CommandParameter>
        </Button>
      </my:SimpleStackPanel>
    </my:SimpleStackPanel>
  </DataTemplate>
  <Style x:Key="Scorer.Styles.PictureControl.Player.Small" BasedOn="{StaticResource {x:Type my:PictureControl}}" TargetType="{x:Type my:PictureControl}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background}" />
    <Setter Property="Image" Value="{Binding DataContext.Photo, RelativeSource={RelativeSource Self}, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:BytesToImageConverter.Default}}" />
    <Setter Property="Width" Value="32" />
    <Setter Property="Height" Value="32" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:GeometryIcon x:Name="GenderIcon" Width="37" Height="37" Margin="0 0 0 -7" Data="{StaticResource MyNet.Geometries.Male}" Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
              <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Scorer.Styles.ListView.Ranking" BasedOn="{StaticResource MyNet.Styles.ListView}" TargetType="{x:Type ListView}">
    <Style.Resources>
      <Style BasedOn="{StaticResource MyNet.Styles.GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Height" Value="32" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="my:DataGridAssist.ColumnHeaderPadding" Value="3" />
      </Style>
    </Style.Resources>
    <Setter Property="ItemsSource" Value="{Binding Items}" />
    <Setter Property="my:ListAssist.SynchronizedList" Value="{Binding}" />
    <Setter Property="my:ListViewAssist.HeaderHeight" Value="32" />
    <Setter Property="my:ListViewAssist.ItemMinHeight" Value="37" />
    <Setter Property="my:ListBoxItemAssist.ShowSelection" Value="False" />
    <Setter Property="my:ListViewAssist.AutoResizeIsEnabled" Value="True" />
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style BasedOn="{StaticResource MyNet.Styles.ListViewItem}" TargetType="{x:Type ListViewItem}">
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ListViewItem}">
                <Border Margin="{TemplateBinding Margin}" Padding="{Binding RelativeSource={RelativeSource Self}, Path=(my:ListViewAssist.ListViewItemPadding)}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}">
                  <Grid>
                    <Border x:Name="rankBorder" Background="{Binding Label.Color, Converter={x:Static my:BrushConverter.Default}}" Opacity="{StaticResource MyNet.Opacity.Checked}" />
                    <GridViewRowPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                      <GridViewRowPresenter.Resources>
                        <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
                          <Setter Property="TextWrapping" Value="NoWrap" />
                          <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                        </Style>
                      </GridViewRowPresenter.Resources>
                    </GridViewRowPresenter>
                  </Grid>
                </Border>
                <ControlTemplate.Triggers>
                  <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Scorer.Styles.ListView.Ranking.Small" BasedOn="{StaticResource Scorer.Styles.ListView.Ranking}" TargetType="{x:Type ListView}">
    <Style.Resources>
      <Style TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource MyNet.Styles.GridViewColumnHeader}">
        <Setter Property="Height" Value="25" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="my:DataGridAssist.ColumnHeaderPadding" Value="3" />
      </Style>
    </Style.Resources>
    <Setter Property="my:ListViewAssist.ItemMinHeight" Value="22" />
  </Style>
  <Style x:Key="Scorer.Styles.MatchButton" TargetType="{x:Type ctrl:MatchButton}" BasedOn="{StaticResource MyNet.Styles.Button.Icon.Foreground}">
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="Content" Value="{Binding Item, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <Border Background="White" Opacity="0.002" />
            <!-- IsCancelled -->
            <my:PackIcon x:Name="cancel" Width="20" Height="20" Foreground="{DynamicResource MyNet.Brushes.Negative}" Kind="ProgressClose" ToolTip="{my:Resource Cancelled}" Visibility="Collapsed" />
            <!-- IsPostponed -->
            <my:PackIcon x:Name="postponed" Width="20" Height="20" Foreground="{DynamicResource MyNet.Brushes.Warning}" Kind="ProgressQuestion" ToolTip="{my:Resource Postponed}" Visibility="Collapsed" />
            <!-- None -->
            <my:PackIcon x:Name="versus" Width="20" Height="20" Kind="ProgressClock" Opacity="{StaticResource MyNet.Opacity.Overlay}" Visibility="Collapsed" />
            <!-- DateTime -->
            <Grid x:Name="date" Visibility="Collapsed">
              <TextBlock Text="{my:DisplayDateTime Date, Format=ShortDateFormat, Casing=Title}">
                <TextBlock.Visibility>
                  <MultiBinding Converter="{x:Static my:EqualityToVisibilityConverter.CollapsedIfEqual}">
                    <Binding Path="Date.Date" />
                    <Binding Path="Stage.StartDate.Date" />
                  </MultiBinding>
                </TextBlock.Visibility>
              </TextBlock>
              <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:DisplayDateTime Date, Format=t, Casing=Title}">
                <TextBlock.Visibility>
                  <MultiBinding Converter="{x:Static my:EqualityToVisibilityConverter.CollapsedIfNotEqual}">
                    <Binding Path="Date.Date" />
                    <Binding Path="Stage.StartDate.Date" />
                  </MultiBinding>
                </TextBlock.Visibility>
              </TextBlock>
            </Grid>
            <!-- Score -->
            <Grid x:Name="score" Visibility="Collapsed">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="4" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Label x:Name="homeScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Content="{Binding Home.Score}" />
              <Label x:Name="awayScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Grid.Column="2" Content="{Binding Away.Score}" />
            </Grid>
          </Grid>
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
              <Setter TargetName="score" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
              <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
              <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
              <Setter TargetName="score" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
              <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
              <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
              <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
              <Setter TargetName="score" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
              <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
              <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchButton}}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="date" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchButton}}}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="versus" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Padding" Value="3 0 3 1" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Scorer.Styles.MatchControl.Small" TargetType="{x:Type ctrl:MatchControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="Auto" SharedSizeGroup="col1" />
              <ColumnDefinition Width="Auto" SharedSizeGroup="col2" />
              <ColumnDefinition Width="Auto" SharedSizeGroup="col3" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <!-- Home -->
            <ctrl:TeamControl x:Name="home" Style="{StaticResource Scorer.Styles.TeamControl.Horizontal.Small}" Grid.Column="0" HorizontalAlignment="Right" QualificationState="{Binding Match.Home.QualificationState, RelativeSource={RelativeSource TemplatedParent}}" Team="{Binding Match.Home.Team, RelativeSource={RelativeSource TemplatedParent}}" />
            <!-- Home is withdrawn -->
            <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}" Grid.Column="2" Width="18" Height="18" HorizontalAlignment="Center" Background="{DynamicResource MyNet.Brushes.Negative}" Content="{my:Resource WithdrawAbbr,                                                      Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.Home.IsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <!-- Home won after extra time -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="2" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.Home.HasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <!-- Home won after shootouts -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="2" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.Home.HasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <!-- Score -->
            <ctrl:MatchButton x:Name="button" Grid.Column="3" HorizontalAlignment="Center" Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}" ShowTime="{Binding ShowTime, RelativeSource={RelativeSource TemplatedParent}}" />
            <!-- Away won after extra time -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="4" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.Away.HasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <!-- Away won after shootouts -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="4" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.Away.HasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <!-- Away is withdrawn -->
            <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}" Grid.Column="4" Width="18" Height="18" HorizontalAlignment="Center" Background="{DynamicResource MyNet.Brushes.Negative}" Content="{my:Resource WithdrawAbbr,                                                      Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.Away.IsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <!-- Away -->
            <ctrl:TeamControl x:Name="away" Style="{StaticResource Scorer.Styles.TeamControl.Horizontal.Small}" Grid.Column="6" HorizontalAlignment="Left" IsAway="True" QualificationState="{Binding Match.Away.QualificationState, RelativeSource={RelativeSource TemplatedParent}}" Team="{Binding Match.Away.Team, RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Match.Home.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Match.Away.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Scorer.Styles.MatchControl.Medium" TargetType="{x:Type ctrl:MatchControl}" BasedOn="{StaticResource Scorer.Styles.MatchControl.Small}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
          <Grid Height="35">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="Auto" SharedSizeGroup="col1" />
              <ColumnDefinition Width="AUto" SharedSizeGroup="col2" />
              <ColumnDefinition Width="Auto" SharedSizeGroup="col3" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <!-- Home -->
            <ctrl:TeamControl x:Name="home" Grid.Column="0" HorizontalAlignment="Right" QualificationState="{Binding Match.Home.QualificationState, RelativeSource={RelativeSource TemplatedParent}}" Team="{Binding Match.Home.Team, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
            <!-- Home is withdrawn -->
            <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}" Grid.Column="2" Width="18" Height="18" HorizontalAlignment="Center" Background="{DynamicResource MyNet.Brushes.Negative}" Content="{my:Resource WithdrawAbbr,                                                      Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.Home.IsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <!-- Home won after extra time -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="2" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.Home.HasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <!-- Home won after shootouts -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="2" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.Home.HasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <ctrl:MatchButton x:Name="button" Grid.Column="3" HorizontalAlignment="Center" Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}">
              <ctrl:MatchButton.ContentTemplate>
                <DataTemplate>
                  <Grid>
                    <Border Background="White" Opacity="0.002" />
                    <!-- IsCancelled -->
                    <my:PackIcon x:Name="cancel" Width="24" Height="24" Foreground="{DynamicResource MyNet.Brushes.Negative}" Kind="ProgressClose" ToolTip="{my:Resource Cancelled}" Visibility="Collapsed" />
                    <!-- IsPostponed -->
                    <my:PackIcon x:Name="postponed" Width="24" Height="24" Foreground="{DynamicResource MyNet.Brushes.Warning}" Kind="ProgressQuestion" ToolTip="{my:Resource Postponed}" Visibility="Collapsed" />
                    <!-- Time -->
                    <TextBlock x:Name="time" Style="{StaticResource MyNet.Styles.TextBlock.Caption}" FontFamily="{StaticResource MyNet.Font.Family.Digital}" Text="{my:DisplayDateTime Date,                                                                              Format=t,                                                                              Casing=Title}" Visibility="Collapsed" />
                    <!-- Versus -->
                    <TextBlock x:Name="versus" Style="{StaticResource MyNet.Styles.TextBlock.Caption}" Text="{my:Resource VersusAbbr}" Visibility="Collapsed" />
                    <!-- Score -->
                    <Grid x:Name="score" Visibility="Collapsed">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="4" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <Label x:Name="homeScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Content="{Binding Home.Score}" />
                      <Label x:Name="awayScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Grid.Column="2" Content="{Binding Away.Score}" />
                    </Grid>
                  </Grid>
                  <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
                      <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
                      <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                        <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchControl}}}" Value="True" />
                      </MultiDataTrigger.Conditions>
                      <Setter TargetName="time" Property="Visibility" Value="Visible" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                        <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchControl}}}" Value="False" />
                      </MultiDataTrigger.Conditions>
                      <Setter TargetName="versus" Property="Visibility" Value="Visible" />
                    </MultiDataTrigger>
                  </DataTemplate.Triggers>
                </DataTemplate>
              </ctrl:MatchButton.ContentTemplate>
            </ctrl:MatchButton>
            <!-- Away won after extra time -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="4" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.Away.HasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <!-- Away won after shootouts -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="4" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.Away.HasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <!-- Away is withdrawn -->
            <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}" Grid.Column="4" Width="18" Height="18" HorizontalAlignment="Center" Background="{DynamicResource MyNet.Brushes.Negative}" Content="{my:Resource WithdrawAbbr,                                                      Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.Away.IsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <!-- Away -->
            <ctrl:TeamControl x:Name="away" Grid.Column="6" HorizontalAlignment="Left" IsAway="True" QualificationState="{Binding Match.Away.QualificationState, RelativeSource={RelativeSource TemplatedParent}}" Team="{Binding Match.Away.Team, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Match.Home.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Match.Away.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Scorer.Styles.MatchControl.Large" TargetType="{x:Type ctrl:MatchControl}" BasedOn="{StaticResource Scorer.Styles.MatchControl.Small}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="10" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="10" />
              <ColumnDefinition Width="70" />
              <ColumnDefinition Width="10" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <!-- Date -->
            <my:SimpleStackPanel Grid.ColumnSpan="5" HorizontalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Small}">
              <TextBlock Text="{my:DisplayDateTime Match.Date, RelativeSource={RelativeSource TemplatedParent}, Format=D, Casing=Title}" Typography.Capitals="AllSmallCaps" />
            </my:SimpleStackPanel>
            <!-- Home -->
            <ctrl:TeamControl x:Name="home" Style="{StaticResource Scorer.Styles.TeamControl.Vertical.Large}" Grid.Row="2" HorizontalAlignment="Center" QualificationState="{Binding Match.Home.QualificationState, RelativeSource={RelativeSource TemplatedParent}}" Team="{Binding Match.Home.Team, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
            <ctrl:MatchButton x:Name="button" Grid.Row="2" Grid.Column="2" HorizontalAlignment="Center" Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}">
              <ctrl:MatchButton.ContentTemplate>
                <DataTemplate>
                  <Grid>
                    <Border Background="White" Opacity="0.002" />
                    <!-- IsCancelled -->
                    <my:SimpleStackPanel x:Name="cancel" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="Collapsed">
                      <my:PackIcon Width="36" Height="36" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Negative}" Kind="ProgressClose" />
                      <TextBlock Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource Cancelled}" />
                    </my:SimpleStackPanel>
                    <!-- IsPostponed -->
                    <my:SimpleStackPanel x:Name="postponed" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="Collapsed">
                      <my:PackIcon Width="36" Height="36" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Warning}" Kind="ProgressQuestion" />
                      <TextBlock Foreground="{DynamicResource MyNet.Brushes.Warning}" Text="{my:Resource Postponed}" />
                    </my:SimpleStackPanel>
                    <!-- Time -->
                    <TextBlock x:Name="time" FontFamily="{StaticResource MyNet.Font.Family.Digital}" FontSize="{StaticResource MyNet.Font.Size.Title}" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:DisplayDateTime Date,                                                                              Format=t,                                                                              Casing=Title}" Visibility="Collapsed" />
                    <!-- Versus -->
                    <TextBlock x:Name="versus" FontSize="{StaticResource MyNet.Font.Size.Title}" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Resource VersusAbbr}" Visibility="Collapsed" />
                    <!-- Score -->
                    <Grid x:Name="score" Visibility="Collapsed">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="6" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <Label x:Name="homeScore" Style="{StaticResource Scorer.Styles.Label.Score.Medium}" Content="{Binding Home.Score}" />
                      <Label x:Name="awayScore" Style="{StaticResource Scorer.Styles.Label.Score.Medium}" Grid.Column="2" Content="{Binding Away.Score}" />
                      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Row="2" Grid.ColumnSpan="3" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding AfterExtraTime, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                      <my:SimpleStackPanel Grid.Row="3" Grid.ColumnSpan="3" HorizontalAlignment="Center" Opacity="{StaticResource MyNet.Opacity.Secondary}" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="{Binding AfterShootouts, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                        <Label x:Name="homeShootoutScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Grid.Row="2" Content="{Binding Home.ShootoutScore}" />
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Text="{my:Resource ShootoutsAbbr}" ToolTip="{my:Resource Shootouts}" />
                        <Label x:Name="awayShootoutScore" Style="{StaticResource Scorer.Styles.Label.Score.Small}" Grid.Row="2" Grid.Column="2" Content="{Binding Away.ShootoutScore}" />
                      </my:SimpleStackPanel>
                      <!-- Home is withdrawn -->
                      <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}" Grid.Row="3" Grid.Column="0" Width="18" Height="18" HorizontalAlignment="Center" Background="{DynamicResource MyNet.Brushes.Negative}" Content="{my:Resource WithdrawAbbr,                                                                          Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Home.IsWithdrawn, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
                      <!-- Away is withdrawn -->
                      <Label Style="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}" Grid.Row="3" Grid.Column="2" Width="18" Height="18" HorizontalAlignment="Center" Background="{DynamicResource MyNet.Brushes.Negative}" Content="{my:Resource WithdrawAbbr,                                                                          Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Away.IsWithdrawn, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
                    </Grid>
                  </Grid>
                  <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="awayShootoutScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="homeShootoutScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="awayShootoutScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="homeShootoutScore" Property="Background" Value="{DynamicResource Scorer.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
                      <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
                      <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                        <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchControl}}}" Value="True" />
                      </MultiDataTrigger.Conditions>
                      <Setter TargetName="time" Property="Visibility" Value="Visible" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding State}" Value="{x:Static enums:MatchState.None}" />
                        <Condition Binding="{Binding ShowTime, RelativeSource={RelativeSource AncestorType={x:Type ctrl:MatchControl}}}" Value="False" />
                      </MultiDataTrigger.Conditions>
                      <Setter TargetName="versus" Property="Visibility" Value="Visible" />
                    </MultiDataTrigger>
                  </DataTemplate.Triggers>
                </DataTemplate>
              </ctrl:MatchButton.ContentTemplate>
            </ctrl:MatchButton>
            <!-- Away -->
            <ctrl:TeamControl x:Name="away" Style="{StaticResource Scorer.Styles.TeamControl.Vertical.Large}" Grid.Row="2" Grid.Column="4" HorizontalAlignment="Center" QualificationState="{Binding Match.Away.QualificationState, RelativeSource={RelativeSource TemplatedParent}}" Team="{Binding Match.Away.Team, RelativeSource={RelativeSource TemplatedParent}}" TextWrapping="Wrap" />
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Match.Home.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Match.Away.HasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>