<UserControl x:Class="MyClub.Scorer.Wpf.Views.Edition.MatchEditionGeneralView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:my="http://mynet.com/xaml/themes"
             xmlns:v="clr-namespace:MyClub.Scorer.Wpf.Views.Edition"
             xmlns:vm="clr-namespace:MyClub.Scorer.Wpf.ViewModels.Edition"
             d:DataContext="{d:DesignInstance Type=vm:MatchEditionViewModel}"
             mc:Ignorable="d">
    <UserControl.Resources>
        <my:BindingProxy x:Key="Proxy" Data="{Binding}" />

        <Style x:Key="Scorer.Styles.PackIcon.Available" TargetType="{x:Type my:PackIcon}" BasedOn="{StaticResource MyNet.Styles.PackIcon}">
            <Setter Property="Height" Value="18" />
            <Setter Property="Width" Value="18" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="Unknown">
                    <Setter Property="Visibility" Value="Collapsed" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="IsAvailable">
                    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Positive}" />
                    <Setter Property="Kind" Value="CheckCircle" />
                    <Setter Property="ToolTip" Value="{my:Resource TeamsAvailableAtDate}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="IsBusy">
                    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Negative}" />
                    <Setter Property="Kind" Value="CloseCircle" />
                    <Setter Property="ToolTip" Value="{my:Resource TeamsUnavailableAtDate}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="IsPartiallyBusy">
                    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Warning}" />
                    <Setter Property="Kind" Value="WarningCircle" />
                    <Setter Property="ToolTip" Value="{my:Resource TeamsPartiallyUnavailableAtDate}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <my:SimpleStackPanel>

        <!-- Date -->
        <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Edition}" Header="{my:MediumIcon Kind=CalendarOutline}">
            <my:SimpleStackPanel Orientation="Horizontal">
                <my:SimpleStackPanel IsEnabled="{Binding ScheduleAutomatic, Converter={x:Static my:NotBooleanConverter.Default}}" Orientation="Horizontal">
                    <my:SimpleStackPanel.Style>
                        <Style TargetType="{x:Type my:SimpleStackPanel}" BasedOn="{StaticResource MyNet.Styles.SimpleStackPanel}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding PostponedState}" Value="{x:Static vm:PostponedState.SpecifiedDate}">
                                    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Medium}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </my:SimpleStackPanel.Style>
                    <DatePicker Width="115"
                                my:HintAssist.Hint="{my:Resource Date}"
                                my:IconAssist.Opacity="{StaticResource MyNet.Opacity.Default}"
                                SelectedDate="{my:DateTime DateTime.Date}">
                        <my:IconAssist.Icon>
                            <my:PackIcon Style="{StaticResource Scorer.Styles.PackIcon.Available}" Tag="{Binding DateAvailability}" />
                        </my:IconAssist.Icon>
                    </DatePicker>
                    <my:TimePicker Width="80" my:HintAssist.Hint="{my:Resource Time}" SelectedTime="{my:Time DateTime.Time}" />
                </my:SimpleStackPanel>
                <ToggleButton Style="{StaticResource MyNet.Styles.ToggleButton.Switch}" IsChecked="{Binding ScheduleAutomatic}" IsEnabled="{Binding CanScheduleAutomatic}">
                    <TextBlock Text="{my:Resource Automatic}">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ScheduleAutomatic}" Value="False">
                                        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </ToggleButton>
            </my:SimpleStackPanel>
        </GroupBox>

        <!-- IsPostponed -->
        <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Edition}" Margin="{StaticResource MyNet.Margins.Default.Top}" Header="{my:Resource Postponed}">
            <my:SimpleStackPanel IsEnabled="{Binding ScheduleAutomatic, Converter={x:Static my:NotBooleanConverter.Default}}" Orientation="Horizontal">
                <ListBox Style="{StaticResource MyNet.Styles.ListBox.Toggle}" SelectedValue="{Binding PostponedState}" SelectedValuePath="DataContext">
                    <ListBoxItem Padding="15 7"
                                 my:ListBoxItemAssist.IsSelectedBackground="{my:BrushBinding InheritPath=(TextElement.Foreground),
                                                                                             Opacity={StaticResource MyNet.Opacity.Checked}}"
                                 Content="{my:Resource No}"
                                 DataContext="{x:Static vm:PostponedState.None}" />
                    <ListBoxItem Padding="15 7" Content="{my:Resource AtUnknownDate}" DataContext="{x:Static vm:PostponedState.UnknownDate}" />
                    <ListBoxItem Padding="15 7" Content="{my:Resource AtFollowingDate}" DataContext="{x:Static vm:PostponedState.SpecifiedDate}" />
                </ListBox>

                <!-- Postponed Date -->
                <my:SimpleStackPanel Orientation="Horizontal" Visibility="{Binding PostponedState, Converter={x:Static my:EnumToVisibilityConverter.HiddenIfNotAny}, ConverterParameter={x:Static vm:PostponedState.SpecifiedDate}}">
                    <DatePicker Width="110"
                                my:HintAssist.Hint="{my:Resource PostponedDate}"
                                my:HintAssist.IsFloating="False"
                                my:IconAssist.Opacity="{StaticResource MyNet.Opacity.Default}"
                                SelectedDate="{my:DateTime PostponedDateTime.Date}">
                        <my:IconAssist.Icon>
                            <my:PackIcon Style="{StaticResource Scorer.Styles.PackIcon.Available}" Tag="{Binding PostponedDateAvailability}" />
                        </my:IconAssist.Icon>
                    </DatePicker>
                    <my:TimePicker Width="80"
                                   my:HintAssist.Hint="{my:Resource Time}"
                                   my:HintAssist.IsFloating="False"
                                   SelectedTime="{my:Time PostponedDateTime.Time}" />
                </my:SimpleStackPanel>
            </my:SimpleStackPanel>
        </GroupBox>

        <!-- Stadium -->
        <StackPanel>
            <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Edition}" Header="{my:MediumIcon Kind=Stadium}">
                <my:SimpleStackPanel Orientation="Horizontal">
                    <my:SimpleStackPanel IsEnabled="{Binding ScheduleStadiumAutomatic, Converter={x:Static my:NotBooleanConverter.Default}}">
                        <ComboBox Width="300"
                                  my:HintAssist.Hint="{my:Resource Stadium}"
                                  my:ItemsControlAssist.SortingProperty="Stadium.Address.City"
                                  my:TextFieldAssist.HasClearButton="True"
                                  ItemsSource="{Binding StadiumSelection.Items}"
                                  SelectedItem="{Binding StadiumSelection.SelectedItem}" />
                        <CheckBox Content="{my:Resource NeutralVenue}" IsChecked="{Binding NeutralVenue}" />
                    </my:SimpleStackPanel>
                    <ToggleButton Style="{StaticResource MyNet.Styles.ToggleButton.Switch}"
                                  Margin="{StaticResource MyNet.Margins.Medium.Top}"
                                  VerticalAlignment="Top"
                                  IsChecked="{Binding ScheduleStadiumAutomatic}"
                                  IsEnabled="{Binding CanScheduleStadiumAutomatic}">
                        <TextBlock Text="{my:Resource Automatic}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MyNet.Styles.TextBlock}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ScheduleStadiumAutomatic}" Value="False">
                                            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </ToggleButton>
                </my:SimpleStackPanel>
            </GroupBox>
        </StackPanel>

        <!-- State -->
        <ListBox Style="{StaticResource MyNet.Styles.ListBox.Toggle}"
                 Margin="{StaticResource MyNet.Margins.Large.Top}"
                 HorizontalAlignment="Center"
                 SelectedValue="{Binding State}"
                 SelectedValuePath="DataContext">
            <ListBox.IsEnabled>
                <Binding Converter="{x:Static my:EnumToBooleanConverter.Any}" Path="State">
                    <Binding.ConverterParameter>
                        <x:Array Type="{x:Type enums:MatchState}">
                            <x:Static Member="enums:MatchState.None" />
                            <x:Static Member="enums:MatchState.Played" />
                            <x:Static Member="enums:MatchState.InProgress" />
                            <x:Static Member="enums:MatchState.Suspended" />
                            <x:Static Member="enums:MatchState.Cancelled" />
                        </x:Array>
                    </Binding.ConverterParameter>
                </Binding>
            </ListBox.IsEnabled>
            <ListBoxItem Width="125"
                         my:IconAssist.Icon="{my:MediumIcon Kind=ProgressClock}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource MyNet.Brushes.None}"
                         my:ListBoxItemAssist.IsSelectedForeground="{my:BrushBinding Path=(my:ListBoxItemAssist.IsSelectedBackground),
                                                                                     RelativeSource={RelativeSource Self},
                                                                                     Contrast=True}"
                         Content="{my:Resource MatchStateNone}"
                         DataContext="{x:Static enums:MatchState.None}" />
            <ListBoxItem Width="125"
                         my:IconAssist.Icon="{my:MediumIcon Kind=ProgressHelper}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource MyNet.Brushes.Information}"
                         my:ListBoxItemAssist.IsSelectedForeground="{my:BrushBinding Path=(my:ListBoxItemAssist.IsSelectedBackground),
                                                                                     RelativeSource={RelativeSource Self},
                                                                                     Contrast=True}"
                         Content="{my:Resource MatchStateInProgress}"
                         DataContext="{x:Static enums:MatchState.InProgress}" />
            <ListBoxItem Width="125"
                         my:IconAssist.Icon="{my:MediumIcon Kind=ProgressAlert}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource Scorer.Brushes.Match.State.Suspended}"
                         my:ListBoxItemAssist.IsSelectedForeground="{my:BrushBinding Path=(my:ListBoxItemAssist.IsSelectedBackground),
                                                                                     RelativeSource={RelativeSource Self},
                                                                                     Contrast=True}"
                         Content="{my:Resource MatchStateSuspended}"
                         DataContext="{x:Static enums:MatchState.Suspended}" />
            <ListBoxItem Width="125"
                         my:IconAssist.Icon="{my:MediumIcon Kind=ProgressCheck}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource MyNet.Brushes.Positive}"
                         my:ListBoxItemAssist.IsSelectedForeground="{my:BrushBinding Path=(my:ListBoxItemAssist.IsSelectedBackground),
                                                                                     RelativeSource={RelativeSource Self},
                                                                                     Contrast=True}"
                         Content="{my:Resource MatchStatePlayed}"
                         DataContext="{x:Static enums:MatchState.Played}" />
            <ListBoxItem Width="125"
                         my:IconAssist.Icon="{my:MediumIcon Kind=ProgressClose}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource MyNet.Brushes.Negative}"
                         my:ListBoxItemAssist.IsSelectedForeground="{my:BrushBinding Path=(my:ListBoxItemAssist.IsSelectedBackground),
                                                                                     RelativeSource={RelativeSource Self},
                                                                                     Contrast=True}"
                         Content="{my:Resource MatchStateCancelled}"
                         DataContext="{x:Static enums:MatchState.Cancelled}" />
        </ListBox>

        <Grid Margin="{StaticResource MyNet.Margins.Medium.Top}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="10" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="20" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <!-- Team 1 -->
            <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}"
                               Width="100"
                               Height="100"
                               DataContext="{Binding HomeTeam}"
                               Validation.ErrorTemplate="{x:Null}" />

            <!-- Withdraw -->
            <my:SimpleStackPanel Grid.Row="2" HorizontalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Default}">
                <my:SimpleStackPanel.IsEnabled>
                    <Binding Converter="{x:Static my:EnumToBooleanConverter.Any}" Path="State">
                        <Binding.ConverterParameter>
                            <x:Array Type="{x:Type enums:MatchState}">
                                <x:Static Member="enums:MatchState.None" />
                                <x:Static Member="enums:MatchState.Played" />
                                <x:Static Member="enums:MatchState.InProgress" />
                                <x:Static Member="enums:MatchState.Suspended" />
                            </x:Array>
                        </Binding.ConverterParameter>
                    </Binding>
                </my:SimpleStackPanel.IsEnabled>
                <ToggleButton Style="{StaticResource MyNet.Styles.ToggleButton.Filled}"
                              HorizontalAlignment="Center"
                              my:IconAssist.Icon="{my:Icon Kind=Close}"
                              my:ThemeAssist.IsCheckedBackground="{DynamicResource MyNet.Brushes.Negative}"
                              my:ThemeAssist.IsCheckedBorderBrush="{DynamicResource MyNet.Brushes.Negative}"
                              my:ThemeAssist.IsCheckedForeground="{DynamicResource MyNet.Brushes.White}"
                              Content="{my:Resource Withdraw}"
                              IsChecked="{Binding HomeIsWithdrawn}" />
            </my:SimpleStackPanel>

            <Grid Grid.Column="2" VerticalAlignment="Center">
                <Grid.IsEnabled>
                    <Binding Converter="{x:Static my:EnumToBooleanConverter.Any}" Path="State">
                        <Binding.ConverterParameter>
                            <x:Array Type="{x:Type enums:MatchState}">
                                <x:Static Member="enums:MatchState.None" />
                                <x:Static Member="enums:MatchState.Played" />
                                <x:Static Member="enums:MatchState.InProgress" />
                                <x:Static Member="enums:MatchState.Suspended" />
                            </x:Array>
                        </Binding.ConverterParameter>
                    </Binding>
                </Grid.IsEnabled>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <!-- Score -->
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <my:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Filled}"
                                      Width="70"
                                      my:NumericUpDownAssist.AcceptableValue="{Binding HomeScore}"
                                      ButtonsAlignment="Opposite"
                                      FontSize="{StaticResource MyNet.Font.Size.Title}"
                                      TextAlignment="Center" />
                    <TextBlock Grid.Column="1" HorizontalAlignment="Center" Text="-" />
                    <my:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Filled}"
                                      Grid.Column="2"
                                      Width="70"
                                      my:NumericUpDownAssist.AcceptableValue="{Binding AwayScore}"
                                      ButtonsAlignment="Opposite"
                                      FontSize="{StaticResource MyNet.Font.Size.Title}"
                                      TextAlignment="Center" />
                </Grid>

                <!-- ExraTime -->
                <ToggleButton Grid.Row="1"
                              Margin="{StaticResource MyNet.Margins.Medium.Top}"
                              HorizontalAlignment="Center"
                              my:ToggleButtonAssist.OnContent="{my:Resource AfterExtraTimeAbbr,
                                                                            Casing=Title}"
                              IsChecked="{Binding AfterExtraTime}"
                              ToolTip="{my:Resource AfterExtraTime}"
                              Visibility="{Binding MatchFormat.ExtraTimeIsEnabled, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                    <TextBlock Opacity="{StaticResource MyNet.Opacity.Disabled}" Text="{my:Resource AfterExtraTimeAbbr, Casing=Title}" />
                    <ToggleButton.IsEnabled>
                        <MultiBinding Converter="{x:Static my:MultipleBooleanConverter.And}">
                            <Binding Converter="{x:Static my:NotBooleanConverter.Default}" Path="HasDraw" />
                            <Binding Converter="{x:Static my:NotBooleanConverter.Default}" Path="HomeIsWithdrawn" />
                            <Binding Converter="{x:Static my:NotBooleanConverter.Default}" Path="AwayIsWithdrawn" />
                        </MultiBinding>
                    </ToggleButton.IsEnabled>
                </ToggleButton>

                <!-- Shootout -->
                <Grid Grid.Row="2" Margin="{StaticResource MyNet.Margins.Medium.Top}" Visibility="{Binding MatchFormat.ShootoutsIsEnabled, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                    <Grid.IsEnabled>
                        <MultiBinding Converter="{x:Static my:MultipleBooleanConverter.And}">
                            <Binding Path="HasDraw" />
                            <Binding Converter="{x:Static my:NotBooleanConverter.Default}" Path="HomeIsWithdrawn" />
                            <Binding Converter="{x:Static my:NotBooleanConverter.Default}" Path="AwayIsWithdrawn" />
                        </MultiBinding>
                    </Grid.IsEnabled>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <my:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Filled}"
                                      Width="60"
                                      HorizontalAlignment="Center"
                                      my:NumericUpDownAssist.AcceptableValue="{Binding HomeShootoutScore}"
                                      ButtonsAlignment="Opposite"
                                      TextAlignment="Center" />
                    <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                               Grid.Column="1"
                               HorizontalAlignment="Center"
                               Text="{my:Resource ShootoutsAbbr}" />
                    <my:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Filled}"
                                      Grid.Column="2"
                                      Width="60"
                                      HorizontalAlignment="Center"
                                      my:NumericUpDownAssist.AcceptableValue="{Binding AwayShootoutScore}"
                                      ButtonsAlignment="Opposite"
                                      TextAlignment="Center" />
                </Grid>
            </Grid>

            <!-- Team 2 -->
            <my:PictureControl Style="{StaticResource Scorer.Styles.PictureControl.Team}"
                               Grid.Column="4"
                               Width="100"
                               Height="100"
                               DataContext="{Binding AwayTeam}"
                               Validation.ErrorTemplate="{x:Null}" />

            <!-- Withdraw -->
            <my:SimpleStackPanel Grid.Row="2"
                                 Grid.Column="4"
                                 HorizontalAlignment="Center"
                                 Spacing="{StaticResource MyNet.Margin.Default}">
                <my:SimpleStackPanel.IsEnabled>
                    <Binding Converter="{x:Static my:EnumToBooleanConverter.Any}" Path="State">
                        <Binding.ConverterParameter>
                            <x:Array Type="{x:Type enums:MatchState}">
                                <x:Static Member="enums:MatchState.None" />
                                <x:Static Member="enums:MatchState.Played" />
                                <x:Static Member="enums:MatchState.InProgress" />
                                <x:Static Member="enums:MatchState.Suspended" />
                            </x:Array>
                        </Binding.ConverterParameter>
                    </Binding>
                </my:SimpleStackPanel.IsEnabled>
                <ToggleButton Style="{StaticResource MyNet.Styles.ToggleButton.Filled}"
                              HorizontalAlignment="Center"
                              my:IconAssist.Icon="{my:Icon Kind=Close}"
                              my:ThemeAssist.IsCheckedBackground="{DynamicResource MyNet.Brushes.Negative}"
                              my:ThemeAssist.IsCheckedBorderBrush="{DynamicResource MyNet.Brushes.Negative}"
                              my:ThemeAssist.IsCheckedForeground="{DynamicResource MyNet.Brushes.White}"
                              Content="{my:Resource Withdraw}"
                              IsChecked="{Binding AwayIsWithdrawn}" />
            </my:SimpleStackPanel>
        </Grid>

    </my:SimpleStackPanel>

</UserControl>
