<my:ContentDialog x:Class="MyClub.Scorer.Wpf.Views.Edition.MatchdayEditionView"
                  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                  xmlns:contracts="clr-namespace:MyNet.UI.ViewModels;assembly=MyNet.UI"
                  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                  xmlns:my="http://mynet.com/xaml/themes"
                  xmlns:v="clr-namespace:MyClub.Scorer.Wpf.Views.Edition"
                  xmlns:vm="clr-namespace:MyClub.Scorer.Wpf.ViewModels.Edition"
                  Style="{StaticResource MyNet.Styles.ContentDialog}"
                  Width="750"
                  Height="600"
                  d:DataContext="{d:DesignInstance Type=vm:MatchdayEditionViewModel}"
                  BusyService="{Binding BusyService, Mode=OneWay}"
                  HeaderHeight="70"
                  mc:Ignorable="d">
    <my:ContentDialog.Resources>
        <my:BindingProxy x:Key="Proxy" Data="{Binding}" />
    </my:ContentDialog.Resources>

    <my:InputAssist.InputBindings>
        <InputBindingCollection>
            <KeyBinding Key="F5" Command="{Binding Data.RefreshCommand, Source={StaticResource Proxy}}" />
            <KeyBinding Modifiers="Ctrl" Key="S" Command="{Binding Data.SaveAndCloseAsyncCommand, Source={StaticResource Proxy}}" />
            <KeyBinding Key="Esc" Command="{Binding Data.CancelCommand, Source={StaticResource Proxy}}" />
        </InputBindingCollection>
    </my:InputAssist.InputBindings>

    <my:ContentDialog.Footer>
        <my:SimpleStackPanel HorizontalAlignment="Right" Orientation="Horizontal">
            <Button Style="{StaticResource MyNet.Styles.Button.Refresh}" HorizontalAlignment="Right" Command="{Binding RefreshCommand}" />
            <Button Style="{StaticResource MyNet.Styles.Button.Cancel}" HorizontalAlignment="Right" Command="{Binding CancelCommand}" />
            <Button Style="{StaticResource MyNet.Styles.Button.Validate}" HorizontalAlignment="Right" Command="{Binding SaveAndCloseAsyncCommand}" />
        </my:SimpleStackPanel>
    </my:ContentDialog.Footer>

    <my:ContentDialog.Header>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!--  Name  -->
            <TextBox Grid.Column="0"
                     Width="300"
                     my:FocusAssist.IsDefault="True"
                     my:HintAssist.FloatingScale="0.4"
                     my:HintAssist.Hint="{my:Resource Name}"
                     my:HintAssist.IsFloating="True"
                     FontSize="{StaticResource MyNet.Font.Size.Title}"
                     Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" />

            <!--  Info  -->
            <ContentControl Grid.Column="3"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Content="{StaticResource MyNet.PackIcon.ItemTraking}"
                            Focusable="False" />
        </Grid>
    </my:ContentDialog.Header>

    <DockPanel>
        <my:SimpleStackPanel DockPanel.Dock="Top">

            <!--  Short name  -->
            <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Edition}" Header="{my:MediumIcon Kind=Information}">
                <TextBox Width="{StaticResource MyNet.Widths.Control.Medium}" my:HintAssist.Hint="{my:Resource ShortName}" Text="{Binding ShortName, UpdateSourceTrigger=PropertyChanged}" />
            </GroupBox>

            <!--  Date  -->
            <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Edition}" Header="{my:MediumIcon Kind=CalendarOutline}">
                <my:SimpleStackPanel Orientation="Horizontal">
                    <my:SimpleStackPanel.Style>
                        <Style BasedOn="{StaticResource MyNet.Styles.SimpleStackPanel}" TargetType="{x:Type my:SimpleStackPanel}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding PostponedState}" Value="{x:Static vm:PostponedState.SpecifiedDate}">
                                    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Medium}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </my:SimpleStackPanel.Style>
                    <DatePicker my:HintAssist.Hint="{my:Resource Date}" SelectedDate="{Binding Date, UpdateSourceTrigger=PropertyChanged}" />
                    <my:TimePicker my:HintAssist.Hint="{my:Resource Time}" SelectedTime="{Binding Time, Converter={x:Static my:TimeSpanToDateTimeConverter.Default}, UpdateSourceTrigger=PropertyChanged}" />
                </my:SimpleStackPanel>
            </GroupBox>

            <!--  IsPostponed  -->
            <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Edition}" Margin="{StaticResource MyNet.Margins.Default.Top}" Header="{my:Resource Postponed}">
                <my:SimpleStackPanel Orientation="Horizontal">
                    <ListBox Style="{StaticResource MyNet.Styles.ListBox.Toggle}" SelectedValue="{Binding PostponedState}" SelectedValuePath="DataContext">
                        <ListBoxItem Padding="15 7"
                                     my:ListBoxItemAssist.IsSelectedBackground="{my:BrushBinding InheritPath=(TextElement.Foreground),
                                                                                                 Opacity={StaticResource MyNet.Opacity.Checked}}"
                                     Content="{my:Resource No}"
                                     DataContext="{x:Static vm:PostponedState.None}" />
                        <ListBoxItem Padding="15 7" Content="{my:Resource AtUnknownDate}" DataContext="{x:Static vm:PostponedState.UnknownDate}" />
                        <ListBoxItem Padding="15 7" Content="{my:Resource AtFollowingDate}" DataContext="{x:Static vm:PostponedState.SpecifiedDate}" />
                    </ListBox>

                    <!--  Postponed Date  -->
                    <my:SimpleStackPanel Orientation="Horizontal" Visibility="{Binding PostponedState, Converter={x:Static my:EnumToVisibilityConverter.HiddenIfNotAny}, ConverterParameter={x:Static vm:PostponedState.SpecifiedDate}}">
                        <DatePicker my:HintAssist.Hint="{my:Resource PostponedDate}" my:HintAssist.IsFloating="False" SelectedDate="{my:NullableBinding PostponedDate, UpdateSourceTrigger=PropertyChanged}" />
                        <my:TimePicker my:HintAssist.Hint="{my:Resource Time}" my:HintAssist.IsFloating="False" SelectedTime="{my:NullableBinding PostponedTime, Converter={x:Static my:TimeSpanToDateTimeConverter.Default}, UpdateSourceTrigger=PropertyChanged}" />
                    </my:SimpleStackPanel>
                </my:SimpleStackPanel>
            </GroupBox>

        </my:SimpleStackPanel>

        <!--  Matches  -->
        <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Bordered}" Margin="{StaticResource MyNet.Margins.Medium.Top}">
            <my:GroupBoxAssist.MoreContent>
                <my:SimpleStackPanel Margin="{StaticResource MyNet.Margins.Default.Horizontal}" VerticalAlignment="Center" Orientation="Horizontal">
                    <Button Command="{Binding Data.InvertTeamsCommand, Source={StaticResource Proxy}}" Content="{my:MediumIcon Kind=SwapHorizontal}" ToolTip="{my:Resource InvertTeams}" />
                    <Button Command="{Binding Data.AddMatchCommand, Source={StaticResource Proxy}}" Content="{my:MediumIcon Kind=Plus}" ToolTip="{my:Resource Add}" />
                </my:SimpleStackPanel>
            </my:GroupBoxAssist.MoreContent>
            <GroupBox.Header>
                <Grid>
                    <my:DropDownButton Style="{StaticResource MyNet.Styles.DropDownButton.Text}"
                                       my:IconAssist.Icon="{my:ToolIcon Kind=ContentDuplicate}"
                                       IsEnabled="{Binding Matchdays.Count, Converter={x:Static my:CountToBooleanConverter.Any}}"
                                       PopupPadding="0"
                                       Visibility="{Binding Mode, Converter={x:Static my:EnumToVisibilityConverter.HiddenIfNotAny}, ConverterParameter={x:Static contracts:ScreenMode.Creation}}">
                        <my:DropDownButton.ToggleContent>
                            <Grid>
                                <my:SimpleStackPanel VerticalAlignment="Center"
                                                     Orientation="Horizontal"
                                                     Spacing="{StaticResource MyNet.Margin.Default}"
                                                     Visibility="{Binding DuplicatedMatchday, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}}">
                                    <TextBlock Text="{my:Resource DuplicationOf}" />
                                    <TextBlock Text="{Binding DuplicatedMatchday.Name}" />
                                    <Button Style="{StaticResource MyNet.Styles.Button.Icon.Tool}" Command="{Binding Data.ClearDuplicatedMatchdayCommand, Source={StaticResource Proxy}}" Content="{my:ToolIcon Kind=Close}" />
                                </my:SimpleStackPanel>
                                <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Resource Duplicate}" Visibility="{Binding DuplicatedMatchday, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
                            </Grid>
                        </my:DropDownButton.ToggleContent>
                        <my:Submenu MaxHeight="450" ItemsSource="{Binding Matchdays}">
                            <my:Submenu.ItemContainerStyle>
                                <Style BasedOn="{StaticResource MyNet.Styles.MenuItem}" TargetType="{x:Type MenuItem}">
                                    <Setter Property="Command" Value="{Binding Data.DuplicateMatchdayCommand, Source={StaticResource Proxy}}" />
                                    <Setter Property="CommandParameter" Value="{Binding}" />
                                </Style>
                            </my:Submenu.ItemContainerStyle>
                        </my:Submenu>
                    </my:DropDownButton>
                    <my:SimpleStackPanel Margin="{StaticResource MyNet.Margins.Default.Vertical}" Orientation="Horizontal" Visibility="{Binding Mode, Converter={x:Static my:EnumToVisibilityConverter.HiddenIfNotAny}, ConverterParameter={x:Static contracts:ScreenMode.Edition}}">
                        <my:PackIcon Width="20"
                                     Height="20"
                                     Kind="Soccer"
                                     Opacity="{StaticResource MyNet.Opacity.Secondary}" />
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}" Opacity="{StaticResource MyNet.Opacity.Default}" Text="{my:Resource Matches}" />
                    </my:SimpleStackPanel>
                </Grid>
            </GroupBox.Header>
            <ItemsControl AlternationCount="2" ItemsSource="{Binding Matches}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Border x:Name="border" Padding="2 5">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="90" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="60" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="130" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="130" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="10" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <DatePicker HorizontalAlignment="Stretch"
                                            my:HintAssist.Hint="{my:Resource Date}"
                                            my:TextFieldAssist.IsReadOnly="{Binding IsReadOnly}"
                                            IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                                            SelectedDate="{Binding Date}" />
                                <my:TimePicker Grid.Column="2"
                                               HorizontalAlignment="Stretch"
                                               my:HintAssist.Hint="{my:Resource Time}"
                                               my:TextFieldAssist.IsReadOnly="{Binding IsReadOnly}"
                                               IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                                               SelectedTime="{Binding Time, Converter={x:Static my:TimeSpanToDateTimeConverter.Default}}" />
                                <ComboBox Grid.Column="4"
                                          HorizontalAlignment="Stretch"
                                          my:ComboBoxAssist.ShowDropDownPopup="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                                          my:HintAssist.Hint="{my:Resource HomeTeam}"
                                          IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                                          IsReadOnly="{Binding IsReadOnly}"
                                          ItemTemplate="{StaticResource Scorer.DataTemplates.Team.ComboBox}"
                                          ItemsSource="{Binding AvailableTeams}"
                                          my:ItemsControlAssist.SortingProperty="Name"
                                          SelectedItem="{Binding HomeTeam}" />
                                <ComboBox x:Name="comboBox"
                                          Grid.Column="6"
                                          HorizontalAlignment="Stretch"
                                          my:ComboBoxAssist.ShowDropDownPopup="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                                          my:HintAssist.Hint="{my:Resource AwayTeam}"
                                          IsEnabled="{Binding IsReadOnly, Converter={x:Static my:NotBooleanConverter.Default}}"
                                          IsReadOnly="{Binding IsReadOnly}"
                                          my:ItemsControlAssist.SortingProperty="Name"
                                          ItemTemplate="{StaticResource Scorer.DataTemplates.Team.ComboBox}"
                                          ItemsSource="{Binding AvailableTeams}"
                                          SelectedItem="{Binding AwayTeam}" />
                                <v:StadiumSelectionView Grid.Column="8"
                                                        HorizontalAlignment="Stretch"
                                                        my:TextFieldAssist.IsReadOnly="{Binding IsReadOnly, ElementName=comboBox}"
                                                        DataContext="{Binding StadiumSelection}"
                                                        IsEnabled="{Binding IsReadOnly, ElementName=comboBox, Converter={x:Static my:NotBooleanConverter.Default}}" />
                                <Button Style="{StaticResource MyNet.Styles.Button.Icon.Tool}"
                                        Grid.Column="10"
                                        Command="{Binding Data.RemoveMatchCommand, Source={StaticResource Proxy}}"
                                        CommandParameter="{Binding}"
                                        Content="{my:ToolIcon Kind=Trash}"
                                        ToolTip="{my:Resource Remove}"
                                        Visibility="{Binding IsDeleting, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfTrue}}" />
                                <Button Style="{StaticResource MyNet.Styles.Button.Icon.Tool}"
                                        Grid.Column="10"
                                        Command="{Binding Data.CancelRemoveMatchCommand, Source={StaticResource Proxy}}"
                                        CommandParameter="{Binding}"
                                        Content="{my:ToolIcon Kind=Undo}"
                                        ToolTip="{my:Resource Cancel}"
                                        Visibility="{Binding IsDeleting, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                                <Border x:Name="line"
                                        Grid.ColumnSpan="9"
                                        Height="1"
                                        Background="{DynamicResource MyNet.Brushes.Control.Border}"
                                        Visibility="Collapsed" />
                            </Grid>
                        </Border>

                        <DataTemplate.Triggers>
                            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                <Setter TargetName="border" Property="Background" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity=0.03}" />
                            </Trigger>
                            <DataTrigger Binding="{Binding IsDeleting}" Value="True">
                                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Medium}" />
                                <Setter TargetName="line" Property="Visibility" Value="Visible" />
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </GroupBox>
    </DockPanel>

</my:ContentDialog>
