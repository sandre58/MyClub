<UserControl x:Class="MyClub.Scorer.Wpf.Views.SchedulePage.MatchesPlanningDayView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:contracts="clr-namespace:MyNet.UI.ViewModels;assembly=MyNet.UI"
             xmlns:ctrl="clr-namespace:MyClub.Scorer.Wpf.Controls"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:my="http://mynet.com/xaml/themes"
             xmlns:v="clr-namespace:MyClub.Scorer.Wpf.Views.SchedulePage"
             xmlns:vm="clr-namespace:MyClub.Scorer.Wpf.ViewModels.SchedulePage"
             d:DataContext="{d:DesignInstance Type=vm:MatchesPlanningViewModel}"
             mc:Ignorable="d">
    <UserControl.Resources>
        <my:BindingProxy x:Key="Proxy" Data="{Binding}" />

        <DataTemplate x:Key="Scorer.DataTemplates.MatchDetails">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="5" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="5" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="5" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <!-- Time -->
                <StackPanel Orientation="Horizontal">
                    <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:DisplayDateTime StartDate, Format=t}" />
                    <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text=" - " />
                    <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:DisplayDateTime EndDate, Format=t}" />
                </StackPanel>

                <!-- Stage -->
                <my:SimpleStackPanel Grid.Row="2"
                                     VerticalAlignment="Center"
                                     Orientation="Horizontal"
                                     Spacing="{StaticResource MyNet.Margin.Default}">
                    <TextBlock Text="{Binding Item.Stage.Name}" />
                    <StackPanel Orientation="Horizontal" Visibility="{Binding Item.Parent.ShowName, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                        <TextBlock Opacity="{StaticResource MyNet.Opacity.Overlay}" Text="(" />
                        <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{Binding Item.Parent.Name}" />
                        <TextBlock Opacity="{StaticResource MyNet.Opacity.Overlay}" Text=")" />
                    </StackPanel>
                    <TextBlock Opacity="{StaticResource MyNet.Opacity.Overlay}" Text="-" />
                    <TextBlock Opacity="{StaticResource MyNet.Opacity.Overlay}" Text="{Binding Item.Fixture.DisplayName}" Visibility="{Binding Item.Fixture, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}}" />
                    <TextBlock Opacity="{StaticResource MyNet.Opacity.Overlay}" Text="{Binding Item.DisplayName}" Visibility="{Binding Item.Fixture, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
                </my:SimpleStackPanel>

                <!-- Match -->
                <ctrl:MatchControl Style="{StaticResource Scorer.Styles.MatchControl.Small}"
                                   Grid.Row="4"
                                   HorizontalAlignment="Left"
                                   Match="{Binding Item}"
                                   ShowTime="False" />

                <!-- Stadium -->
                <DockPanel Grid.Row="6" Visibility="{Binding Item.Stadium, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}}">
                    <my:PackIcon Width="12"
                                 Height="12"
                                 Margin="{StaticResource MyNet.Margins.Default.Right}"
                                 VerticalAlignment="Top"
                                 Kind="Stadium"
                                 Opacity="{StaticResource MyNet.Opacity.Secondary}" />
                    <TextBlock FontSize="{StaticResource MyNet.Font.Size.Secondary}"
                               FontStyle="Italic"
                               Opacity="{StaticResource MyNet.Opacity.Secondary}"
                               Text="{Binding Item.Stadium.Name}"
                               TextWrapping="Wrap" />
                </DockPanel>
            </Grid>
        </DataTemplate>
    </UserControl.Resources>

    <DockPanel Margin="{StaticResource MyNet.Margins.Medium.Left}">

        <!-- Header -->
        <my:SimpleStackPanel Margin="{StaticResource MyNet.Margins.Default.Bottom}"
                             HorizontalAlignment="Center"
                             VerticalAlignment="Center"
                             DockPanel.Dock="Top"
                             Orientation="Horizontal">

            <!-- Display Details -->
            <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Resource Show}" Visibility="{Binding Mode, Converter={x:Static my:EnumToVisibilityConverter.CollapsedIfNotAny}, ConverterParameter={x:Static contracts:ScreenMode.Read}}" />
            <ListBox x:Name="display"
                     Style="{StaticResource MyNet.Styles.ListBox.Toggle}"
                     VerticalAlignment="Stretch"
                     SelectedIndex="0"
                     Visibility="{Binding Mode, Converter={x:Static my:EnumToVisibilityConverter.CollapsedIfNotAny}, ConverterParameter={x:Static contracts:ScreenMode.Read}}">
                <ListBoxItem Width="80" Content="{my:Resource Teams}" />
                <ListBoxItem Width="80" Content="{my:Resource Stages}" />
            </ListBox>

            <!-- Period -->
            <DatePicker Style="{StaticResource MyNet.Styles.DatePicker.DropDown.Filled}"
                        Width="300"
                        Height="28"
                        VerticalAlignment="Stretch"
                        my:TextFieldAssist.Format="D"
                        SelectedDate="{my:DateTime Display.Mode.DisplayDate}" />

            <!-- Display Options -->
            <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Resource Display}" />
            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox.Filled}"
                      Width="{StaticResource MyNet.Widths.Control.Medium}"
                      VerticalAlignment="Stretch"
                      ItemsSource="{my:IntegerRange Start=1,
                                                    End=7}"
                      SelectedItem="{Binding Display.Mode.DisplayDaysCount}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{my:Translation Pluralize=True, Format=TimeSpanDay}" />
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
            <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Resource Of, Casing=LowerCase}" />
            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox.Hour.Filled}"
                      Width="110"
                      VerticalAlignment="Stretch"
                      ItemsSource="{my:HourRange Start=0,
                                                 End=22}"
                      SelectedItem="{Binding Display.Mode.DisplayTimeStart}" />
            <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Resource To, Casing=LowerCase}" />
            <ComboBox Style="{StaticResource MyNet.Styles.ComboBox.Hour.Filled}"
                      Width="110"
                      VerticalAlignment="Stretch"
                      ItemsSource="{my:HourRange Start=1,
                                                 End=23}"
                      SelectedItem="{Binding Display.Mode.DisplayTimeEnd}" />
        </my:SimpleStackPanel>

        <!-- Matches -->
        <ContentControl Grid.RowSpan="4" Grid.Column="2">
            <ContentControl.Style>
                <Style TargetType="{x:Type ContentControl}" BasedOn="{StaticResource MyNet.Styles.ContentControl}">
                    <Setter Property="Content" Value="{Binding}" />
                    <Setter Property="ContentTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <my:CalendarHoursByDay my:HeaderAssist.Background="Transparent"
                                                       my:HeaderAssist.Height="50"
                                                       my:HeaderAssist.Width="45"
                                                       Appointments="{Binding Wrappers}"
                                                       AppointmentsMargin="0"
                                                       AppointmentsSpacing="0"
                                                       BorderThickness="0"
                                                       DatesSelectionMode="None"
                                                       DisplayDate="{my:DateTime Display.Mode.DisplayDate}"
                                                       DisplayDaysCount="{Binding Display.Mode.DisplayDaysCount}"
                                                       DisplayTimeEnd="{Binding Display.Mode.DisplayTimeEnd}"
                                                       DisplayTimeStart="{Binding Display.Mode.DisplayTimeStart}"
                                                       ScrollViewer.VerticalScrollBarVisibility="Auto"
                                                       SelectionMode="Extended"
                                                       ShowHeader="False"
                                                       UseAccurateItemPosition="True">
                                    <my:CalendarHoursByDay.ItemContainerStyle>
                                        <Style TargetType="{x:Type my:CalendarAppointment}" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.HoursByDay}">
                                            <Setter Property="ContentTemplate">
                                                <Setter.Value>
                                                    <DataTemplate>
                                                        <Grid>
                                                            <Grid.ColumnDefinitions>
                                                                <ColumnDefinition Width="*" />
                                                                <ColumnDefinition Width="Auto" />
                                                            </Grid.ColumnDefinitions>
                                                            <Grid.RowDefinitions>
                                                                <RowDefinition Height="*" />
                                                                <RowDefinition Height="Auto" />
                                                            </Grid.RowDefinitions>

                                                            <ContentControl x:Name="content" Content="{Binding Item}">

                                                                <!-- Stage -->
                                                                <ContentControl.ContentTemplate>
                                                                    <DataTemplate>
                                                                        <TextBlock VerticalAlignment="Top" TextWrapping="Wrap">
                                                                            <Run x:Name="stage" Text="{Binding Stage.Name, Mode=OneWay}" />
                                                                            <Run x:Name="parenthesisStart" Text="(">
                                                                                <Run.Foreground>
                                                                                    <SolidColorBrush Opacity="{StaticResource MyNet.Opacity.Secondary}" Color="{DynamicResource MyNet.Colors.Application.Foreground}" />
                                                                                </Run.Foreground>
                                                                            </Run><Run x:Name="parent" Text="{Binding Parent.Name, Mode=OneWay}">
                                                                                <Run.Foreground>
                                                                                    <SolidColorBrush Opacity="{StaticResource MyNet.Opacity.Secondary}" Color="{DynamicResource MyNet.Colors.Application.Foreground}" />
                                                                                </Run.Foreground>
                                                                            </Run><Run x:Name="parenthesisEnd" Text=")">
                                                                                <Run.Foreground>
                                                                                    <SolidColorBrush Opacity="{StaticResource MyNet.Opacity.Secondary}" Color="{DynamicResource MyNet.Colors.Application.Foreground}" />
                                                                                </Run.Foreground>
                                                                            </Run>
                                                                            <Run Text="-">
                                                                                <Run.Foreground>
                                                                                    <SolidColorBrush Opacity="{StaticResource MyNet.Opacity.Overlay}" Color="{DynamicResource MyNet.Colors.Application.Foreground}" />
                                                                                </Run.Foreground>
                                                                            </Run>
                                                                            <Run x:Name="name" Text="{Binding DisplayName, Mode=OneWay}">
                                                                                <Run.Foreground>
                                                                                    <SolidColorBrush Opacity="{StaticResource MyNet.Opacity.Overlay}" Color="{DynamicResource MyNet.Colors.Application.Foreground}" />
                                                                                </Run.Foreground>
                                                                            </Run><Run x:Name="fixture" Text="{Binding Fixture.DisplayName, Mode=OneWay}">
                                                                                <Run.Foreground>
                                                                                    <SolidColorBrush Opacity="{StaticResource MyNet.Opacity.Overlay}" Color="{DynamicResource MyNet.Colors.Application.Foreground}" />
                                                                                </Run.Foreground>
                                                                            </Run>
                                                                        </TextBlock>
                                                                        <DataTemplate.Triggers>
                                                                            <DataTrigger Binding="{Binding Parent.ShowName}" Value="False">
                                                                                <Setter TargetName="parent" Property="Text" Value="" />
                                                                                <Setter TargetName="parenthesisEnd" Property="Text" Value="" />
                                                                                <Setter TargetName="parenthesisStart" Property="Text" Value="" />
                                                                            </DataTrigger>
                                                                            <DataTrigger Binding="{Binding Fixture, Converter={x:Static my:NullToBooleanConverter.FalseIfNull}}" Value="False">
                                                                                <Setter TargetName="fixture" Property="Text" Value="" />
                                                                            </DataTrigger>
                                                                            <DataTrigger Binding="{Binding Fixture, Converter={x:Static my:NullToBooleanConverter.FalseIfNull}}" Value="True">
                                                                                <Setter TargetName="name" Property="Text" Value="" />
                                                                            </DataTrigger>
                                                                        </DataTemplate.Triggers>
                                                                    </DataTemplate>
                                                                </ContentControl.ContentTemplate>
                                                            </ContentControl>

                                                            <!-- Toolbar -->
                                                            <StackPanel x:Name="options"
                                                                        HorizontalAlignment="Right"
                                                                        VerticalAlignment="Bottom"
                                                                        Orientation="Horizontal">
                                                                <v:MatchToolBar x:Name="ToolBar"
                                                                                Style="{StaticResource MyNet.Styles.ToolBar.Tools}"
                                                                                Padding="0"
                                                                                VerticalAlignment="Bottom"
                                                                                DataContext="{Binding Item}"
                                                                                RescheduleConflictsCommand="{Binding Data.RescheduleConflictsCommand, Source={StaticResource Proxy}}"
                                                                                SelectConflictsCommand="{Binding Data.SelectConflictsCommand, Source={StaticResource Proxy}}"
                                                                                SelectFixtureMatchesCommand="{Binding Data.SelectFixtureMatchesCommand, Source={StaticResource Proxy}}"
                                                                                Visibility="Collapsed" />
                                                                <CheckBox x:Name="Selection"
                                                                          Style="{StaticResource MyNet.Styles.CheckBox.Circle}"
                                                                          VerticalAlignment="Bottom" Margin="0 0 0 2"
                                                                          BorderBrush="{my:BrushBinding SelfPath=(TextElement.Foreground),
                                                                                                        Opacity={StaticResource MyNet.Opacity.Secondary}}"
                                                                          Focusable="False"
                                                                          IsChecked="{Binding IsSelected}"
                                                                          IsTabStop="False"
                                                                          Visibility="Collapsed" />
                                                            </StackPanel>
                                                        </Grid>

                                                        <DataTemplate.Triggers>
                                                            <DataTrigger Binding="{Binding SelectedIndex, ElementName=display}" Value="0">
                                                                <Setter TargetName="content" Property="ContentTemplate">
                                                                    <Setter.Value>

                                                                        <!-- Teams -->
                                                                        <DataTemplate>
                                                                            <WrapPanel>
                                                                                <ctrl:TeamControl Style="{StaticResource Scorer.Styles.TeamControl.Horizontal.Small}" Team="{Binding Home.Team}" />
                                                                                <TextBlock Margin="{StaticResource MyNet.Margins.Small}"
                                                                                           Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                                                                           Text="{my:Resource VersusAbbr}"
                                                                                           Typography.Capitals="AllSmallCaps" />
                                                                                <ctrl:TeamControl Style="{StaticResource Scorer.Styles.TeamControl.Horizontal.Small}" IsAway="True" Team="{Binding Away.Team}" />
                                                                            </WrapPanel>
                                                                        </DataTemplate>
                                                                    </Setter.Value>
                                                                </Setter>
                                                            </DataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True" />
                                                                    <Condition Binding="{Binding Data.SelectedWrappers.Count, Source={StaticResource Proxy}, Converter={x:Static my:CountToBooleanConverter.NotMany}}" Value="True" />
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="ToolBar" Property="Visibility" Value="Visible" />
                                                            </MultiDataTrigger>
                                                            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
                                                                <Setter TargetName="Selection" Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                                                <Setter TargetName="Selection" Property="Visibility" Value="Visible" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Converter={x:Static my:ComparaisonToBooleanConverter.IsGreaterThan}, ConverterParameter=100}" Value="True">
                                                                <Setter TargetName="options" Property="Grid.Column" Value="1" />
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Converter={x:Static my:ComparaisonToBooleanConverter.IsGreaterThan}, ConverterParameter=45}" Value="True">
                                                                <Setter TargetName="options" Property="Grid.Column" Value="0" />
                                                                <Setter TargetName="options" Property="Grid.Row" Value="1" />
                                                            </DataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter=46}" Value="True" />
                                                                    <Condition Binding="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter=101}" Value="True" />
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="options" Property="Grid.Column" Value="1" />
                                                                <Setter TargetName="options" Property="Grid.Row" Value="1" />
                                                            </MultiDataTrigger>
                                                        </DataTemplate.Triggers>
                                                    </DataTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                                            <Setter Property="ToolTip">
                                                <Setter.Value>
                                                    <ContentControl Content="{Binding}" ContentTemplate="{StaticResource Scorer.DataTemplates.MatchDetails}" />
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="VerticalContentAlignment" Value="Stretch" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Item.Conflicts.Count, Converter={x:Static my:CountToBooleanConverter.Any}}" Value="True">
                                                    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Warning}" />
                                                    <Setter Property="BorderThickness" Value="2" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </my:CalendarHoursByDay.ItemContainerStyle>
                                    <my:CalendarHoursByDay.ColumnHeaderTemplate>
                                        <DataTemplate>
                                            <my:SimpleStackPanel HorizontalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Default}">
                                                <TextBlock HorizontalAlignment="Center"
                                                           Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                                           Text="{my:DisplayDateTime Format=ddd}"
                                                           Typography.Capitals="AllSmallCaps" />
                                                <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}"
                                                           HorizontalAlignment="Center"
                                                           Opacity="{StaticResource MyNet.Opacity.Default}"
                                                           Text="{my:DisplayDateTime Format=dd}" />
                                            </my:SimpleStackPanel>
                                        </DataTemplate>
                                    </my:CalendarHoursByDay.ColumnHeaderTemplate>
                                    <my:CalendarHoursByDay.RowHeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                                       Margin="0 -6 0 0"
                                                       VerticalAlignment="Top"
                                                       Text="{my:DisplayDateTime Format=t}" />
                                        </DataTemplate>
                                    </my:CalendarHoursByDay.RowHeaderTemplate>
                                    <my:CalendarHoursByDay.CalendarItemStyle>
                                        <Style TargetType="{x:Type my:CalendarItem}" BasedOn="{StaticResource MyNet.Styles.CalendarItem.HoursByDay}">
                                            <Setter Property="MinHeight" Value="60" />
                                            <Setter Property="my:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Accent}" />
                                            <Style.Triggers>
                                                <Trigger Property="IsNow" Value="True">
                                                    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </my:CalendarHoursByDay.CalendarItemStyle>
                                </my:CalendarHoursByDay>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Mode}" Value="{x:Static contracts:ScreenMode.Edition}">
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <v:MatchesView ShowGrouping="False" />
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ContentControl.Style>
        </ContentControl>
    </DockPanel>
</UserControl>