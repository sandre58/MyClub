<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:MyClub.Teamup.Wpf.Converters"
                    xmlns:ctrl="clr-namespace:MyClub.Teamup.Wpf.Controls"
                    xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain"
                    xmlns:my="http://mynet.com/xaml/themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Themes/MyNet.Styles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="Teamup.Styles.RadioButton.Blur" BasedOn="{StaticResource MyNet.Styles.RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Click">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Width)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Height)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Grid x:Name="templateRoot" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Viewbox VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Canvas Width="24" Height="24">
                                <Ellipse x:Name="Ellipse1"
                                         Canvas.Left="5"
                                         Canvas.Top="5"
                                         Width="14"
                                         Height="14"
                                         Fill="{TemplateBinding Foreground}"
                                         Opacity="{StaticResource MyNet.Opacity.Overlay}">
                                    <Ellipse.Effect>
                                        <BlurEffect KernelType="Gaussian" Radius="10" RenderingBias="Quality" />
                                    </Ellipse.Effect>
                                </Ellipse>
                                <Ellipse x:Name="Ellipse2"
                                         Canvas.Left="8"
                                         Canvas.Top="8"
                                         Width="8"
                                         Height="8"
                                         Fill="{TemplateBinding Foreground}"
                                         Opacity="{StaticResource MyNet.Opacity.Overlay}">
                                    <Ellipse.Effect>
                                        <BlurEffect KernelType="Gaussian" Radius="4" RenderingBias="Quality" />
                                    </Ellipse.Effect>
                                </Ellipse>

                                <Ellipse x:Name="InteractionEllipse"
                                         Canvas.Left="12"
                                         Canvas.Top="12"
                                         Width="0"
                                         Height="0"
                                         Fill="{TemplateBinding Background}"
                                         IsHitTestVisible="False"
                                         Opacity="0"
                                         RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Canvas>
                        </Viewbox>
                        <ContentPresenter x:Name="contentPresenter"
                                          Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Focusable="False"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Visibility="{Binding HasContent, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="ButtonBase.Click">
                            <BeginStoryboard Storyboard="{StaticResource Click}" />
                        </EventTrigger>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rounded}" />
                            <Setter Property="Padding" Value="4 2 0 0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Ellipse1" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Medium}" />
                            <Setter TargetName="Ellipse2" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Medium}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Ellipse1" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Secondary}" />
                            <Setter TargetName="Ellipse2" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Secondary}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Ellipse1" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                            <Setter TargetName="Ellipse2" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
                            <Setter TargetName="Ellipse1" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Default}" />
                            <Setter TargetName="Ellipse2" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Default}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Teamup.Styles.ListBoxItem.Injury" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
        <Setter Property="Canvas.Left">
            <Setter.Value>
                <MultiBinding Converter="{x:Static c:InjuryTypeToCanvasPositionConverter.Left}">
                    <Binding Path="Value" />
                    <Binding Path="IsFemale" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Canvas.Top">
            <Setter.Value>
                <MultiBinding Converter="{x:Static c:InjuryTypeToCanvasPositionConverter.Top}">
                    <Binding Path="Value" />
                    <Binding Path="IsFemale" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ContentPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <DataTemplate x:Key="Teamup.DataTemplates.InjurySelector.InjuryType">
        <Grid ToolTip="{Binding Display}">
            <RadioButton x:Name="RadioButton"
                         Style="{StaticResource Teamup.Styles.RadioButton.Blur}"
                         Width="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}, Converter={x:Static my:MathConverter.Divide}, ConverterParameter=10}"
                         Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}, Converter={x:Static my:MathConverter.Divide}, ConverterParameter=10}"
                         Background="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Mode=TwoWay}"
                         IsChecked="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Mode=TwoWay}"
                         IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}, Converter={x:Static my:NotBooleanConverter.Default}}" />
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Value}" Value="{x:Static enums:InjuryType.Other}">
                <Setter TargetName="RadioButton" Property="Style" Value="{StaticResource MyNet.Styles.RadioButton}" />
                <Setter TargetName="RadioButton" Property="Content" Value="{Binding Display}" />
                <Setter TargetName="RadioButton" Property="ToolTip" Value="{x:Null}" />
                <Setter TargetName="RadioButton" Property="Width" Value="Auto" />
                <Setter TargetName="RadioButton" Property="Height" Value="Auto" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="True">
                <Setter TargetName="RadioButton" Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="True" />
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Visibility" Value="Collapsed" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="True" />
                    <Condition Binding="{Binding Value}" Value="{x:Static enums:InjuryType.Other}" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Visibility" Value="Collapsed" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Severity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="{x:Static enums:InjurySeverity.Severe}">
                <Setter TargetName="RadioButton" Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Severe}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Severity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="{x:Static enums:InjurySeverity.Minor}">
                <Setter TargetName="RadioButton" Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Minor}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Severity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="{x:Static enums:InjurySeverity.Moderate}">
                <Setter TargetName="RadioButton" Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Moderate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Severity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="{x:Static enums:InjurySeverity.Serious}">
                <Setter TargetName="RadioButton" Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Serious}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="Teamup.Styles.InjurySelector" TargetType="{x:Type ctrl:InjurySelector}">
        <Setter Property="ItemsSource" Value="{my:EnumSource {x:Type enums:InjuryType}}" />
        <Setter Property="SelectedValuePath" Value="Value" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource Teamup.Styles.ListBoxItem.Injury}" />
        <Setter Property="ItemTemplate" Value="{StaticResource Teamup.DataTemplates.InjurySelector.InjuryType}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <my:RelativeCanvas Width="{Binding ElementName=Image, Path=ActualWidth}" Height="{Binding ElementName=Image, Path=ActualHeight}" IsItemsHost="True" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:InjurySelector}">
                    <Grid>
                        <Image x:Name="Image"
                               Opacity="0.5"
                               Source="../Resources/Images/male.png"
                               Stretch="Uniform" />
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFemale" Value="True">
                            <Setter TargetName="Image" Property="Source" Value="../Resources/Images/female.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource MyNet.Opacity.Disabled}" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>