<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ctrl="clr-namespace:MyClub.Teamup.Wpf.Controls"
                    xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain"
                    xmlns:my="http://mynet.com/xaml/themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Themes/MyNet.Styles.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Teamup;component/Styles/Teamup.Team.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="Teamup.Styles.Label.Score.Medium" BasedOn="{StaticResource MyNet.Styles.Label.Elevation.Custom}" TargetType="{x:Type Label}">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Title}" />
        <Setter Property="FontFamily" Value="{StaticResource MyNet.Font.Family.Daggersquare}" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Width" Value="28" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="Teamup.Styles.Label.Score.Small" BasedOn="{StaticResource Teamup.Styles.Label.Score.Medium}" TargetType="{x:Type Label}">
        <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
    </Style>

    <Style x:Key="Teamup.Styles.Label.Score.Large" BasedOn="{StaticResource Teamup.Styles.Label.Score.Medium}" TargetType="{x:Type Label}">
        <Setter Property="FontSize" Value="40" />
        <Setter Property="Height" Value="65" />
        <Setter Property="Width" Value="65" />
    </Style>
    
    <Style x:Key="Teamup.Styles.MatchControl" TargetType="{x:Type ctrl:MatchControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="10" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="10" />
                            <ColumnDefinition Width="70" />
                            <ColumnDefinition Width="10" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <!--  Date  -->
                        <my:SimpleStackPanel Grid.ColumnSpan="5" HorizontalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Small}">
                            <TextBlock Text="{my:Translation Match.Date, RelativeSource={RelativeSource TemplatedParent}, Format=LongDatePattern, Casing=Title}" Typography.Capitals="AllSmallCaps" />
                            <Button Style="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}"
                                    HorizontalAlignment="Center"
                                    Command="{Binding Match.OpenParentCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                    Content="{Binding Match.Parent.Name, RelativeSource={RelativeSource TemplatedParent}}"
                                    Opacity="{StaticResource MyNet.Opacity.Secondary}" />
                        </my:SimpleStackPanel>

                        <!--  Home  -->
                        <ContentControl x:Name="home"
                                        Grid.Row="2"
                                        HorizontalAlignment="Center"
                                        Content="{Binding Match.HomeTeam, RelativeSource={RelativeSource TemplatedParent}}"
                                        ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Large}" />

                        <ctrl:MatchButton x:Name="button"
                                          Grid.Row="2"
                                          Grid.Column="2"
                                          HorizontalAlignment="Center"
                                          Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}">
                            <ctrl:MatchButton.ContentTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Border Background="White" Opacity="0.002" />

                                        <!--  IsCancelled  -->
                                        <my:SimpleStackPanel x:Name="cancel" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="Collapsed">
                                            <my:PackIcon Width="36"
                                                         Height="36"
                                                         HorizontalAlignment="Center"
                                                         Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                                         Kind="ProgressClose" />
                                            <TextBlock Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource Cancelled}" />
                                        </my:SimpleStackPanel>

                                        <!--  IsPostponed  -->
                                        <my:SimpleStackPanel x:Name="postponed" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="Collapsed">
                                            <my:PackIcon Width="36"
                                                         Height="36"
                                                         HorizontalAlignment="Center"
                                                         Foreground="{DynamicResource MyNet.Brushes.Warning}"
                                                         Kind="ProgressQuestion" />
                                            <TextBlock Foreground="{DynamicResource MyNet.Brushes.Warning}" Text="{my:Resource Postponed}" />
                                        </my:SimpleStackPanel>

                                        <!--  Time  -->
                                        <TextBlock x:Name="time"
                                                   FontFamily="{StaticResource MyNet.Font.Family.Digital}"
                                                   FontSize="{StaticResource MyNet.Font.Size.Title}"
                                                   Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                                   Text="{my:Translation Date,
                                                                         Format=ShortTimePattern,
                                                                         Casing=Title}"
                                                   Visibility="Visible" />

                                        <!--  Score  -->
                                        <Grid x:Name="score" Visibility="Collapsed">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="6" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="5" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>

                                            <Label x:Name="homeScore" Style="{StaticResource Teamup.Styles.Label.Score.Medium}" Content="{Binding HomeScore}" />
                                            <Label x:Name="awayScore"
                                                   Style="{StaticResource Teamup.Styles.Label.Score.Medium}"
                                                   Grid.Column="2"
                                                   Content="{Binding AwayScore}" />

                                            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                                       Grid.Row="2"
                                                       Grid.ColumnSpan="3"
                                                       HorizontalAlignment="Center"
                                                       Text="{my:Resource AfterExtraTimeAbbr}"
                                                       ToolTip="{my:Resource AfterExtraTime}"
                                                       Visibility="{Binding AfterExtraTime, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                                            <my:SimpleStackPanel Grid.Row="3"
                                                                 Grid.ColumnSpan="3"
                                                                 HorizontalAlignment="Center"
                                                                 Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                                                 Orientation="Horizontal"
                                                                 Spacing="{StaticResource MyNet.Margin.Default}"
                                                                 Visibility="{Binding AfterShootouts, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                                                <Label x:Name="homeShootoutScore"
                                                       Style="{StaticResource Teamup.Styles.Label.Score.Small}"
                                                       Grid.Row="2"
                                                       Content="{Binding HomeShootoutScore}" />
                                                <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Text="{my:Resource ShootoutsAbbr}" ToolTip="{my:Resource Shootouts}" />
                                                <Label x:Name="awayShootoutScore"
                                                       Style="{StaticResource Teamup.Styles.Label.Score.Small}"
                                                       Grid.Row="2"
                                                       Grid.Column="2"
                                                       Content="{Binding AwayShootoutScore}" />
                                            </my:SimpleStackPanel>

                                            <!--  Home is withdrawn  -->
                                            <TextBlock Grid.Row="3"
                                                       Grid.Column="0"
                                                       HorizontalAlignment="Center"
                                                       FontSize="{StaticResource MyNet.Font.Size.Caption}"
                                                       Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                                       Text="{my:Resource WithdrawAbbr,
                                                                          Casing=AllCaps}"
                                                       ToolTip="{my:Resource Withdraw}"
                                                       Visibility="{Binding HomeIsWithdrawn, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                                            <!--  Away is withdrawn  -->
                                            <TextBlock Grid.Row="3"
                                                       Grid.Column="2"
                                                       HorizontalAlignment="Center"
                                                       FontSize="{StaticResource MyNet.Font.Size.Caption}"
                                                       Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                                       Text="{my:Resource WithdrawAbbr,
                                                                          Casing=AllCaps}"
                                                       ToolTip="{my:Resource Withdraw}"
                                                       Visibility="{Binding AwayIsWithdrawn, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                                        </Grid>
                                    </Grid>

                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                            <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                            <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                                            <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                            <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                            <Setter TargetName="homeShootoutScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                            <Setter TargetName="awayShootoutScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                            <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                                            <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="homeShootoutScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="awayShootoutScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
                                            <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
                                            <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
                                            <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
                                            <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ctrl:MatchButton.ContentTemplate>
                        </ctrl:MatchButton>

                        <!--  Away  -->
                        <ContentControl x:Name="away"
                                        Grid.Row="2"
                                        Grid.Column="4"
                                        HorizontalAlignment="Center"
                                        Content="{Binding Match.AwayTeam, RelativeSource={RelativeSource TemplatedParent}}"
                                        ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Large}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Match.HomeHasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Match.AwayHasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                        <Trigger Property="EnableContextMenu" Value="False">
                            <Setter TargetName="button" Property="ContextMenu" Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Teamup.Styles.MatchControl.Medium" BasedOn="{StaticResource Teamup.Styles.MatchControl}" TargetType="{x:Type ctrl:MatchControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
                    <Grid Height="35">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="40" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="15" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="50" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="15" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="40" />
                        </Grid.ColumnDefinitions>

                        <!--  Home Rank  -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="0"
                                   Margin="{StaticResource MyNet.Margins.Medium.Right}"
                                   Text="{Binding Match.HomeRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:IntegerToOrdinalizeConverter.Default}}"
                                   Visibility="{Binding Match.HomeRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:EqualityToVisibilityConverter.CollapsedIfEqual}, ConverterParameter=0}" />

                        <!--  Home  -->
                        <ContentControl x:Name="home"
                                        Grid.Column="1"
                                        HorizontalAlignment="Right"
                                        Content="{Binding Match.HomeTeam, RelativeSource={RelativeSource TemplatedParent}}"
                                        ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Medium.Home}" />

                        <!--  Home is withdrawn  -->
                        <TextBlock Grid.Column="3"
                                   HorizontalAlignment="Center"
                                   Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                   Text="{my:Resource WithdrawAbbr,
                                                      Casing=AllCaps}"
                                   ToolTip="{my:Resource Withdraw}"
                                   Visibility="{Binding Match.HomeIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <!--  Home won after extra time  -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="3"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource AfterExtraTimeAbbr2}"
                                   ToolTip="{my:Resource AfterExtraTime}"
                                   Visibility="{Binding Match.HomeHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <!--  Home won after shootouts  -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="3"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource ShootoutsAbbr2}"
                                   ToolTip="{my:Resource Shootouts}"
                                   Visibility="{Binding Match.HomeHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <ctrl:MatchButton x:Name="button"
                                          Grid.Column="4"
                                          HorizontalAlignment="Center"
                                          Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}">
                            <ctrl:MatchButton.ContentTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Border Background="White" Opacity="0.002" />

                                        <!--  IsCancelled  -->
                                        <my:PackIcon x:Name="cancel"
                                                     Width="24"
                                                     Height="24"
                                                     Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                                     Kind="ProgressClose"
                                                     ToolTip="{my:Resource Cancelled}"
                                                     Visibility="Collapsed" />

                                        <!--  IsPostponed  -->
                                        <my:PackIcon x:Name="postponed"
                                                     Width="24"
                                                     Height="24"
                                                     Foreground="{DynamicResource MyNet.Brushes.Warning}"
                                                     Kind="ProgressQuestion"
                                                     ToolTip="{my:Resource Postponed}"
                                                     Visibility="Collapsed" />

                                        <!--  Time  -->
                                        <TextBlock x:Name="time"
                                                   Style="{StaticResource MyNet.Styles.TextBlock.Caption}"
                                                   FontFamily="{StaticResource MyNet.Font.Family.Digital}"
                                                   Text="{my:Translation Date,
                                                                         Format=t,
                                                                         Casing=Title}"
                                                   Visibility="Visible" />

                                        <!--  Score  -->
                                        <Grid x:Name="score" Visibility="Collapsed">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="4" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>

                                            <Label x:Name="homeScore" Style="{StaticResource Teamup.Styles.Label.Score.Small}" Content="{Binding HomeScore}" />
                                            <Label x:Name="awayScore"
                                                   Style="{StaticResource Teamup.Styles.Label.Score.Small}"
                                                   Grid.Column="2"
                                                   Content="{Binding AwayScore}" />
                                        </Grid>

                                    </Grid>

                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                            <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                            <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                                            <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                            <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
                                            <Setter TargetName="score" Property="Visibility" Value="Visible" />
                                            <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                                            <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                                            <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
                                            <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
                                            <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
                                            <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
                                            <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ctrl:MatchButton.ContentTemplate>
                        </ctrl:MatchButton>

                        <!--  Away won after extra time  -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="5"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource AfterExtraTimeAbbr2}"
                                   ToolTip="{my:Resource AfterExtraTime}"
                                   Visibility="{Binding Match.AwayHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <!--  Away won after shootouts  -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="5"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource ShootoutsAbbr2}"
                                   ToolTip="{my:Resource Shootouts}"
                                   Visibility="{Binding Match.AwayHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <!--  Away is withdrawn  -->
                        <TextBlock Grid.Column="5"
                                   HorizontalAlignment="Center"
                                   Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                   Text="{my:Resource WithdrawAbbr,
                                                      Casing=AllCaps}"
                                   ToolTip="{my:Resource Withdraw}"
                                   Visibility="{Binding Match.AwayIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <!--  Away  -->
                        <ContentControl x:Name="away"
                                        Grid.Column="7"
                                        HorizontalAlignment="Left"
                                        Content="{Binding Match.AwayTeam, RelativeSource={RelativeSource TemplatedParent}}"
                                        ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Medium.Away}" />

                        <!--  Away Rank  -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="8"
                                   Margin="{StaticResource MyNet.Margins.Medium.Left}"
                                   Text="{Binding Match.AwayRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:IntegerToOrdinalizeConverter.Default}}"
                                   Visibility="{Binding Match.AwayRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:EqualityToVisibilityConverter.CollapsedIfEqual}, ConverterParameter=0}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Match.HomeHasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Match.AwayHasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                        <Trigger Property="EnableContextMenu" Value="False">
                            <Setter TargetName="button" Property="ContextMenu" Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Teamup.Styles.MatchControl.Small" BasedOn="{StaticResource Teamup.Styles.MatchControl}" TargetType="{x:Type ctrl:MatchControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="15" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="50" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="15" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <!--  Home  -->
                        <ContentControl x:Name="home"
                                        Grid.Column="0"
                                        HorizontalAlignment="Right"
                                        Content="{Binding Match.HomeTeam, RelativeSource={RelativeSource TemplatedParent}}"
                                        ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Small.Home}" />

                        <!--  Home is withdrawn  -->
                        <TextBlock Grid.Column="2"
                                   HorizontalAlignment="Center"
                                   Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                   Text="{my:Resource WithdrawAbbr,
                                                      Casing=AllCaps}"
                                   ToolTip="{my:Resource Withdraw}"
                                   Visibility="{Binding Match.HomeIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <!--  Home won after extra time  -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="2"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource AfterExtraTimeAbbr2}"
                                   ToolTip="{my:Resource AfterExtraTime}"
                                   Visibility="{Binding Match.HomeHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <!--  Home won after shootouts  -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="2"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource ShootoutsAbbr2}"
                                   ToolTip="{my:Resource Shootouts}"
                                   Visibility="{Binding Match.HomeHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <!--  Score  -->
                        <ctrl:MatchButton x:Name="button"
                                          Grid.Column="3"
                                          HorizontalAlignment="Center"
                                          Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}" />

                        <!--  Away won after extra time  -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="4"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource AfterExtraTimeAbbr2}"
                                   ToolTip="{my:Resource AfterExtraTime}"
                                   Visibility="{Binding Match.AwayHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <!--  Away won after shootouts  -->
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                   Grid.Column="4"
                                   HorizontalAlignment="Center"
                                   Text="{my:Resource ShootoutsAbbr2}"
                                   ToolTip="{my:Resource Shootouts}"
                                   Visibility="{Binding Match.AwayHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <!--  Away is withdrawn  -->
                        <TextBlock Grid.Column="4"
                                   HorizontalAlignment="Center"
                                   Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                   Text="{my:Resource WithdrawAbbr,
                                                      Casing=AllCaps}"
                                   ToolTip="{my:Resource Withdraw}"
                                   Visibility="{Binding Match.AwayIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />

                        <!--  Away  -->
                        <ContentControl x:Name="away"
                                        Grid.Column="6"
                                        HorizontalAlignment="Left"
                                        Content="{Binding Match.AwayTeam, RelativeSource={RelativeSource TemplatedParent}}"
                                        ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Small.Away}" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Match.HomeHasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Match.AwayHasWon, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                        </DataTrigger>
                        <Trigger Property="EnableContextMenu" Value="False">
                            <Setter TargetName="button" Property="ContextMenu" Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>