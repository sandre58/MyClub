<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:cmd="clr-namespace:MyClub.Teamup.Wpf.Commands"
                    xmlns:utils="clr-namespace:MyNet.Utilities;assembly=MyNet.Utilities"
                    xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain"
                    xmlns:my="http://mynet.com/xaml/themes"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Themes/MyNet.Styles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <sys:Double x:Key="Teamup.Player.IconRatio">1.10</sys:Double>

    <Style x:Key="Teamup.Styles.ToggleButton.Player" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Primary}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Content" Value="{Binding}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <my:GeometryIcon x:Name="Icon"
                                         Width="{Binding Width, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter={StaticResource Teamup.Player.IconRatio}}"
                                         Height="{Binding Height, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter={StaticResource Teamup.Player.IconRatio}}"
                                         Margin="0 0 0 -7"
                                         Opacity="{StaticResource MyNet.Opacity.Medium}"
                                         Visibility="{Binding Photo, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
                        <Image Source="{Binding Photo, Converter={x:Static my:BytesToImageConverter.Default}}" Stretch="UniformToFill" />
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding Gender}" Value="{x:Static utils:GenderType.Female}">
                            <Setter TargetName="Icon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Gender}" Value="{x:Static utils:GenderType.Male}">
                            <Setter TargetName="Icon" Property="Data" Value="{StaticResource MyNet.Geometries.Male}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Content.Gender, RelativeSource={RelativeSource Self}}" Value="{x:Static utils:GenderType.Female}" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Female}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Content.Gender, RelativeSource={RelativeSource Self}}" Value="{x:Static utils:GenderType.Male}" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Male}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Teamup.Styles.PictureControl.Player.Small" BasedOn="{StaticResource {x:Type my:PictureControl}}" TargetType="{x:Type my:PictureControl}">
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="{x:Static cmd:ImageCommands.DownloadCommand}"
                              CommandParameter="{Binding PlacementTarget.Image, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"
                              Header="{my:Resource Download}"
                              Icon="{my:ToolIcon Kind=Download}" />
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background.Secondary}" />
        <Setter Property="Image" Value="{Binding DataContext.Photo, RelativeSource={RelativeSource Self}, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:BytesToImageConverter.Default}}" />
        <Setter Property="Width" Value="25" />
        <Setter Property="Height" Value="25" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <my:GeometryIcon x:Name="GenderIcon"
                                     Width="30"
                                     Height="30"
                                     Margin="0 0 0 -6"
                                     Data="{StaticResource MyNet.Geometries.Male}"
                                     Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
                            <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Teamup.Styles.PictureControl.Player.SmallMedium" BasedOn="{StaticResource Teamup.Styles.PictureControl.Player.Small}" TargetType="{x:Type my:PictureControl}">
        <Setter Property="Width" Value="32" />
        <Setter Property="Height" Value="32" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <my:GeometryIcon x:Name="GenderIcon"
                                     Width="37"
                                     Height="37"
                                     Margin="0 0 0 -7"
                                     Data="{StaticResource MyNet.Geometries.Male}"
                                     Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
                            <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Teamup.Styles.PictureControl.Player.Medium" BasedOn="{StaticResource Teamup.Styles.PictureControl.Player.Small}" TargetType="{x:Type my:PictureControl}">
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <my:GeometryIcon x:Name="GenderIcon"
                                     Width="45"
                                     Height="45"
                                     Margin="0 0 0 -8"
                                     Data="{StaticResource MyNet.Geometries.Male}"
                                     Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
                            <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Teamup.Styles.PictureControl.Player.Large" BasedOn="{StaticResource Teamup.Styles.PictureControl.Player.Small}" TargetType="{x:Type my:PictureControl}">
        <Setter Property="Width" Value="70" />
        <Setter Property="Height" Value="70" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <my:GeometryIcon x:Name="GenderIcon"
                                     Width="75"
                                     Height="75"
                                     Margin="0 0 0 -12"
                                     Data="{StaticResource MyNet.Geometries.Male}"
                                     Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
                            <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Teamup.Styles.PictureControl.Player.Huge" BasedOn="{StaticResource Teamup.Styles.PictureControl.Player.Small}" TargetType="{x:Type my:PictureControl}">
        <Setter Property="Width" Value="120" />
        <Setter Property="Height" Value="120" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <my:GeometryIcon x:Name="GenderIcon"
                                     Width="130"
                                     Height="130"
                                     Margin="0 0 0 -25"
                                     Data="{StaticResource MyNet.Geometries.Male}"
                                     Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
                            <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Teamup.Styles.PictureControl.Player.Rounded.Medium" BasedOn="{StaticResource Teamup.Styles.PictureControl.Player.Medium}" TargetType="{x:Type my:PictureControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type my:PictureControl}">
                    <Grid Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(my:ElevationAssist.Elevation), Converter={x:Static my:ShadowConverter.Default}}">
                        <Grid x:Name="OffGrid" Background="{TemplateBinding Background}" RenderTransformOrigin=".5,.5">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Image HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Source="{TemplateBinding Image}"
                                   Stretch="UniformToFill"
                                   Visibility="{Binding Image, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}}" />
                            <Grid.Clip>
                                <EllipseGeometry RadiusX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width, Converter={x:Static my:MathConverter.Divide}, ConverterParameter=2.0}" RadiusY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height, Converter={x:Static my:MathConverter.Divide}, ConverterParameter=2.0}">
                                    <EllipseGeometry.Center>
                                        <MultiBinding Converter="{x:Static my:PointValueConverter.Default}">
                                            <Binding Converter="{x:Static my:MathConverter.Divide}"
                                                     ConverterParameter="2.0"
                                                     Path="Width"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Converter="{x:Static my:MathConverter.Divide}"
                                                     ConverterParameter="2.0"
                                                     Path="Height"
                                                     RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </EllipseGeometry.Center>
                                </EllipseGeometry>
                            </Grid.Clip>
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>