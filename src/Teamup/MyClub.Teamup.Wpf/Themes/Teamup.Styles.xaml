<!--
    This code was generated by a tool.
    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
-->
<!--
Source files:
Styles\Teamup.Competition.xaml
Styles\Teamup.Controls.CompetitionButton.xaml
Styles\Teamup.Controls.GroupStageButton.xaml
Styles\Teamup.Controls.InjurySelector.xaml
Styles\Teamup.Controls.KnockoutButton.xaml
Styles\Teamup.Controls.MatchButton.xaml
Styles\Teamup.Controls.MatchControl.xaml
Styles\Teamup.Controls.MatchdayButton.xaml
Styles\Teamup.Controls.PlayerButton.xaml
Styles\Teamup.Controls.PlayerGauge.xaml
Styles\Teamup.Controls.PositionsSelector.xaml
Styles\Teamup.Controls.StadiumButton.xaml
Styles\Teamup.Controls.TeamButton.xaml
Styles\Teamup.Controls.TrainingSessionButton.xaml
Styles\Teamup.Icons.xaml
Styles\Teamup.Misc.xaml
Styles\Teamup.Player.xaml
Styles\Teamup.Rating.xaml
Styles\Teamup.Team.xaml
Styles\Teamup.Training.xaml
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:c="clr-namespace:MyClub.Teamup.Wpf.Converters" xmlns:cmd="clr-namespace:MyClub.Teamup.Wpf.Commands" xmlns:my="http://mynet.com/xaml/themes" xmlns:ctrl="clr-namespace:MyClub.Teamup.Wpf.Controls" xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain" xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:vm="clr-namespace:MyNet.UI.ViewModels.Import;assembly=MyNet.UI" xmlns:utils="clr-namespace:MyNet.Utilities;assembly=MyNet.Utilities" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:models="clr-namespace:MyClub.Teamup.Domain.TrainingAggregate;assembly=MyClub.Teamup.Domain" xmlns:entities="clr-namespace:MyClub.Teamup.Wpf.ViewModels.Entities">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/MyNet.Wpf;component/Themes/MyNet.Styles.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <Geometry x:Key="Teamup.Geometries.Tactic" po:Freeze="True">M 10.23 10.44 L 10.94 9.73 L 12 10.795 L 13.06 9.73 L 13.77 10.44 L 12.705 11.5 L 13.77 12.56 L 13.06 13.27 L 12 12.205 L 10.94 13.27 L 10.23 12.56 L 11.295 11.5 L 10.23 10.44 zM 5.2824 6.8038 L 4.9852 8.4786 L 5.0493 10.2152 L 5.3479 11.5811 L 5.735 12.6471 L 6.0764 13.3499 L 6.2384 13.6262 L 6.3526 13.7168 L 6.5573 13.6932 L 6.6258 13.3749 L 6.4837 13.1295 L 6.1598 12.46 L 5.7886 11.4373 L 5.5044 10.1324 L 5.4463 8.4957 L 5.7287 6.9204 L 6.51 5.1454 L 7.7662 3.5004 L 8.0803 3.8321 L 8.4292 2.6579 L 8.3244 2.5462 L 7.1325 2.83 L 7.449 3.1642 L 6.1127 4.9109 L 5.2824 6.8038 z M 5.94 18.27 L 5.23 17.56 L 6.295 16.5 L 5.23 15.44 L 5.94 14.73 L 7 15.795 L 8.06 14.73 L 8.77 15.44 L 7.705 16.5 L 8.77 17.56 L 8.06 18.27 L 7 17.205 L 5.94 18.27 z M 10.94 18.27 L 10.23 17.56 L 11.295 16.5 L 10.23 15.44 L 10.94 14.73 L 12 15.795 L 13.06 14.73 L 13.77 15.44 L 12.705 16.5 L 13.77 17.56 L 13.06 18.27 L 12 17.205 L 10.94 18.27 z M 15.94 18.27 L 15.23 17.56 L 16.295 16.5 L 15.23 15.44 L 15.94 14.73 L 17 15.795 L 18.06 14.73 L 18.77 15.44 L 17.705 16.5 L 18.77 17.56 L 18.06 18.27 L 17 17.205 L 15.94 18.27 z M 13.44 8.27 L 12.73 7.56 L 13.795 6.5 L 12.73 5.44 L 13.44 4.73 L 14.5 5.795 L 15.56 4.73 L 16.27 5.44 L 15.205 6.5 L 16.27 7.56 L 15.56 8.27 L 14.5 7.205 L 13.44 8.27 z M 8.44 8.27 L 7.73 7.56 L 8.795 6.5 L 7.73 5.44 L 8.44 4.73 L 9.5 5.795 L 10.56 4.73 L 11.27 5.44 L 10.205 6.5 L 11.27 7.56 L 10.56 8.27 L 9.5 7.205 L 8.44 8.27 z M 3 19 L 3 1 A 2 2 -90 0 1 5 -1 L 19 -1 A 2 2 -90 0 1 21 1 L 21 19 A 2 2 -90 0 1 19 21 L 5 21 A 2 2 -90 0 1 3 19 z M 4 19 A 1 1 -90 0 0 5 20 l 14 0 A 1 1 -90 0 0 20 19 L 20 1 A 1 1 -90 0 0 19 0 L 5 -0 A 1 1 -90 0 0 4 1 L 4 19 Z M 15 0 L 15 2 L 9 2 L 9 -0 Z M 10 -0 L 10 1 L 14 1 L 14 0</Geometry>
  <Geometry x:Key="Teamup.Geometries.Teamup" po:Freeze="True">M12,5.5A3.5,3.5 0 0,1 15.5,9A3.5,3.5 0 0,1 12,12.5A3.5,3.5 0 0,1 8.5,9A3.5,3.5 0 0,1 12,5.5M5,8C5.56,8 6.08,8.15 6.53,8.42C6.38,9.85 6.8,11.27 7.66,12.38C7.16,13.34 6.16,14 5,14A3,3 0 0,1 2,11A3,3 0 0,1 5,8M19,8A3,3 0 0,1 22,11A3,3 0 0,1 19,14C17.84,14 16.84,13.34 16.34,12.38C17.2,11.27 17.62,9.85 17.47,8.42C17.92,8.15 18.44,8 19,8M5.5,18.25C5.5,16.18 8.41,14.5 12,14.5C15.59,14.5 18.5,16.18 18.5,18.25V20H5.5V18.25M0,20V18.5C0,17.11 1.89,15.94 4.45,15.6C3.86,16.28 3.5,17.22 3.5,18.25V20H0M24,20H20.5V18.25C20.5,17.22 20.14,16.28 19.55,15.6C22.11,15.94 24,17.11 24,18.5V20Z</Geometry>
  <Geometry x:Key="Teamup.Geometries.Training" po:Freeze="True">M4.88480997085571,10.6557893753052L5.96781015396118,11.7388200759888 6.44480991363525,11.7388200759888 7.89980983734131,10.2838201522827 9.35480976104736,11.7388200759888 9.83178043365479,11.7388200759888 10.9148092269897,10.6557893753052 10.9148092269897,10.1787900924683 9.45980930328369,8.72379016876221 10.9148092269897,7.26878976821899 10.9148092269897,6.79179000854492 9.83178043365479,5.70878982543945 9.35480976104736,5.70878982543945 7.89980983734131,7.16378974914551 6.44480991363525,5.70878982543945 5.96781015396118,5.70878982543945 4.88480997085571,6.79179000854492 4.88480997085571,7.26878976821899 6.33980989456177,8.72379016876221 4.88480997085571,10.1787900924683 4.88480997085571,10.6557893753052z M19.3028087615967,14.4838199615479L18.2198104858398,15.566819190979 18.2198104858398,16.0438194274902 19.6748104095459,17.4988193511963 18.2198104858398,18.9538192749023 18.2198104858398,19.4307899475098 19.3028087615967,20.5138206481934 19.7798099517822,20.5138206481934 21.2348098754883,19.0588188171387 22.6898097991943,20.5138206481934 23.1667804718018,20.5138206481934 24.2498111724854,19.4307899475098 24.2498111724854,18.9538192749023 22.7978096008301,17.4988193511963 24.2528095245361,16.0438194274902 24.2528095245361,15.566819190979 23.1698093414307,14.4838199615479 22.6928100585938,14.4838199615479 21.2378101348877,15.9388198852539 19.7828102111816,14.4838199615479 19.3028087615967,14.4838199615479z M14.5478096008301,12.14381980896L12.5228099822998,15.8338193893433 11.985387802124,17.3346118927002 11.6771850585938,18.5116844177246 11.5360441207886,19.291072845459 11.4998092651367,19.598819732666 11.9138097763062,20.0818195343018 11.9468097686768,20.0818195343018 12.3938102722168,19.6648197174072 12.4247941970825,19.4019012451172 12.5561809539795,18.6842060089111 12.8456249237061,17.584566116333 13.3507795333862,16.1758193969727 15.2798099517822,12.6568202972412 18.5167808532715,9.03582000732422 19.0748100280762,9.73182010650635 19.941780090332,7.50281953811646 19.7527809143066,7.26881980895996 17.3977794647217,7.63481998443604 17.9587783813477,8.33382034301758 14.5478096008301,12.14381980896z M0.735809981822968,9.88781929016113L1.30918121337891,13.1604404449463 2.58677983283997,16.3047885894775 4.04740476608276,18.6122150421143 5.46977949142456,20.3101749420166 6.56590461730957,21.3719425201416 7.04777956008911,21.7707901000977 7.31777954101563,21.8607902526855 7.67777967453003,21.6807899475098 7.59080982208252,21.0507888793945 7.16619873046875,20.6952896118164 6.12453365325928,19.6827926635742 4.75999879837036,18.0538024902344 3.36677980422974,15.848819732666 2.16679120063782,12.8836727142334 1.63277995586395,9.80381965637207 1.88104128837585,6.02419471740723 3.0877799987793,2.16581988334656 3.88580965995789,2.56482005119324 3.74177980422974,0.176819995045662 3.4748101234436,0.0418200008571148 1.47678005695343,1.35881996154785 2.28080987930298,1.76081991195679 0.995309948921204,5.85917234420776 0.735809981822968,9.88781929016113z</Geometry>
  <sys:Double x:Key="Teamup.Player.IconRatio">1.10</sys:Double>
  <sys:Double x:Key="Teamup.Rating.Max10">10.0001</sys:Double>
  <sys:Double x:Key="Teamup.Rating.Max8">8</sys:Double>
  <sys:Double x:Key="Teamup.Rating.Max6">6</sys:Double>
  <sys:Double x:Key="Teamup.Rating.Max45">4.5</sys:Double>
  <sys:Double x:Key="Teamup.Rating.Max35">3.5</sys:Double>
  <sys:Double x:Key="Teamup.Rating.Max2">2</sys:Double>
  <sys:Double x:Key="Teamup.TrainingSession.IconRatio">0.75</sys:Double>
  <DataTemplate x:Key="Teamup.DataTemplates.ChartPoint.TrainingSession">
    <ctrl:TrainingSessionButton Item="{Binding Point.Instance}" />
  </DataTemplate>
  <Style x:Key="Teamup.Styles.PictureControl.Competition" BasedOn="{StaticResource {x:Type my:PictureControl}}" TargetType="{x:Type my:PictureControl}">
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu>
          <MenuItem Command="{x:Static cmd:ImageCommands.DownloadCommand}" CommandParameter="{Binding PlacementTarget.Image, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="{my:Resource Download}" Icon="{my:ToolIcon Kind=Download}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Stretch" Value="Uniform" />
    <Setter Property="Image" Value="{Binding DataContext.Logo, RelativeSource={RelativeSource Self}, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:BytesToImageConverter.Default}}" />
    <Setter Property="Width" Value="40" />
    <Setter Property="Height" Value="40" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:PackIcon Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}}" Kind="FavoriteCircle" Visibility="{Binding Image, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.ListView.Ranking" BasedOn="{StaticResource MyNet.Styles.ListView}" TargetType="{x:Type ListView}">
    <Style.Resources>
      <Style BasedOn="{StaticResource MyNet.Styles.GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="my:DataGridAssist.ColumnHeaderPadding" Value="3" />
      </Style>
    </Style.Resources>
    <Setter Property="ItemsSource" Value="{Binding Items}" />
    <Setter Property="my:ListAssist.SynchronizedList" Value="{Binding}" />
    <Setter Property="my:ListViewAssist.HeaderHeight" Value="32" />
    <Setter Property="my:ListViewAssist.ItemMinHeight" Value="37" />
    <Setter Property="my:ListBoxItemAssist.ShowSelection" Value="False" />
    <Setter Property="my:ListViewAssist.AutoResizeIsEnabled" Value="True" />
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style BasedOn="{StaticResource MyNet.Styles.ListViewItem}" TargetType="{x:Type ListViewItem}">
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="{x:Type ListViewItem}">
                <Border Margin="{TemplateBinding Margin}" Padding="{Binding RelativeSource={RelativeSource Self}, Path=(my:ListViewAssist.ListViewItemPadding)}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}">
                  <Grid>
                    <Border x:Name="rankBorder" Opacity="{StaticResource MyNet.Opacity.Checked}">
                      <Border.Background>
                        <MultiBinding Converter="{x:Static c:RankingRankToLabelConverter.Background}">
                          <Binding Path="Rank" />
                          <Binding Path="DataContext.RankingRules" RelativeSource="{RelativeSource AncestorType={x:Type ListView}}" />
                        </MultiBinding>
                      </Border.Background>
                    </Border>
                    <GridViewRowPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                      <GridViewRowPresenter.Resources>
                        <Style BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
                          <Setter Property="TextWrapping" Value="NoWrap" />
                          <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                        </Style>
                      </GridViewRowPresenter.Resources>
                    </GridViewRowPresenter>
                  </Grid>
                </Border>
                <ControlTemplate.Triggers>
                  <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
                  </Trigger>
                </ControlTemplate.Triggers>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Style>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.ListView.Ranking.Small" BasedOn="{StaticResource Teamup.Styles.ListView.Ranking}" TargetType="{x:Type ListView}">
    <Setter Property="my:ListViewAssist.HeaderHeight" Value="25" />
    <Setter Property="my:ListViewAssist.ItemMinHeight" Value="22" />
  </Style>
  <Style x:Key="Teamup.Styles.CompetitionButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:CompetitionButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.Name, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:CompetitionButton}}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="CompetitionProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Header="{Binding Name}">
            <MenuItem.Icon>
              <Grid Width="25" Height="25">
                <my:PackIcon Width="25" Height="25" Kind="Shield" Opacity="{StaticResource MyNet.Opacity.Secondary}" Visibility="{Binding Data.Logo, Source={StaticResource CompetitionProxy}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
                <Image HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Source="{Binding Data.Logo, Source={StaticResource CompetitionProxy}, Converter={x:Static my:BytesToImageConverter.Default}}" Stretch="UniformToFill" Visibility="{Binding Data.Logo, Source={StaticResource CompetitionProxy}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}}" />
              </Grid>
            </MenuItem.Icon>
          </MenuItem>
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding DuplicateCommand}" Header="{my:Resource Duplicate}" Icon="{my:ToolIcon Kind=ContentDuplicate}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Background="{DynamicResource MyNet.Brushes.Negative}" Command="{Binding RemoveCommand}" Foreground="{my:BrushBinding SelfPath=Background,                                                            Contrast=True}" Header="{my:Resource Remove}" Icon="{my:ToolIcon Kind=Trash}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.GroupStageButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:GroupStageButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.Name, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:GroupStageButton}}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="GroupStageProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Header="{Binding Name}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Background="{DynamicResource MyNet.Brushes.Negative}" Command="{Binding RemoveCommand}" Foreground="{my:BrushBinding SelfPath=Background,                                                            Contrast=True}" Header="{my:Resource Remove}" Icon="{my:ToolIcon Kind=Trash}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.RadioButton.Blur" BasedOn="{StaticResource MyNet.Styles.RadioButton}" TargetType="{x:Type RadioButton}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="Click">
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Width)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(FrameworkElement.Height)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="48" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="-24" />
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="InteractionEllipse" Storyboard.TargetProperty="(UIElement.Opacity)">
                <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid x:Name="templateRoot" Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Viewbox VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
              <Canvas Width="24" Height="24">
                <Ellipse x:Name="Ellipse1" Canvas.Left="5" Canvas.Top="5" Width="14" Height="14" Fill="{TemplateBinding Foreground}" Opacity="{StaticResource MyNet.Opacity.Overlay}">
                  <Ellipse.Effect>
                    <BlurEffect KernelType="Gaussian" Radius="10" RenderingBias="Quality" />
                  </Ellipse.Effect>
                </Ellipse>
                <Ellipse x:Name="Ellipse2" Canvas.Left="8" Canvas.Top="8" Width="8" Height="8" Fill="{TemplateBinding Foreground}" Opacity="{StaticResource MyNet.Opacity.Overlay}">
                  <Ellipse.Effect>
                    <BlurEffect KernelType="Gaussian" Radius="4" RenderingBias="Quality" />
                  </Ellipse.Effect>
                </Ellipse>
                <Ellipse x:Name="InteractionEllipse" Canvas.Left="12" Canvas.Top="12" Width="0" Height="0" Fill="{TemplateBinding Background}" IsHitTestVisible="False" Opacity="0" RenderTransformOrigin="0.5,0.5">
                  <Ellipse.RenderTransform>
                    <TransformGroup>
                      <ScaleTransform />
                      <SkewTransform />
                      <RotateTransform />
                      <TranslateTransform />
                    </TransformGroup>
                  </Ellipse.RenderTransform>
                </Ellipse>
              </Canvas>
            </Viewbox>
            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="{Binding HasContent, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="ButtonBase.Click">
              <BeginStoryboard Storyboard="{StaticResource Click}" />
            </EventTrigger>
            <Trigger Property="HasContent" Value="true">
              <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rounded}" />
              <Setter Property="Padding" Value="4 2 0 0" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Ellipse1" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Medium}" />
              <Setter TargetName="Ellipse2" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Medium}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Ellipse1" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Secondary}" />
              <Setter TargetName="Ellipse2" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Secondary}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Ellipse1" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
              <Setter TargetName="Ellipse2" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" />
              <Setter TargetName="Ellipse1" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Default}" />
              <Setter TargetName="Ellipse2" Property="Opacity" Value="{DynamicResource MyNet.Opacity.Default}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.ListBoxItem.Injury" TargetType="{x:Type ListBoxItem}">
    <Setter Property="Padding" Value="0" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="Canvas.Left">
      <Setter.Value>
        <MultiBinding Converter="{x:Static c:InjuryTypeToCanvasPositionConverter.Left}">
          <Binding Path="Value" />
          <Binding Path="IsFemale" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="Canvas.Top">
      <Setter.Value>
        <MultiBinding Converter="{x:Static c:InjuryTypeToCanvasPositionConverter.Top}">
          <Binding Path="Value" />
          <Binding Path="IsFemale" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}" />
        </MultiBinding>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
          <ContentPresenter />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Key="Teamup.DataTemplates.InjurySelector.InjuryType">
    <Grid ToolTip="{Binding Display}">
      <RadioButton x:Name="RadioButton" Style="{StaticResource Teamup.Styles.RadioButton.Blur}" Width="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}, Converter={x:Static my:MathConverter.Divide}, ConverterParameter=10}" Height="{Binding ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}, Converter={x:Static my:MathConverter.Divide}, ConverterParameter=10}" Background="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Mode=TwoWay}" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Mode=TwoWay}" IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}, Converter={x:Static my:NotBooleanConverter.Default}}" />
    </Grid>
    <DataTemplate.Triggers>
      <DataTrigger Binding="{Binding Value}" Value="{x:Static enums:InjuryType.Other}">
        <Setter TargetName="RadioButton" Property="Style" Value="{StaticResource MyNet.Styles.RadioButton}" />
        <Setter TargetName="RadioButton" Property="Content" Value="{Binding Display}" />
        <Setter TargetName="RadioButton" Property="ToolTip" Value="{x:Null}" />
        <Setter TargetName="RadioButton" Property="Width" Value="Auto" />
        <Setter TargetName="RadioButton" Property="Height" Value="Auto" />
      </DataTrigger>
      <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="True">
        <Setter TargetName="RadioButton" Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="True" />
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="False" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Visibility" Value="Collapsed" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="True" />
          <Condition Binding="{Binding Value}" Value="{x:Static enums:InjuryType.Other}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Visibility" Value="Collapsed" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <DataTrigger Binding="{Binding Severity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="{x:Static enums:InjurySeverity.Severe}">
        <Setter TargetName="RadioButton" Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Severe}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Severity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="{x:Static enums:InjurySeverity.Minor}">
        <Setter TargetName="RadioButton" Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Minor}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Severity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="{x:Static enums:InjurySeverity.Moderate}">
        <Setter TargetName="RadioButton" Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Moderate}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Severity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:InjurySelector}}}" Value="{x:Static enums:InjurySeverity.Serious}">
        <Setter TargetName="RadioButton" Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Serious}" />
      </DataTrigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <Style x:Key="Teamup.Styles.InjurySelector" TargetType="{x:Type ctrl:InjurySelector}">
    <Setter Property="ItemsSource" Value="{my:EnumSource {x:Type enums:InjuryType}}" />
    <Setter Property="SelectedValuePath" Value="Value" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="SelectionMode" Value="Single" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource Teamup.Styles.ListBoxItem.Injury}" />
    <Setter Property="ItemTemplate" Value="{StaticResource Teamup.DataTemplates.InjurySelector.InjuryType}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <my:RelativeCanvas Width="{Binding ElementName=Image, Path=ActualWidth}" Height="{Binding ElementName=Image, Path=ActualHeight}" IsItemsHost="True" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:InjurySelector}">
          <Grid>
            <Image x:Name="Image" Opacity="0.5" Source="../Resources/Images/male.png" Stretch="Uniform" />
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsFemale" Value="True">
              <Setter TargetName="Image" Property="Source" Value="../Resources/Images/female.png" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{DynamicResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.KnockoutButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:KnockoutButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.Name, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:KnockoutButton}}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="KnockoutProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Header="{Binding Name}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
          <MenuItem Command="{Binding EditResultsCommand}" Header="{my:Resource EditResults}" Icon="{my:ToolIcon Kind=LibraryEdit}" />
          <MenuItem Command="{Binding AddMatchesCommand}" Header="{my:Resource AddMatches}" Icon="{my:ToolIcon Kind=LibraryAdd}" />
          <MenuItem Command="{Binding PostponeCommand}" Header="{my:Resource Postpone}" Icon="{my:ToolIcon Kind=ProgressQuestion}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Background="{DynamicResource MyNet.Brushes.Negative}" Command="{Binding RemoveCommand}" Foreground="{my:BrushBinding SelfPath=Background,                                                            Contrast=True}" Header="{my:Resource Remove}" Icon="{my:ToolIcon Kind=Trash}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.Label.Score.Medium" BasedOn="{StaticResource MyNet.Styles.Label.Elevation.Custom}" TargetType="{x:Type Label}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Application.Background}" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Title}" />
    <Setter Property="FontFamily" Value="{StaticResource MyNet.Font.Family.Daggersquare}" />
    <Setter Property="Height" Value="28" />
    <Setter Property="Width" Value="28" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="Padding" Value="0" />
  </Style>
  <Style x:Key="Teamup.Styles.Label.Score.Small" BasedOn="{StaticResource Teamup.Styles.Label.Score.Medium}" TargetType="{x:Type Label}">
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="Height" Value="18" />
    <Setter Property="Width" Value="18" />
  </Style>
  <Style x:Key="Teamup.Styles.Label.Score.Large" BasedOn="{StaticResource Teamup.Styles.Label.Score.Medium}" TargetType="{x:Type Label}">
    <Setter Property="FontSize" Value="40" />
    <Setter Property="Height" Value="65" />
    <Setter Property="Width" Value="65" />
  </Style>
  <Style x:Key="Teamup.Styles.MatchdayButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:MatchdayButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.Name, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:MatchdayButton}}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="MatchdayProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Header="{Binding Name}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
          <MenuItem Command="{Binding EditResultsCommand}" Header="{my:Resource EditResults}" Icon="{my:ToolIcon Kind=LibraryEdit}" />
          <MenuItem Command="{Binding AddMatchesCommand}" Header="{my:Resource AddMatches}" Icon="{my:ToolIcon Kind=LibraryAdd}" />
          <MenuItem Command="{Binding DuplicateCommand}" Header="{my:Resource Duplicate}" Icon="{my:ToolIcon Kind=ContentDuplicate}" />
          <MenuItem Command="{Binding PostponeCommand}" Header="{my:Resource Postpone}" Icon="{my:ToolIcon Kind=ProgressQuestion}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Background="{DynamicResource MyNet.Brushes.Negative}" Command="{Binding RemoveCommand}" Foreground="{my:BrushBinding SelfPath=Background,                                                            Contrast=True}" Header="{my:Resource Remove}" Icon="{my:ToolIcon Kind=Trash}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.Label.Embedded.PositionItem" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}" TargetType="{x:Type Label}">
    <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.8}" />
    <Setter Property="Height" Value="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.8}" />
    <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}}" />
    <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}}" />
    <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}}" />
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding CanSelect, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionsSelector}}}" Value="True" />
          <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="my:ElevationAssist.Elevation" Value="Dp4" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding CanSelect, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionsSelector}}}" Value="True" />
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="my:ElevationAssist.Elevation" Value="Dp6" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.PositionItem" TargetType="{x:Type ctrl:PositionItem}">
    <Setter Property="FocusVisualStyle" Value="{StaticResource MyNet.Styles.FocusVisualStyle.Rectangle.Margin}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.White}" />
    <Setter Property="Foreground" Value="{my:BrushBinding SelfPath=Background, Contrast=True}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Primary}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ClipToBounds" Value="False" />
    <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Overlay}" />
    <Setter Property="my:RippleAssist.IsCentered" Value="True" />
    <Setter Property="my:RippleAssist.ClipToBounds" Value="False" />
    <Setter Property="my:RippleAssist.RippleSizeMultiplier" Value="0.4" />
    <Setter Property="my:RippleAssist.Feedback" Value="{my:BrushBinding SelfPath=Background}" />
    <Setter Property="ToolTip" Value="{my:Translation Position}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:PositionItem}">
          <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
            <my:Ripple Padding="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding CanSelect, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionsSelector}}}" Value="True" />
          <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding CanSelect, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionsSelector}}}" Value="True" />
          <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </MultiDataTrigger>
      <DataTrigger Binding="{Binding CanSelect, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionsSelector}}}" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
        <Setter Property="my:RippleAssist.IsDisabled" Value="True" />
      </DataTrigger>
      <DataTrigger Binding="{Binding CanSelect, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionsSelector}}}" Value="True">
        <Setter Property="Cursor" Value="Hand" />
      </DataTrigger>
      <DataTrigger Binding="{Binding CanMove, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionsSelector}}}" Value="True">
        <Setter Property="Cursor" Value="SizeAll" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.PositionItem.RatedPosition" BasedOn="{StaticResource Teamup.Styles.PositionItem}" TargetType="{x:Type ctrl:PositionItem}">
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Rating}" Value="{x:Static enums:PositionRating.Poor}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Position.Poor}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Rating}" Value="{x:Static enums:PositionRating.Average}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Position.Average}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Rating}" Value="{x:Static enums:PositionRating.Good}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Position.Good}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Rating}" Value="{x:Static enums:PositionRating.VeryGood}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Position.VeryGood}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Rating}" Value="{x:Static enums:PositionRating.Natural}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Position.Natural}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Rating}" Value="{x:Static enums:PositionRating.Poor}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Position.Poor}" />
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsNatural}" Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="BorderThickness" Value="3" />
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.PositionsSelector" TargetType="{x:Type ctrl:PositionsSelector}">
    <Setter Property="Height" Value="Auto" />
    <Setter Property="Width" Value="Auto" />
    <Setter Property="Background">
      <Setter.Value>
        <ImageBrush ImageSource="pack://application:,,,/Teamup;component/Resources/Images/ground_3D.png" RenderOptions.BitmapScalingMode="Fant" RenderOptions.EdgeMode="Aliased" Stretch="Fill" />
      </Setter.Value>
    </Setter>
    <Setter Property="Focusable" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource Teamup.Styles.PositionItem}" />
    <Setter Property="FontSize" Value="{StaticResource MyNet.Font.Size.Secondary}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <ctrl:PositionsCanvas IsItemsHost="True" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:PositionsSelector}">
          <Grid>
            <Border Background="{TemplateBinding Background}" />
            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <Label x:Name="label" Style="{StaticResource Teamup.Styles.Label.Embedded.PositionItem}" Content="{my:Translation Position, Abbreviate=True}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{DynamicResource MyNet.Opacity.Disabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.PositionsSelector.RatedPosition" BasedOn="{StaticResource Teamup.Styles.PositionsSelector}" TargetType="{x:Type ctrl:PositionsSelector}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource Teamup.Styles.PositionItem.RatedPosition}" />
  </Style>
  <Style x:Key="Teamup.Styles.PositionsSelector.TacticPosition" BasedOn="{StaticResource Teamup.Styles.PositionsSelector}" TargetType="{x:Type ctrl:PositionsSelector}">
    <Setter Property="ItemTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <my:PackIcon Grid.Row="0" Width="Auto" Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.65}" HorizontalAlignment="Center" Foreground="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}}" Kind="TshirtCrew" />
            <Label x:Name="label" Style="{StaticResource MyNet.Styles.Label.Elevation.Custom}" Grid.Row="2" Width="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.5}" MinWidth="40" Margin="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={x:Static my:DoubleThicknessToConverter.Top}}" Padding="0 2" HorizontalAlignment="Center" my:ThemeAssist.UniformCornerRadius="8" Background="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}}" Content="{my:Translation Position,                                                         Abbreviate=True}" FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}}" Foreground="{my:BrushBinding BorderBrush,                                                             Contrast=True,                                                             RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}}" Tag="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=-0.15}" />
            <TextBlock Grid.RowSpan="2" HorizontalAlignment="Center" FontSize="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.18}" Text="{Binding Number}" />
          </Grid>
          <DataTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding CanSelect, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionsSelector}}}" Value="True" />
                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="label" Property="my:ElevationAssist.Elevation" Value="Dp4" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding CanSelect, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionsSelector}}}" Value="True" />
                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ctrl:PositionItem}}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="label" Property="my:ElevationAssist.Elevation" Value="Dp6" />
            </MultiDataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.StadiumButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:StadiumButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.DisplayName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:StadiumButton}}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="StadiumProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Header="{Binding DisplayName}" Icon="{my:Icon Kind=Stadium}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding OpenGoogleMapsCommand}" Header="{my:Resource OpenInGoogleMaps}" Icon="{my:ToolIcon Kind=GoogleMaps}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <ContextMenu x:Key="Teamup.ContextMenu.TrainingSession" x:Shared="False" DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
    <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
    <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
    <MenuItem Command="{Binding EditAttendancesCommand}" Header="{my:Resource EditAttendances}" Icon="{my:ToolIcon Kind=AccountMultipleAdd}" />
    <MenuItem Command="{Binding InitializeAttendancesCommand}" Header="{my:Resource InitializeAttendances}" Icon="{my:ToolIcon Kind=AccountMultipleCheck}" />
    <MenuItem Command="{Binding DuplicateCommand}" Header="{my:Resource Duplicate}" Icon="{my:ToolIcon Kind=ContentDuplicate}" />
    <MenuItem Command="{Binding CancelCommand}" Header="{my:Resource Cancel}" Icon="{my:ToolIcon Kind=Cancel}" />
    <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
    <MenuItem Background="{DynamicResource MyNet.Brushes.Negative}" Command="{Binding RemoveCommand}" Foreground="{my:BrushBinding SelfPath=Background,                                                Contrast=True}" Header="{my:Resource Remove}" Icon="{my:ToolIcon Kind=Trash}" />
  </ContextMenu>
  <Style x:Key="Teamup.Styles.TrainingSessionButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:TrainingSessionButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContextMenu" Value="{StaticResource Teamup.ContextMenu.TrainingSession}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <StackPanel Orientation="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:TrainingSessionButton}}}">
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Principal}" HorizontalAlignment="Center" Text="{my:Translation Item.StartDate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:TrainingSessionButton}}, Format=DateDayNumberFormat}" />
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" HorizontalAlignment="Center" Text="{my:Translation Item.StartDate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:TrainingSessionButton}}, Format=DateShortMonthFormat}" />
          </StackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.ContentControl.Date" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource MyNet.Styles.ContentControl}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent.Dark}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Border BorderBrush="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="1" CornerRadius="2">
            <StackPanel Orientation="Horizontal">
              <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}" HorizontalAlignment="Left" Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="0" CornerRadius="2 0 0 2">
                <TextBlock VerticalAlignment="Top" FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" FontWeight="{StaticResource MyNet.Font.Weight.Header}" Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Text="{my:Translation Path='',                                                                  Format=dd}" />
              </Border>
              <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}" HorizontalAlignment="Left" Background="{Binding Path=(my:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="0" CornerRadius="0 2 2 0" TextElement.Foreground="{Binding Path=(my:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}">
                <StackPanel VerticalAlignment="Center">
                  <TextBlock FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.4}" Foreground="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Text="{my:Translation Path='', Format=MMM, Casing=AllCaps}" />
                  <Separator Margin="0" />
                  <TextBlock FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter=0.45}" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Translation Path='', Format=yyyy}" />
                </StackPanel>
              </Border>
            </StackPanel>
          </Border>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="50" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.White}" />
    <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Black}" />
  </Style>
  <Style x:Key="Teamup.Styles.ContentControl.Date.Foreground" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Teamup.Styles.ContentControl.Date}">
    <Setter Property="Background" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="BorderBrush" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
    <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="Teamup.Styles.ContentControl.Time" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource MyNet.Styles.ContentControl}">
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Accent}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent.Dark}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Border BorderBrush="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="1" CornerRadius="2">
            <StackPanel Orientation="Horizontal">
              <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}" HorizontalAlignment="Left" Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="0" CornerRadius="2 0 0 2">
                <TextBlock VerticalAlignment="Top" FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Text="{my:Translation Path='',                                                                  Format=HH}" />
              </Border>
              <Border Padding="{StaticResource MyNet.Margins.Default.Horizontal}" HorizontalAlignment="Left" Background="{Binding Path=(my:ThemeAssist.IsCheckedBackground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" BorderThickness="0" CornerRadius="0 2 2 0" TextElement.Foreground="{Binding Path=(my:ThemeAssist.IsCheckedForeground), RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}">
                <TextBlock VerticalAlignment="Top" FontSize="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ContentControl}}}" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Translation Path='',                                                                  Format=mm}" />
              </Border>
            </StackPanel>
          </Border>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="18" />
    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.Accent.Foreground}" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{DynamicResource MyNet.Brushes.White}" />
    <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{DynamicResource MyNet.Brushes.Black}" />
  </Style>
  <Style x:Key="Teamup.Styles.ContentControl.Time.Foreground" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource Teamup.Styles.ContentControl.Time}">
    <Setter Property="Background" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="BorderBrush" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
    <Setter Property="Foreground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Contrast=True}" />
    <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity={StaticResource MyNet.Opacity.Filled}}" />
    <Setter Property="my:ThemeAssist.IsCheckedForeground" Value="{my:BrushBinding InheritPath=(TextElement.Foreground)}" />
  </Style>
  <Style x:Key="Teamup.Styles.ListBoxItem.Embedded.Expander" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
    <Setter Property="Height" Value="50" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="IsEnabled" Value="{Binding IsSelectable}" />
    <Setter Property="IsSelected" Value="{Binding IsSelected}" />
    <Setter Property="Padding" Value="0" />
  </Style>
  <Style x:Key="Teamup.Styles.ListBox.Embedded.Expander" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource Teamup.Styles.ListBoxItem.Embedded.Expander}" />
    <Setter Property="SelectionMode" Value="Extended" />
  </Style>
  <Style x:Key="Teamup.Styles.ListBox.Embedded.Popup.OtherItems" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MyNet.Styles.ListBox}">
    <Setter Property="ItemContainerStyle">
      <Setter.Value>
        <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MyNet.Styles.ListBoxItem}">
          <Setter Property="Visibility">
            <Setter.Value>
              <MultiBinding Converter="{x:Static my:EqualityToVisibilityConverter.CollapsedIfReferencesEqual}">
                <Binding />
                <Binding Path="Tag.Item" RelativeSource="{RelativeSource AncestorType={x:Type ListBox}}" />
              </MultiBinding>
            </Setter.Value>
          </Setter>
          <Setter Property="my:CommandsAssist.ClickCommand" Value="{Binding Tag.NavigateToItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" />
          <Setter Property="my:CommandsAssist.CommandParameter" Value="{Binding}" />
        </Style>
      </Setter.Value>
    </Setter>
    <Setter Property="MaxHeight" Value="500" />
    <Setter Property="Width" Value="270" />
    <Setter Property="my:ListBoxItemAssist.IsSelectedBackground" Value="Transparent" />
    <Setter Property="my:ListBoxItemAssist.IsSelectedForeground" Value="{my:BrushBinding SelfPath=Foreground}" />
  </Style>
  <DataTemplate x:Key="Teamup.DataTemplates.ListView.SelectAll">
    <CheckBox x:Name="SelectAllCheckBox" Margin="{StaticResource MyNet.Margins.Small.Left}" HorizontalAlignment="Center" IsChecked="{Binding DataContext.AreAllSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}}" ToolTip="{my:Resource SelectAll}" />
    <DataTemplate.Triggers>
      <Trigger SourceName="SelectAllCheckBox" Property="IsChecked" Value="True">
        <Setter TargetName="SelectAllCheckBox" Property="ToolBar.ToolTip" Value="{my:Resource UnselectAll}" />
      </Trigger>
    </DataTemplate.Triggers>
  </DataTemplate>
  <Style x:Key="Teamup.Styles.ListViewItem.Selectable" TargetType="ListViewItem" BasedOn="{StaticResource MyNet.Styles.ListViewItem}">
    <Setter Property="IsEnabled" Value="{Binding IsSelectable}" />
    <Setter Property="IsSelected" Value="{Binding IsSelected}" />
  </Style>
  <Style x:Key="Teamup.Styles.ListView.Selectable" TargetType="{x:Type ListView}" BasedOn="{StaticResource MyNet.Styles.ListView}">
    <Setter Property="ItemContainerStyle" Value="{StaticResource Teamup.Styles.ListViewItem.Selectable}" />
  </Style>
  <Style x:Key="Teamup.Styles.CheckBox.Embedded.DataGrid.Import" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Custom}">
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:PackIcon Width="24" Height="24" Kind="Close" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Height" Value="30" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="Width" Value="30" />
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Item.Mode}" Value="{x:Static vm:ImportMode.Add}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Positive}" />
        <Setter Property="my:ToggleButtonAssist.OnContentTemplate">
          <Setter.Value>
            <DataTemplate>
              <my:PackIcon Width="24" Height="24" Kind="Plus" />
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
          <Condition Binding="{Binding Item.Mode}" Value="{x:Static vm:ImportMode.Update}" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
        <Setter Property="my:ToggleButtonAssist.OnContentTemplate">
          <Setter.Value>
            <DataTemplate>
              <my:PackIcon Width="20" Height="20" Kind="Edit" />
            </DataTemplate>
          </Setter.Value>
        </Setter>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.CheckBox.Embedded.DataGrid.Import.Edition" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource Teamup.Styles.CheckBox.Embedded.DataGrid.Import}">
    <Setter Property="Focusable" Value="True" />
    <Setter Property="IsHitTestVisible" Value="True" />
  </Style>
  <Style x:Key="Teamup.Styles.ToggleButton.Embedded.ListView.Selection" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Custom}">
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Primary}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.NavigationView.Top" TargetType="{x:Type my:NavigationView}" BasedOn="{StaticResource MyNet.Styles.NavigationView.Top}">
    <Setter Property="FrameBackground" Value="Transparent" />
    <Setter Property="FrameCornerRadius" Value="0" />
    <Setter Property="FrameMargin" Value="{StaticResource MyNet.Margins.Medium.Top}" />
    <Setter Property="Margin" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="ShowAutoSuggestBox" Value="False" />
    <Setter Property="ShowHeader" Value="False" />
    <Setter Property="ShowNavigationButtons" Value="False" />
  </Style>
  <Style x:Key="Teamup.Styles.NavigationView.Top.Secondary" TargetType="{x:Type my:NavigationView}" BasedOn="{StaticResource Teamup.Styles.NavigationView.Top}">
    <Setter Property="FrameMargin" Value="{StaticResource MyNet.Margins.Medium}" />
    <Setter Property="Margin" Value="0" />
    <Style.Resources>
      <Style TargetType="{x:Type my:NavigationViewItem}" BasedOn="{StaticResource MyNet.Styles.NavigationViewItem.Top}">
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
        <Setter Property="my:ThemeAssist.IsCheckedBackground" Value="Transparent" />
        <Setter Property="my:ThemeAssist.IsMouseOverBackground" Value="Transparent" />
        <Style.Triggers>
          <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
          </Trigger>
          <Trigger Property="IsActive" Value="True">
            <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
          </Trigger>
        </Style.Triggers>
      </Style>
    </Style.Resources>
  </Style>
  <DataTemplate x:Key="Teamup.DataTemplates.Ghost.NoData.Large">
    <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Huge}">
      <my:PackIcon Width="150" Height="150" HorizontalAlignment="Center" Kind="CircleOffOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Title}" Text="{my:Resource NoData}" />
    </my:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="Teamup.DataTemplates.Ghost.NoData.Medium">
    <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
      <my:PackIcon Width="80" Height="80" HorizontalAlignment="Center" Kind="CircleOffOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" Text="{Binding}" />
    </my:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="Teamup.DataTemplates.Ghost.NoSelection.Medium">
    <my:SimpleStackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
      <my:PackIcon Width="80" Height="80" HorizontalAlignment="Center" Kind="SquareOffOutline" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Ghost}" HorizontalAlignment="Center" Text="{Binding}" />
    </my:SimpleStackPanel>
  </DataTemplate>
  <DataTemplate x:Key="Teamup.DataTemplates.List.Count">
    <Border x:Name="border" VerticalAlignment="Center" BorderBrush="{DynamicResource MyNet.Brushes.Control.Border}" BorderThickness="1" CornerRadius="17">
      <!-- Count -->
      <StackPanel Margin="11 5" Orientation="Horizontal" TextElement.FontSize="{StaticResource MyNet.Font.Size.Caption}">
        <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Text="{Binding WrappersSource.Count}" />
      </StackPanel>
    </Border>
  </DataTemplate>
  <DataTemplate x:Key="Teamup.DataTemplates.List.Count.Selectable">
    <Button Style="{StaticResource MyNet.Styles.Button.Outlined}" my:IconAssist.Alignment="Right" my:IconAssist.Icon="{my:ToolIcon Kind=CheckAll}" my:IconAssist.Margin="{StaticResource MyNet.Margins.Default.Left}" my:ThemeAssist.CornerRadius="17" Command="{Binding SelectAllCommand}" FontSize="{StaticResource MyNet.Font.Size.Caption}" ToolTip="{my:ShortcutResource SelectAll,                                               ShortcutKey='Ctrl+A'}">
      <StackPanel Orientation="Horizontal">
        <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
        <TextBlock Text="{Binding WrappersSource.Count}" />
      </StackPanel>
    </Button>
  </DataTemplate>
  <DataTemplate x:Key="Teamup.DataTemplates.List.Count.Selectable.DropDownButton">
    <Border x:Name="border" BorderBrush="{DynamicResource MyNet.Brushes.Control.Border}" BorderThickness="1" CornerRadius="17">
      <Border.Clip>
        <MultiBinding Converter="{x:Static my:GeometryConverter.Border}">
          <Binding ElementName="border" Path="ActualWidth" />
          <Binding ElementName="border" Path="ActualHeight" />
          <Binding ElementName="border" Path="CornerRadius" />
        </MultiBinding>
      </Border.Clip>
      <my:SplitButton Style="{StaticResource MyNet.Styles.SplitButton.Outlined}" my:IconAssist.Alignment="Right" my:IconAssist.Icon="{my:ToolIcon Kind=CheckAll}" my:IconAssist.Margin="{StaticResource MyNet.Margins.Default.Left}" BorderThickness="0" Command="{Binding SelectAllCommand}" FontSize="{StaticResource MyNet.Font.Size.Caption}" PopupPadding="0" ToolTip="{my:ShortcutResource SelectAll,                                                           ShortcutKey='Ctrl+A'}">
        <my:DropDownButton.ToggleContent>
          <StackPanel Orientation="Horizontal" TextElement.FontSize="{StaticResource MyNet.Font.Size.Title}">
            <TextBlock Text="{Binding Wrappers.Count}" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <TextBlock Margin="{StaticResource MyNet.Margins.Small.Horizontal}" Text="/" Visibility="{Binding IsFiltered, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
            <TextBlock Text="{Binding WrappersSource.Count}" />
          </StackPanel>
        </my:DropDownButton.ToggleContent>
        <my:Submenu ItemsSource="{Binding PresetSelections}">
          <my:Submenu.ItemContainerStyle>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MyNet.Styles.MenuItem}">
              <Setter Property="Command" Value="{Binding Value}" />
              <Setter Property="Header" Value="{my:Translation Key}" />
            </Style>
          </my:Submenu.ItemContainerStyle>
        </my:Submenu>
      </my:SplitButton>
    </Border>
  </DataTemplate>
  <Style x:Key="Teamup.Styles.ToggleButton.Player" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Primary}" TargetType="{x:Type ToggleButton}">
    <Setter Property="Content" Value="{Binding}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <my:GeometryIcon x:Name="Icon" Width="{Binding Width, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter={StaticResource Teamup.Player.IconRatio}}" Height="{Binding Height, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter={StaticResource Teamup.Player.IconRatio}}" Margin="0 0 0 -7" Opacity="{StaticResource MyNet.Opacity.Medium}" Visibility="{Binding Photo, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
            <Image Source="{Binding Photo, Converter={x:Static my:BytesToImageConverter.Default}}" Stretch="UniformToFill" />
          </Grid>
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Gender}" Value="{x:Static utils:GenderType.Female}">
              <Setter TargetName="Icon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Gender}" Value="{x:Static utils:GenderType.Male}">
              <Setter TargetName="Icon" Property="Data" Value="{StaticResource MyNet.Geometries.Male}" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
          <Condition Binding="{Binding Content.Gender, RelativeSource={RelativeSource Self}}" Value="{x:Static utils:GenderType.Female}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Female}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
          <Condition Binding="{Binding Content.Gender, RelativeSource={RelativeSource Self}}" Value="{x:Static utils:GenderType.Male}" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Male}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.PictureControl.Player.Small" BasedOn="{StaticResource {x:Type my:PictureControl}}" TargetType="{x:Type my:PictureControl}">
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu>
          <MenuItem Command="{x:Static cmd:ImageCommands.DownloadCommand}" CommandParameter="{Binding PlacementTarget.Image, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="{my:Resource Download}" Icon="{my:ToolIcon Kind=Download}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Control.Background.Secondary}" />
    <Setter Property="Image" Value="{Binding DataContext.Photo, RelativeSource={RelativeSource Self}, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:BytesToImageConverter.Default}}" />
    <Setter Property="Width" Value="25" />
    <Setter Property="Height" Value="25" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:GeometryIcon x:Name="GenderIcon" Width="30" Height="30" Margin="0 0 0 -6" Data="{StaticResource MyNet.Geometries.Male}" Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
              <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.PictureControl.Player.SmallMedium" BasedOn="{StaticResource Teamup.Styles.PictureControl.Player.Small}" TargetType="{x:Type my:PictureControl}">
    <Setter Property="Width" Value="32" />
    <Setter Property="Height" Value="32" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:GeometryIcon x:Name="GenderIcon" Width="37" Height="37" Margin="0 0 0 -7" Data="{StaticResource MyNet.Geometries.Male}" Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
              <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.PictureControl.Player.Medium" BasedOn="{StaticResource Teamup.Styles.PictureControl.Player.Small}" TargetType="{x:Type my:PictureControl}">
    <Setter Property="Width" Value="40" />
    <Setter Property="Height" Value="40" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:GeometryIcon x:Name="GenderIcon" Width="45" Height="45" Margin="0 0 0 -8" Data="{StaticResource MyNet.Geometries.Male}" Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
              <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.PictureControl.Player.Large" BasedOn="{StaticResource Teamup.Styles.PictureControl.Player.Small}" TargetType="{x:Type my:PictureControl}">
    <Setter Property="Width" Value="70" />
    <Setter Property="Height" Value="70" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:GeometryIcon x:Name="GenderIcon" Width="75" Height="75" Margin="0 0 0 -12" Data="{StaticResource MyNet.Geometries.Male}" Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
              <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.PictureControl.Player.Huge" BasedOn="{StaticResource Teamup.Styles.PictureControl.Player.Small}" TargetType="{x:Type my:PictureControl}">
    <Setter Property="Width" Value="120" />
    <Setter Property="Height" Value="120" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:GeometryIcon x:Name="GenderIcon" Width="130" Height="130" Margin="0 0 0 -25" Data="{StaticResource MyNet.Geometries.Male}" Visibility="{Binding DataContext.Photo, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Gender, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:PictureControl}}}" Value="{x:Static utils:GenderType.Female}">
              <Setter TargetName="GenderIcon" Property="Data" Value="{StaticResource MyNet.Geometries.Female}" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.PictureControl.Player.Rounded.Medium" BasedOn="{StaticResource Teamup.Styles.PictureControl.Player.Medium}" TargetType="{x:Type my:PictureControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type my:PictureControl}">
          <Grid Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(my:ElevationAssist.Elevation), Converter={x:Static my:ShadowConverter.Default}}">
            <Grid x:Name="OffGrid" Background="{TemplateBinding Background}" RenderTransformOrigin=".5,.5">
              <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
              <Image HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Source="{TemplateBinding Image}" Stretch="UniformToFill" Visibility="{Binding Image, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}}" />
              <Grid.Clip>
                <EllipseGeometry RadiusX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width, Converter={x:Static my:MathConverter.Divide}, ConverterParameter=2.0}" RadiusY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height, Converter={x:Static my:MathConverter.Divide}, ConverterParameter=2.0}">
                  <EllipseGeometry.Center>
                    <MultiBinding Converter="{x:Static my:PointValueConverter.Default}">
                      <Binding Converter="{x:Static my:MathConverter.Divide}" ConverterParameter="2.0" Path="Width" RelativeSource="{RelativeSource TemplatedParent}" />
                      <Binding Converter="{x:Static my:MathConverter.Divide}" ConverterParameter="2.0" Path="Height" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                  </EllipseGeometry.Center>
                </EllipseGeometry>
              </Grid.Clip>
              <Grid.RenderTransform>
                <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
              </Grid.RenderTransform>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="UIElement.Opacity" Value="{StaticResource MyNet.Opacity.Disabled}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.Gauge.Rating" BasedOn="{StaticResource MyNet.Styles.Gauge}" TargetType="{x:Type my:Gauge}">
    <Setter Property="Uses360Mode" Value="True" />
    <Setter Property="From" Value="{Binding Min, Source={x:Static models:TrainingAttendance.AcceptableRangeRating}}" />
    <Setter Property="To" Value="{Binding Max, Source={x:Static models:TrainingAttendance.AcceptableRangeRating}}" />
    <Setter Property="HighFontSize" Value="{StaticResource MyNet.Font.Size}" />
    <Setter Property="GaugeBackground" Value="{DynamicResource MyNet.Brushes.Control.Background.Secondary}" />
    <Setter Property="Foreground" Value="{Binding GaugeActiveFill, RelativeSource={RelativeSource Self}}" />
    <Setter Property="LabelFormatter" Value="{x:Static my:ChartFormatters.ToValueWithoutZero}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Value, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max10}}" Value="True">
        <Setter Property="GaugeActiveFill" Value="{DynamicResource Teamup.Brushes.Rating.8To10}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Value, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max8}}" Value="True">
        <Setter Property="GaugeActiveFill" Value="{DynamicResource Teamup.Brushes.Rating.6To8}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Value, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max6}}" Value="True">
        <Setter Property="GaugeActiveFill" Value="{DynamicResource Teamup.Brushes.Rating.45To6}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Value, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max45}}" Value="True">
        <Setter Property="GaugeActiveFill" Value="{DynamicResource Teamup.Brushes.Rating.35To45}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Value, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max35}}" Value="True">
        <Setter Property="GaugeActiveFill" Value="{DynamicResource Teamup.Brushes.Rating.2To35}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Value, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max2}}" Value="True">
        <Setter Property="GaugeActiveFill" Value="{DynamicResource Teamup.Brushes.Rating.0To2}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.Label.Rating" BasedOn="{StaticResource MyNet.Styles.Label.Rounded.Elevation.Custom}" TargetType="{x:Type Label}">
    <Setter Property="Height" Value="30" />
    <Setter Property="Width" Value="30" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max10}}" Value="True">
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Rating.8To10}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max8}}" Value="True">
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Rating.6To8}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max6}}" Value="True">
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Rating.45To6}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max45}}" Value="True">
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Rating.35To45}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max35}}" Value="True">
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Rating.2To35}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max2}}" Value="True">
        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Rating.0To2}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.PictureControl.Team" BasedOn="{StaticResource MyNet.Styles.PictureControl}" TargetType="{x:Type my:PictureControl}">
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu>
          <MenuItem Command="{x:Static cmd:ImageCommands.DownloadCommand}" CommandParameter="{Binding PlacementTarget.Image, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" Header="{my:Resource Download}" Icon="{my:ToolIcon Kind=Download}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Stretch" Value="Uniform" />
    <Setter Property="Image" Value="{Binding DataContext.Logo, RelativeSource={RelativeSource Self}, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:BytesToImageConverter.Default}}" />
    <Setter Property="Width" Value="25" />
    <Setter Property="Height" Value="25" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:PackIcon Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}}" Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}}" Kind="Shield" Visibility="{Binding Image, RelativeSource={RelativeSource AncestorType={x:Type my:PictureControl}}, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <DataTemplate x:Key="Teamup.DataTemplates.Team.ShortName.Away" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Teamup.Styles.PictureControl.Team}" Width="19" Height="19" Margin="{StaticResource MyNet.Margins.Default.Right}" DataContext="{Binding}" DockPanel.Dock="Left" />
      <ctrl:TeamButton Item="{Binding}">
        <ctrl:TeamButton.ContentTemplate>
          <DataTemplate>
            <TextBlock Text="{Binding ShortName, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:StringConverter.ToUpper}}" />
          </DataTemplate>
        </ctrl:TeamButton.ContentTemplate>
      </ctrl:TeamButton>
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Teamup.DataTemplates.Team.ShortName.Home" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Teamup.Styles.PictureControl.Team}" Width="19" Height="19" Margin="{StaticResource MyNet.Margins.Default.Left}" DataContext="{Binding}" DockPanel.Dock="Right" />
      <ctrl:TeamButton HorizontalAlignment="Right" Item="{Binding}">
        <ctrl:TeamButton.ContentTemplate>
          <DataTemplate>
            <TextBlock Text="{Binding ShortName, UpdateSourceTrigger=PropertyChanged, Converter={x:Static my:StringConverter.ToUpper}}" />
          </DataTemplate>
        </ctrl:TeamButton.ContentTemplate>
      </ctrl:TeamButton>
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Teamup.DataTemplates.Team.Small.Away" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Teamup.Styles.PictureControl.Team}" Width="19" Height="19" Margin="{StaticResource MyNet.Margins.Default.Right}" DataContext="{Binding}" DockPanel.Dock="Left" />
      <ctrl:TeamButton Item="{Binding}" />
      <my:PackIcon Width="14" Height="14" Margin="{StaticResource MyNet.Margins.Default.Left}" HorizontalAlignment="Left" Foreground="{DynamicResource MyNet.Brushes.Primary}" Kind="CheckCircle" Visibility="{Binding IsMyTeam, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Teamup.DataTemplates.Team.Small.Home" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Teamup.Styles.PictureControl.Team}" Width="19" Height="19" Margin="{StaticResource MyNet.Margins.Default.Left}" DataContext="{Binding}" DockPanel.Dock="Right" />
      <my:PackIcon Width="14" Height="14" Margin="{StaticResource MyNet.Margins.Default.Right}" HorizontalAlignment="Right" Foreground="{DynamicResource MyNet.Brushes.Primary}" Kind="CheckCircle" Visibility="{Binding IsMyTeam, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
      <ctrl:TeamButton HorizontalAlignment="Right" Item="{Binding}" />
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Teamup.DataTemplates.Team.Medium.Away" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Teamup.Styles.PictureControl.Team}" Width="25" Height="25" Margin="{StaticResource MyNet.Margins.Default.Right}" DataContext="{Binding}" DockPanel.Dock="Left" />
      <ctrl:TeamButton Item="{Binding}" />
      <my:PackIcon Margin="{StaticResource MyNet.Margins.Default.Left}" HorizontalAlignment="Left" Foreground="{DynamicResource MyNet.Brushes.Primary}" Kind="CheckCircle" Visibility="{Binding IsMyTeam, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Teamup.DataTemplates.Team.Medium.Home" DataType="{x:Type entities:TeamViewModel}">
    <DockPanel>
      <my:PictureControl Style="{StaticResource Teamup.Styles.PictureControl.Team}" Width="25" Height="25" Margin="{StaticResource MyNet.Margins.Default.Left}" DataContext="{Binding}" DockPanel.Dock="Right" />
      <my:PackIcon Margin="{StaticResource MyNet.Margins.Default.Right}" HorizontalAlignment="Right" Foreground="{DynamicResource MyNet.Brushes.Primary}" Kind="CheckCircle" Visibility="{Binding IsMyTeam, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
      <ctrl:TeamButton HorizontalAlignment="Right" Item="{Binding}" />
    </DockPanel>
  </DataTemplate>
  <DataTemplate x:Key="Teamup.DataTemplates.Team.Large" DataType="{x:Type entities:TeamViewModel}">
    <my:SimpleStackPanel>
      <my:PictureControl Style="{StaticResource Teamup.Styles.PictureControl.Team}" Width="80" Height="80" DataContext="{Binding}" />
      <ctrl:TeamButton HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Caption}" Item="{Binding}" Typography.Capitals="AllSmallCaps" />
    </my:SimpleStackPanel>
  </DataTemplate>
  <Style x:Key="Teamup.Styles.ToggleButton.TrainingSession" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Primary}" TargetType="{x:Type ToggleButton}">
    <Setter Property="Content" Value="{Binding}" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <my:PackIcon x:Name="Icon" Width="{Binding Width, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter={StaticResource Teamup.TrainingSession.IconRatio}}" Height="{Binding Height, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}, Converter={x:Static my:MathConverter.Multiply}, ConverterParameter={StaticResource Teamup.TrainingSession.IconRatio}}" Margin="-1 2 0 0" Kind="Clockwise" Opacity="{StaticResource MyNet.Opacity.Medium}" />
          </Grid>
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsPerformed}" Value="True">
              <Setter TargetName="Icon" Property="Kind" Value="Check" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsCancelled}" Value="True">
              <Setter TargetName="Icon" Property="Kind" Value="Cancel" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsChecked" Value="False">
        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.None}" />
        <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.White}" />
      </Trigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
          <Condition Binding="{Binding Content.IsPerformed, RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Positive}" />
          <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.White}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
          <Condition Binding="{Binding Content.IsCancelled, RelativeSource={RelativeSource Self}}" Value="True" />
        </MultiDataTrigger.Conditions>
        <MultiDataTrigger.Setters>
          <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Negative}" />
          <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.White}" />
        </MultiDataTrigger.Setters>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.DropDownButton.TrainingSession.Info" BasedOn="{StaticResource MyNet.Styles.DropDownButton.Icon.ToolTip}" TargetType="{x:Type my:DropDownButton}">
    <Setter Property="PopupHorizontalOffset" Value="0" />
    <Setter Property="ToggleContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <my:PackIcon Kind="InfoCircle" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="PopupContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid Width="500">
            <TextBlock HorizontalAlignment="Right" VerticalAlignment="Top" Foreground="{my:BrushBinding Cycle.Color,                                                                 Opacity={StaticResource MyNet.Opacity.Default}}" Text="{Binding Cycle.Label}" />
            <StackPanel>
              <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Title}" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" HorizontalAlignment="Center" Text="{Binding Theme}" />
              <UniformGrid Columns="2">
                <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.StringsList}" Margin="{StaticResource MyNet.Margins.Default}" Content="{Binding TechnicalGoals}" Header="{my:Resource TechnicalGoals}" />
                <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.StringsList}" Margin="{StaticResource MyNet.Margins.Default}" Content="{Binding TacticalGoals}" Header="{my:Resource TacticalGoals}" />
                <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.StringsList}" Margin="{StaticResource MyNet.Margins.Default}" Content="{Binding PhysicalGoals}" Header="{my:Resource PhysicalGoals}" />
                <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.StringsList}" Margin="{StaticResource MyNet.Margins.Default}" Content="{Binding MentalGoals}" Header="{my:Resource MentalGoals}" />
              </UniformGrid>
            </StackPanel>
          </Grid>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding PopupContent.Cycle.Color, RelativeSource={RelativeSource Self}, Converter={x:Static my:NullToBooleanConverter.FalseIfNull}}" Value="True">
        <Setter Property="Foreground" Value="{my:BrushBinding PopupContent.Cycle.Color, RelativeSource={RelativeSource Self}, Opacity={StaticResource MyNet.Opacity.Default}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.MatchButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:MatchButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Padding" Value="3 0 3 1" />
    <Setter Property="Content" Value="{Binding Item, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <Grid>
            <Border Background="White" Opacity="0.002" />
            <!--  IsCancelled  -->
            <my:PackIcon x:Name="cancel" Width="18" Height="18" Foreground="{DynamicResource MyNet.Brushes.Negative}" Kind="ProgressClose" ToolTip="{my:Resource Cancelled}" Visibility="Collapsed" />
            <!--  IsPostponed  -->
            <my:PackIcon x:Name="postponed" Width="18" Height="18" Foreground="{DynamicResource MyNet.Brushes.Warning}" Kind="ProgressQuestion" ToolTip="{my:Resource Postponed}" Visibility="Collapsed" />
            <!--  Date  -->
            <TextBlock x:Name="date" Text="{my:Translation Date, Format=ShortDateFormat, Casing=Title}" Visibility="Visible" />
            <!--  Score  -->
            <Grid x:Name="score" Visibility="Collapsed">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="4" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Label x:Name="homeScore" Style="{StaticResource Teamup.Styles.Label.Score.Small}" Content="{Binding HomeScore}" />
              <Label x:Name="awayScore" Style="{StaticResource Teamup.Styles.Label.Score.Small}" Grid.Column="2" Content="{Binding AwayScore}" />
            </Grid>
          </Grid>
          <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
              <Setter TargetName="score" Property="Visibility" Value="Visible" />
              <Setter TargetName="date" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
              <Setter TargetName="score" Property="Visibility" Value="Visible" />
              <Setter TargetName="date" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
              <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
              <Setter TargetName="score" Property="Visibility" Value="Visible" />
              <Setter TargetName="date" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
              <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
              <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
              <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
              <Setter TargetName="date" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
              <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
              <Setter TargetName="date" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
          </DataTemplate.Triggers>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="MatchProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Icon="{my:ToolIcon Kind=Eye}">
            <MenuItem.Header>
              <my:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
                <ContentControl Content="{Binding HomeTeam}" ContentTemplate="{StaticResource Teamup.DataTemplates.Team.ShortName.Home}" IsEnabled="False" />
                <TextBlock Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Resource VersusAbbr}" />
                <ContentControl Content="{Binding AwayTeam}" ContentTemplate="{StaticResource Teamup.DataTemplates.Team.ShortName.Away}" IsEnabled="False" />
              </my:SimpleStackPanel>
            </MenuItem.Header>
          </MenuItem>
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
          <MenuItem Header="{my:Resource Update}" Icon="{my:ToolIcon Kind=TimerRefreshOutline}">
            <MenuItem Command="{Binding ResetCommand}" Header="{my:Resource Reset}" Icon="{my:ToolIcon Kind=ProgressClock}" />
            <MenuItem Command="{Binding StartCommand}" Header="{my:Resource Start}" Icon="{my:ToolIcon Kind=ProgressHelper}" />
            <MenuItem Command="{Binding SuspendCommand}" Header="{my:Resource Suspend}" Icon="{my:ToolIcon Kind=ProgressAlert}" />
            <MenuItem Command="{Binding PostponeCommand}" Header="{my:Resource Postpone}" Icon="{my:ToolIcon Kind=ProgressQuestion}" />
            <MenuItem Command="{Binding CancelCommand}" Header="{my:Resource Cancel}" Icon="{my:ToolIcon Kind=ProgressClose}" />
          </MenuItem>
          <MenuItem Command="{Binding InvertTeamsCommand}" Header="{my:Resource InvertTeams}" Icon="{my:ToolIcon Kind=SwapHorizontal}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Header="{my:Resource DoWithdraw}" Icon="{my:ToolIcon Kind=Close}" IsEnabled="{Binding CanUpdateScore}">
            <MenuItem Command="{Binding DoWithdrawForHomeTeamCommand}" Header="{my:Resource HomeTeam}" Icon="{my:ToolIcon Kind=Home}" />
            <MenuItem Command="{Binding DoWithdrawForAwayTeamCommand}" Header="{my:Resource AwayTeam}" Icon="{my:ToolIcon Kind=Plane}" />
          </MenuItem>
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Background="{DynamicResource MyNet.Brushes.Negative}" Command="{Binding RemoveCommand}" Foreground="{my:BrushBinding SelfPath=Background,                                                            Contrast=True}" Header="{my:Resource Remove}" Icon="{my:ToolIcon Kind=Trash}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.MatchControl" TargetType="{x:Type ctrl:MatchControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="10" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="10" />
              <ColumnDefinition Width="70" />
              <ColumnDefinition Width="10" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <!--  Date  -->
            <my:SimpleStackPanel Grid.ColumnSpan="5" HorizontalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Small}">
              <TextBlock Text="{my:Translation Match.Date, RelativeSource={RelativeSource TemplatedParent}, Format=LongDatePattern, Casing=Title}" Typography.Capitals="AllSmallCaps" />
              <Button Style="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" HorizontalAlignment="Center" Command="{Binding Match.OpenParentCommand, RelativeSource={RelativeSource TemplatedParent}}" Content="{Binding Match.Parent.Name, RelativeSource={RelativeSource TemplatedParent}}" Opacity="{StaticResource MyNet.Opacity.Secondary}" />
            </my:SimpleStackPanel>
            <!--  Home  -->
            <ContentControl x:Name="home" Grid.Row="2" HorizontalAlignment="Center" Content="{Binding Match.HomeTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Large}" />
            <ctrl:MatchButton x:Name="button" Grid.Row="2" Grid.Column="2" HorizontalAlignment="Center" Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}">
              <ctrl:MatchButton.ContentTemplate>
                <DataTemplate>
                  <Grid>
                    <Border Background="White" Opacity="0.002" />
                    <!--  IsCancelled  -->
                    <my:SimpleStackPanel x:Name="cancel" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="Collapsed">
                      <my:PackIcon Width="36" Height="36" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Negative}" Kind="ProgressClose" />
                      <TextBlock Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource Cancelled}" />
                    </my:SimpleStackPanel>
                    <!--  IsPostponed  -->
                    <my:SimpleStackPanel x:Name="postponed" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="Collapsed">
                      <my:PackIcon Width="36" Height="36" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Warning}" Kind="ProgressQuestion" />
                      <TextBlock Foreground="{DynamicResource MyNet.Brushes.Warning}" Text="{my:Resource Postponed}" />
                    </my:SimpleStackPanel>
                    <!--  Time  -->
                    <TextBlock x:Name="time" FontFamily="{StaticResource MyNet.Font.Family.Digital}" FontSize="{StaticResource MyNet.Font.Size.Title}" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Translation Date,                                                                          Format=ShortTimePattern,                                                                          Casing=Title}" Visibility="Visible" />
                    <!--  Score  -->
                    <Grid x:Name="score" Visibility="Collapsed">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="6" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <Label x:Name="homeScore" Style="{StaticResource Teamup.Styles.Label.Score.Medium}" Content="{Binding HomeScore}" />
                      <Label x:Name="awayScore" Style="{StaticResource Teamup.Styles.Label.Score.Medium}" Grid.Column="2" Content="{Binding AwayScore}" />
                      <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Row="2" Grid.ColumnSpan="3" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding AfterExtraTime, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                      <my:SimpleStackPanel Grid.Row="3" Grid.ColumnSpan="3" HorizontalAlignment="Center" Opacity="{StaticResource MyNet.Opacity.Secondary}" Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}" Visibility="{Binding AfterShootouts, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                        <Label x:Name="homeShootoutScore" Style="{StaticResource Teamup.Styles.Label.Score.Small}" Grid.Row="2" Content="{Binding HomeShootoutScore}" />
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Text="{my:Resource ShootoutsAbbr}" ToolTip="{my:Resource Shootouts}" />
                        <Label x:Name="awayShootoutScore" Style="{StaticResource Teamup.Styles.Label.Score.Small}" Grid.Row="2" Grid.Column="2" Content="{Binding AwayShootoutScore}" />
                      </my:SimpleStackPanel>
                      <!--  Home is withdrawn  -->
                      <TextBlock Grid.Row="3" Grid.Column="0" HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Caption}" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                                           Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding HomeIsWithdrawn, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                      <!--  Away is withdrawn  -->
                      <TextBlock Grid.Row="3" Grid.Column="2" HorizontalAlignment="Center" FontSize="{StaticResource MyNet.Font.Size.Caption}" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                                           Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding AwayIsWithdrawn, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />
                    </Grid>
                  </Grid>
                  <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="homeShootoutScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="awayShootoutScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="homeShootoutScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="awayShootoutScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
                      <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
                      <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                  </DataTemplate.Triggers>
                </DataTemplate>
              </ctrl:MatchButton.ContentTemplate>
            </ctrl:MatchButton>
            <!--  Away  -->
            <ContentControl x:Name="away" Grid.Row="2" Grid.Column="4" HorizontalAlignment="Center" Content="{Binding Match.AwayTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Large}" />
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Match.HomeHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Match.AwayHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <Trigger Property="EnableContextMenu" Value="False">
              <Setter TargetName="button" Property="ContextMenu" Value="{x:Null}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.MatchControl.Medium" BasedOn="{StaticResource Teamup.Styles.MatchControl}" TargetType="{x:Type ctrl:MatchControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
          <Grid Height="35">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="40" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="50" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="40" />
            </Grid.ColumnDefinitions>
            <!--  Home Rank  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="0" Margin="{StaticResource MyNet.Margins.Medium.Right}" Text="{Binding Match.HomeRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:IntegerToOrdinalizeConverter.Default}}" Visibility="{Binding Match.HomeRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:EqualityToVisibilityConverter.CollapsedIfEqual}, ConverterParameter=0}" />
            <!--  Home  -->
            <ContentControl x:Name="home" Grid.Column="1" HorizontalAlignment="Right" Content="{Binding Match.HomeTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Medium.Home}" />
            <!--  Home is withdrawn  -->
            <TextBlock Grid.Column="3" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                       Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.HomeIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Home won after extra time  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="3" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.HomeHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Home won after shootouts  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="3" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.HomeHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <ctrl:MatchButton x:Name="button" Grid.Column="4" HorizontalAlignment="Center" Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}">
              <ctrl:MatchButton.ContentTemplate>
                <DataTemplate>
                  <Grid>
                    <Border Background="White" Opacity="0.002" />
                    <!--  IsCancelled  -->
                    <my:PackIcon x:Name="cancel" Width="24" Height="24" Foreground="{DynamicResource MyNet.Brushes.Negative}" Kind="ProgressClose" ToolTip="{my:Resource Cancelled}" Visibility="Collapsed" />
                    <!--  IsPostponed  -->
                    <my:PackIcon x:Name="postponed" Width="24" Height="24" Foreground="{DynamicResource MyNet.Brushes.Warning}" Kind="ProgressQuestion" ToolTip="{my:Resource Postponed}" Visibility="Collapsed" />
                    <!--  Time  -->
                    <TextBlock x:Name="time" Style="{StaticResource MyNet.Styles.TextBlock.Caption}" FontFamily="{StaticResource MyNet.Font.Family.Digital}" Text="{my:Translation Date,                                                                          Format=ShortTimeFormat,                                                                          Casing=Title}" Visibility="Visible" />
                    <!--  Score  -->
                    <Grid x:Name="score" Visibility="Collapsed">
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="4" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <Label x:Name="homeScore" Style="{StaticResource Teamup.Styles.Label.Score.Small}" Content="{Binding HomeScore}" />
                      <Label x:Name="awayScore" Style="{StaticResource Teamup.Styles.Label.Score.Small}" Grid.Column="2" Content="{Binding AwayScore}" />
                    </Grid>
                  </Grid>
                  <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Played}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.InProgress}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Suspended}">
                      <Setter TargetName="score" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                      <Setter TargetName="homeScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="awayScore" Property="Background" Value="{DynamicResource Teamup.Brushes.Match.State.Suspended}" />
                      <Setter TargetName="score" Property="ToolTip" Value="{my:Resource MatchStateSuspended}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Cancelled}">
                      <Setter TargetName="cancel" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding State}" Value="{x:Static enums:MatchState.Postponed}">
                      <Setter TargetName="postponed" Property="Visibility" Value="Visible" />
                      <Setter TargetName="time" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                  </DataTemplate.Triggers>
                </DataTemplate>
              </ctrl:MatchButton.ContentTemplate>
            </ctrl:MatchButton>
            <!--  Away won after extra time  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="5" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.AwayHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away won after shootouts  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="5" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.AwayHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away is withdrawn  -->
            <TextBlock Grid.Column="5" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                       Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.AwayIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away  -->
            <ContentControl x:Name="away" Grid.Column="7" HorizontalAlignment="Left" Content="{Binding Match.AwayTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Medium.Away}" />
            <!--  Away Rank  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="8" Margin="{StaticResource MyNet.Margins.Medium.Left}" Text="{Binding Match.AwayRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:IntegerToOrdinalizeConverter.Default}}" Visibility="{Binding Match.AwayRank, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:EqualityToVisibilityConverter.CollapsedIfEqual}, ConverterParameter=0}" />
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Match.HomeHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Match.AwayHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <Trigger Property="EnableContextMenu" Value="False">
              <Setter TargetName="button" Property="ContextMenu" Value="{x:Null}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.MatchControl.Small" BasedOn="{StaticResource Teamup.Styles.MatchControl}" TargetType="{x:Type ctrl:MatchControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:MatchControl}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="50" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="15" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <!--  Home  -->
            <ContentControl x:Name="home" Grid.Column="0" HorizontalAlignment="Right" Content="{Binding Match.HomeTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Small.Home}" />
            <!--  Home is withdrawn  -->
            <TextBlock Grid.Column="2" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                       Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.HomeIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Home won after extra time  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="2" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.HomeHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Home won after shootouts  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="2" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.HomeHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Score  -->
            <ctrl:MatchButton x:Name="button" Grid.Column="3" HorizontalAlignment="Center" Item="{Binding Match, RelativeSource={RelativeSource TemplatedParent}}" />
            <!--  Away won after extra time  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="4" HorizontalAlignment="Center" Text="{my:Resource AfterExtraTimeAbbr2}" ToolTip="{my:Resource AfterExtraTime}" Visibility="{Binding Match.AwayHasWonAfterExtraTime, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away won after shootouts  -->
            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" Grid.Column="4" HorizontalAlignment="Center" Text="{my:Resource ShootoutsAbbr2}" ToolTip="{my:Resource Shootouts}" Visibility="{Binding Match.AwayHasWonAfterShootouts, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away is withdrawn  -->
            <TextBlock Grid.Column="4" HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.Negative}" Text="{my:Resource WithdrawAbbr,                                                       Casing=AllCaps}" ToolTip="{my:Resource Withdraw}" Visibility="{Binding Match.AwayIsWithdrawn, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
            <!--  Away  -->
            <ContentControl x:Name="away" Grid.Column="6" HorizontalAlignment="Left" Content="{Binding Match.AwayTeam, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Small.Away}" />
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=Match.HomeHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="away" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Match.AwayHasWon, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="home" Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
            </DataTrigger>
            <Trigger Property="EnableContextMenu" Value="False">
              <Setter TargetName="button" Property="ContextMenu" Value="{x:Null}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.PlayerButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:PlayerButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <StackPanel Orientation="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}}">
            <DockPanel HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}">
              <TextBlock Padding="0" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" DockPanel.Dock="Left" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.LastName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}, Converter={x:Static my:StringConverter.ToUpper}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
              <TextBlock Padding="{StaticResource MyNet.Margins.Small.Horizontal}" Visibility="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}, Converter={x:Static my:EnumToVisibilityConverter.CollapsedIfNotAny}, ConverterParameter={x:Static Orientation.Horizontal}}" />
            </DockPanel>
            <TextBlock Padding="0" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Text="{Binding Item.FirstName, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:PlayerButton}}, UpdateSourceTrigger=PropertyChanged}" TextWrapping="NoWrap" />
          </StackPanel>
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="PlayerProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Header="{Binding FullName}">
            <MenuItem.Icon>
              <Grid>
                <my:PictureControl Style="{StaticResource Teamup.Styles.PictureControl.Player.Small}" DataContext="{Binding Data, Source={StaticResource PlayerProxy}}" />
              </Grid>
            </MenuItem.Icon>
          </MenuItem>
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
          <MenuItem Header="{my:Resource Add}" Icon="{my:ToolIcon Kind=PlusThick}">
            <MenuItem Command="{Binding AddInjuryCommand}" Header="{my:Resource AnInjury}" Icon="{my:ToolIcon Kind=Ambulance}" />
            <MenuItem Header="{my:Resource AnAbsence}" Icon="{my:ToolIcon Kind=AccountOff}">
              <MenuItem Command="{Binding AddAbsenceHolidaysCommand}" Header="{my:Resource InHolidays}" Icon="{my:ToolIcon Kind=Beach}" />
              <MenuItem Command="{Binding AddAbsenceInSelectionCommand}" Header="{my:Resource InSelection}" Icon="{my:ToolIcon Kind=Star}" />
              <MenuItem Command="{Binding AddAbsenceOtherCommand}" Header="{my:Resource Other}" Icon="{my:ToolIcon Kind=QuestionMark}" />
            </MenuItem>
          </MenuItem>
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" Visibility="{Binding OtherTeams.Count, Converter={x:Static my:CountToVisibilityConverter.CollapsedIfNotAny}}" />
          <MenuItem my:ItemsControlAssist.SortingProperty="Order" Header="{my:Resource MovingTo}" Icon="{my:ToolIcon Kind=PersonArrowLeft}" ItemsSource="{Binding OtherTeams}" Visibility="{Binding OtherTeams.Count, Converter={x:Static my:CountToVisibilityConverter.CollapsedIfNotAny}}">
            <MenuItem.ItemContainerStyle>
              <Style BasedOn="{StaticResource MyNet.Styles.MenuItem}" TargetType="MenuItem">
                <Setter Property="Command" Value="{Binding DataContext.MoveCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                <Setter Property="CommandParameter" Value="{Binding}" />
              </Style>
            </MenuItem.ItemContainerStyle>
            <MenuItem.ItemTemplate>
              <DataTemplate>
                <my:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
                  <TextBlock Text="{my:Resource MovingPlayerInTeam}" />
                  <TextBlock Text="{Binding Name}" />
                </my:SimpleStackPanel>
              </DataTemplate>
            </MenuItem.ItemTemplate>
          </MenuItem>
          <MenuItem Command="{Binding DataContext.MoveCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" CommandParameter="{x:Null}" Header="{my:Resource GoOut}" Icon="{my:ToolIcon Kind=PersonArrowRight}" />
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" Visibility="{Binding Emails.Count, Converter={x:Static my:CountToVisibilityConverter.CollapsedIfNotAny}}" />
          <MenuItem Command="{Binding OpenMailClientCommand}" Header="{my:Resource SendMail}" Icon="{my:ToolIcon Kind=Email}" Visibility="{Binding Emails.Count, Converter={x:Static my:CountToVisibilityConverter.CollapsedIfNotOne}}" />
          <MenuItem my:ItemsControlAssist.SortDirection="Descending" my:ItemsControlAssist.SortingProperty="Default" Header="{my:Resource SendMail}" Icon="{my:ToolIcon Kind=Email}" ItemsSource="{Binding Emails}" Visibility="{Binding Emails.Count, Converter={x:Static my:CountToVisibilityConverter.CollapsedIfNotMany}}">
            <MenuItem.ItemContainerStyle>
              <Style BasedOn="{StaticResource MyNet.Styles.MenuItem}" TargetType="MenuItem">
                <Setter Property="Command" Value="{Binding DataContext.OpenEmailInMailClientCommand, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}" />
                <Setter Property="CommandParameter" Value="{Binding Value}" />
                <Style.Triggers>
                  <DataTrigger Binding="{Binding Default}" Value="True">
                    <Setter Property="Icon" Value="{my:ToolIcon Kind=Check}" />
                    <Setter Property="my:MenuAssist.IconTemplate">
                      <Setter.Value>
                        <DataTemplate>
                          <my:PackIcon Width="18" Height="18" Kind="Check" />
                        </DataTemplate>
                      </Setter.Value>
                    </Setter>
                    <Setter Property="ToolTip" Value="{my:Resource Default}" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </MenuItem.ItemContainerStyle>
            <MenuItem.ItemTemplate>
              <DataTemplate>
                <StackPanel>
                  <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}" FontStyle="Italic" Text="{Binding Label}" Visibility="{Binding Label, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}}" />
                  <TextBlock Text="{Binding Value}" />
                </StackPanel>
              </DataTemplate>
            </MenuItem.ItemTemplate>
          </MenuItem>
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Background="{DynamicResource MyNet.Brushes.Negative}" Command="{Binding RemoveCommand}" Foreground="{my:BrushBinding SelfPath=Background,                                                            Contrast=True}" Header="{my:Resource Remove}" Icon="{my:ToolIcon Kind=Trash}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.PlayerGauge" TargetType="{x:Type ctrl:PlayerGauge}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:PlayerGauge}">
          <Grid>
            <StackPanel>
              <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" HorizontalAlignment="Center" FontWeight="{StaticResource MyNet.Font.Weight.Header}" Foreground="{TemplateBinding BorderBrush}" Text="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" />
              <Grid>
                <my:Gauge Width="65" Height="65" GaugeBackground="{DynamicResource MyNet.Brushes.Control.Background.Secondary}" Foreground="Transparent" GaugeActiveFill="{TemplateBinding BorderBrush}" InnerRadius="23" LabelFormatter="{x:Null}" Uses360Mode="True" Value="{my:NotNullableBinding Value,                                                                         RelativeSource={RelativeSource TemplatedParent}}" From="{my:NotNullableBinding From,                                                                        RelativeSource={RelativeSource TemplatedParent}}" To="{my:NotNullableBinding To,                                                                      RelativeSource={RelativeSource TemplatedParent}}" />
                <my:PictureControl Style="{StaticResource Teamup.Styles.PictureControl.Player.Rounded.Medium}" HorizontalAlignment="Center" VerticalAlignment="Center" DataContext="{Binding Player, RelativeSource={RelativeSource TemplatedParent}}" />
              </Grid>
              <ctrl:PlayerButton Margin="{StaticResource MyNet.Margins.Medium.Top}" HorizontalAlignment="Center" HorizontalContentAlignment="Center" CommandParameter="{TemplateBinding Tab}" Item="{TemplateBinding Player}" />
            </StackPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="Teamup.Styles.PlayerGauge.Rating" BasedOn="{StaticResource Teamup.Styles.PlayerGauge}" TargetType="{x:Type ctrl:PlayerGauge}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:PlayerGauge}">
          <Grid>
            <StackPanel>
              <TextBlock x:Name="TextValue" Style="{StaticResource MyNet.Styles.TextBlock.Principal}" Margin="{StaticResource MyNet.Margins.Medium.Bottom}" HorizontalAlignment="Center" Foreground="{TemplateBinding BorderBrush}" Text="{my:Translation Value,                                                              RelativeSource={RelativeSource TemplatedParent},                                                              Format=N2}" />
              <Grid>
                <my:Gauge Style="{StaticResource Teamup.Styles.Gauge.Rating}" Width="47" Height="48" Foreground="Transparent" GaugeBackground="{DynamicResource MyNet.Brushes.Control.Background.Secondary}" InnerRadius="26" LabelFormatter="{x:Null}" Value="{my:NotNullableBinding Value,                                                                         RelativeSource={RelativeSource TemplatedParent}}" />
                <my:PictureControl Style="{StaticResource Teamup.Styles.PictureControl.Player.Rounded.Medium}" HorizontalAlignment="Center" VerticalAlignment="Center" DataContext="{Binding Player, RelativeSource={RelativeSource TemplatedParent}}" />
              </Grid>
              <ctrl:PlayerButton Margin="{StaticResource MyNet.Margins.Medium.Top}" HorizontalAlignment="Center" HorizontalContentAlignment="Center" CommandParameter="{TemplateBinding Tab}" Item="{TemplateBinding Player}" />
            </StackPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <DataTrigger Binding="{Binding Value, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max10}}" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource Teamup.Brushes.Rating.8To10}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Value, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max8}}" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource Teamup.Brushes.Rating.6To8}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Value, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max6}}" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource Teamup.Brushes.Rating.45To6}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Value, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max45}}" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource Teamup.Brushes.Rating.35To45}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Value, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max35}}" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource Teamup.Brushes.Rating.2To35}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Value, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource Self}, Converter={x:Static my:ComparaisonToBooleanConverter.IsLessThan}, ConverterParameter={StaticResource Teamup.Rating.Max2}}" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource Teamup.Brushes.Rating.0To2}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="Teamup.Styles.TeamButton" BasedOn="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}" TargetType="{x:Type ctrl:TeamButton}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Command" Value="{Binding Item.OpenCommand, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ToolTip" Value="{my:Resource SeeItem}" />
    <Setter Property="Orientation" Value="Vertical" />
    <Setter Property="Padding" Value="3 0 3 1" />
    <Setter Property="Content" Value="{Binding Item, RelativeSource={RelativeSource Self}}" />
    <Setter Property="ContentTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu">
      <Setter.Value>
        <ContextMenu DataContext="{Binding PlacementTarget.Item, RelativeSource={RelativeSource Self}}">
          <ContextMenu.Resources>
            <my:BindingProxy x:Key="TeamProxy" Data="{Binding}" />
          </ContextMenu.Resources>
          <MenuItem Command="{Binding OpenCommand}" Header="{Binding Name}">
            <MenuItem.Icon>
              <Grid>
                <my:PictureControl Style="{StaticResource Teamup.Styles.PictureControl.Team}" Margin="-5 0 0 0" DataContext="{Binding Data, Source={StaticResource TeamProxy}}" />
              </Grid>
            </MenuItem.Icon>
          </MenuItem>
          <Separator Style="{StaticResource MyNet.Styles.Separator.Horizontal}" />
          <MenuItem Command="{Binding EditCommand}" Header="{my:Resource Edit}" Icon="{my:ToolIcon Kind=Edit}" />
        </ContextMenu>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Default}" />
      </Trigger>
      <DataTrigger Binding="{Binding Item.IsMyTeam, RelativeSource={RelativeSource Self}}" Value="True">
        <Setter Property="FontWeight" Value="Bold" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
</ResourceDictionary>