<UserControl x:Class="MyClub.Teamup.Wpf.Views.CommunicationPage.HistoryView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain"
             xmlns:enums2="clr-namespace:MyClub.Teamup.Domain.Enums;assembly=MyClub.Teamup.Domain"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:my="http://mynet.com/xaml/themes"
             xmlns:vm="clr-namespace:MyClub.Teamup.Wpf.ViewModels.CommunicationPage"
             d:DataContext="{d:DesignInstance Type=vm:HistoryViewModel}"
             d:DesignHeight="450"
             d:DesignWidth="800"
             mc:Ignorable="d">
    <UserControl.Resources>
        <my:BindingProxy x:Key="HistoryProxy" Data="{Binding}" />

        <Style x:Key="StateToggleButton" BasedOn="{StaticResource MyNet.Styles.ToggleButton.Action.Primary}" TargetType="{x:Type ToggleButton}">
            <Setter Property="Content" Value="{Binding Item}" />
            <Setter Property="IsChecked" Value="{Binding IsSelected}" />
            <Setter Property="ToolTip" Value="{my:Translation Item.State}" />
            <Setter Property="Height" Value="35" />
            <Setter Property="Width" Value="35" />
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <my:PackIcon x:Name="Icon" Width="20" Height="20" />
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding State, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static enums2:SendingState.Draft}}" Value="True">
                                <Setter TargetName="Icon" Property="Kind" Value="ProgressUpload" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding State, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static enums2:SendingState.Failed}}" Value="True">
                                <Setter TargetName="Icon" Property="Kind" Value="ProgressClose" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding State, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static enums2:SendingState.InProgress}}" Value="True">
                                <Setter TargetName="Icon" Property="Kind" Value="ProgressClock" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding State, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static enums2:SendingState.Success}}" Value="True">
                                <Setter TargetName="Icon" Property="Kind" Value="ProgressTick" />
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.White}" />
                </Trigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSelected}" Value="False" />
                        <Condition Binding="{Binding Item.State, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static enums2:SendingState.Draft}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Email.Draft}" />
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSelected}" Value="False" />
                        <Condition Binding="{Binding Item.State, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static enums2:SendingState.Failed}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Negative}" />
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSelected}" Value="False" />
                        <Condition Binding="{Binding Item.State, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static enums2:SendingState.InProgress}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Information}" />
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSelected}" Value="False" />
                        <Condition Binding="{Binding Item.State, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static enums2:SendingState.Success}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.Positive}" />
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>

    <!--  Shortcuts  -->
    <my:InputAssist.InputBindings>
        <InputBindingCollection>
            <KeyBinding Key="Delete" Command="{Binding Data.RemoveSelectedItemsCommand, Source={StaticResource HistoryProxy}}" />
            <KeyBinding Key="Return" Command="{Binding Data.OpenSelectedItemCommand, Source={StaticResource HistoryProxy}}" />
        </InputBindingCollection>
    </my:InputAssist.InputBindings>

    <DockPanel>

        <my:CommandsBar Margin="{StaticResource MyNet.Margins.Medium}" DockPanel.Dock="Top">

            <my:CommandsBar.RightCommands>
                <ContentControl Content="{Binding}" ContentTemplate="{StaticResource Teamup.DataTemplates.List.Count.Selectable}" />
            </my:CommandsBar.RightCommands>

            <my:SelectionCommandsBar SelectedCount="{Binding SelectedWrappers.Count}" UnselectAllCommand="{Binding ClearSelectionCommand}">
                <Button Style="{StaticResource MyNet.Styles.Button.Remove}" Command="{Binding RemoveSelectedItemsCommand}" />
            </my:SelectionCommandsBar>

        </my:CommandsBar>

        <my:GhostControl GhostTemplate="{StaticResource Teamup.DataTemplates.Ghost.NoData.Medium}" ShowGhost="{Binding Wrappers.Count, Converter={x:Static my:CountToBooleanConverter.NotAny}}">
            <ListBox Style="{StaticResource MyNet.Styles.ListBox}"
                     HorizontalContentAlignment="Stretch"
                     my:ItemsControlAssist.SortDirection="Descending"
                     my:ItemsControlAssist.SortingProperty="Item.Date"
                     ItemsSource="{Binding Wrappers}"
                     SelectionMode="Extended">
                <ListBox.ItemContainerStyle>
                    <Style BasedOn="{StaticResource MyNet.Styles.ListBoxItem}" TargetType="{x:Type ListBoxItem}">
                        <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                        <Setter Property="IsEnabled" Value="{Binding IsSelectable}" />
                        <Setter Property="Height" Value="70" />
                        <Setter Property="Padding" Value="{StaticResource MyNet.Margins.Medium}" />
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="10" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <ToggleButton Style="{StaticResource StateToggleButton}" Grid.RowSpan="5" Grid.Column="0" />

                            <Grid Grid.Column="2">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="5" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="2" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <TextBlock Grid.Row="0" Opacity="{StaticResource MyNet.Opacity.Secondary}" Text="{my:Translation Item.Date, Format='dd MMM yyyy - HH:mm', Casing=Title}" />
                                <TextBlock Grid.Row="2" Text="{Binding Item.Subject}" />
                                <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                           Grid.Row="4"
                                           Grid.Column="2"
                                           Text="{Binding Item.Body, Converter={x:Static my:HtmlToPlainTextConverter.Default}}" />
                            </Grid>

                            <ToolBar x:Name="ToolBar"
                                     Style="{StaticResource MyNet.Styles.ToolBar.Tools}"
                                     Grid.Column="2"
                                     Padding="0"
                                     HorizontalAlignment="Right"
                                     VerticalAlignment="Top"
                                     Visibility="Hidden">
                                <Button Command="{Binding Data.OpenCommand, Source={StaticResource HistoryProxy}}"
                                        CommandParameter="{Binding Item}"
                                        Content="{my:ToolIcon Kind=Eye}"
                                        ToolTip="{my:Resource Open}" />
                                <Button Command="{Binding Data.RemoveCommand, Source={StaticResource HistoryProxy}}"
                                        CommandParameter="{Binding Item}"
                                        Content="{my:ToolIcon Kind=Trash}"
                                        Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                        ToolTip="{my:Resource Remove}" />
                            </ToolBar>
                        </Grid>

                        <DataTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True" />
                                    <Condition Binding="{Binding Data.SelectedWrappers.Count, Source={StaticResource HistoryProxy}, Converter={x:Static my:CountToBooleanConverter.NotMany}}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="ToolBar" Property="Visibility" Value="Visible" />
                            </MultiDataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </my:GhostControl>
    </DockPanel>
</UserControl>
