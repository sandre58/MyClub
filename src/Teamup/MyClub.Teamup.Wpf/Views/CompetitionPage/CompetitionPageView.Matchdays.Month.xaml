<UserControl x:Class="MyClub.Teamup.Wpf.Views.CompetitionPage.CompetitionPageMatchdaysMonthView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:c="clr-namespace:MyClub.Teamup.Wpf.Converters"
             xmlns:ctrl="clr-namespace:MyClub.Teamup.Wpf.Controls"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:my="http://mynet.com/xaml/themes"
             xmlns:selectors="clr-namespace:MyClub.Teamup.Wpf.Selectors"
             xmlns:v="clr-namespace:MyClub.Teamup.Wpf.Views.CompetitionPage"
             xmlns:vm="clr-namespace:MyClub.Teamup.Wpf.ViewModels.CompetitionPage"
             d:DataContext="{d:DesignInstance Type=vm:CompetitionPageMatchdaysViewModel}"
             my:InputAssist.PropagateInWindow="True"
             mc:Ignorable="d">
    <UserControl.Resources>
        <my:BindingProxy x:Key="Proxy" Data="{Binding}" />

        <Style x:Key="Teamup.Styles.CalendarAppointment.Matchday" BasedOn="{StaticResource MyNet.Styles.CalendarAppointment.Alternate.DaysByMonth}" TargetType="{x:Type my:CalendarAppointment}">
            <Setter Property="IsSelected" Value="{Binding IsSelected}" />
            <Setter Property="Height" Value="Auto" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="Background" Value="{my:BrushBinding Item.Color, Mode=OneWay, Opacity={StaticResource MyNet.Opacity.Default}}" />
            <Setter Property="Foreground" Value="{my:BrushBinding SelfPath=Background, Contrast=True}" />
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>

                        <Grid>

                            <!--  Is Postponed  -->
                            <Path HorizontalAlignment="Right"
                                  VerticalAlignment="Top"
                                  Data="M 20 0 V -20 H 0 Z"
                                  Fill="{DynamicResource MyNet.Brushes.Warning}"
                                  Stretch="Uniform"
                                  ToolTip="{my:Resource Postponed}"
                                  Visibility="{Binding Item.IsPostponed, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}" />

                            <DockPanel Margin="{StaticResource MyNet.Margins.Default}">

                                <!--  ToolBar  -->
                                <ContentControl x:Name="ToolBar"
                                                HorizontalAlignment="Right"
                                                Content="{Binding Item}"
                                                DockPanel.Dock="Right"
                                                Visibility="Hidden">
                                    <ContentControl.ContentTemplateSelector>
                                        <selectors:RoundDataTemplateSelector>
                                            <selectors:RoundDataTemplateSelector.MatchdayTemplate>
                                                <DataTemplate>
                                                    <v:MatchdayToolBar x:Name="ToolBar" Style="{StaticResource MyNet.Styles.ToolBar.Tools}" RemoveCommand="{Binding Data.RemoveCommand, Source={StaticResource Proxy}}" />
                                                </DataTemplate>
                                            </selectors:RoundDataTemplateSelector.MatchdayTemplate>
                                            <selectors:RoundDataTemplateSelector.KnockoutTemplate>
                                                <DataTemplate>
                                                    <v:KnockoutToolBar x:Name="ToolBar" Style="{StaticResource MyNet.Styles.ToolBar.Tools}" RemoveCommand="{Binding Data.RemoveCommand, Source={StaticResource Proxy}}" />
                                                </DataTemplate>
                                            </selectors:RoundDataTemplateSelector.KnockoutTemplate>
                                        </selectors:RoundDataTemplateSelector>
                                    </ContentControl.ContentTemplateSelector>
                                </ContentControl>

                                <DockPanel>

                                    <Grid Width="25">
                                        <CheckBox x:Name="Selection"
                                                  Style="{StaticResource MyNet.Styles.CheckBox.Circle}"
                                                  HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  BorderBrush="{my:BrushBinding SelfPath=(TextElement.Foreground),
                                                                                Opacity={StaticResource MyNet.Opacity.Secondary}}"
                                                  IsChecked="{Binding IsSelected}"
                                                  Visibility="Hidden" />
                                        <my:PackIcon x:Name="Icon"
                                                     Width="22"
                                                     Height="22"
                                                     HorizontalAlignment="Center"
                                                     VerticalAlignment="Center"
                                                     Kind="Soccer" />
                                    </Grid>

                                    <my:SimpleStackPanel Margin="{StaticResource MyNet.Margins.Medium.Left}"
                                                         VerticalAlignment="Center"
                                                         Orientation="Horizontal"
                                                         Spacing="{StaticResource MyNet.Margin.Default}">

                                        <ContentControl Content="{Binding Item}" IsEnabled="{Binding Data.SelectedWrappers.Count, Source={StaticResource Proxy}, Converter={x:Static my:CountToBooleanConverter.NotMany}}">
                                            <ContentControl.ContentTemplateSelector>
                                                <selectors:RoundDataTemplateSelector>
                                                    <selectors:RoundDataTemplateSelector.MatchdayTemplate>
                                                        <DataTemplate>
                                                            <ctrl:MatchdayButton ContextMenu="{x:Null}" Item="{Binding}" />
                                                        </DataTemplate>
                                                    </selectors:RoundDataTemplateSelector.MatchdayTemplate>
                                                    <selectors:RoundDataTemplateSelector.KnockoutTemplate>
                                                        <DataTemplate>
                                                            <ctrl:KnockoutButton ContextMenu="{x:Null}" Item="{Binding}" />
                                                        </DataTemplate>
                                                    </selectors:RoundDataTemplateSelector.KnockoutTemplate>
                                                </selectors:RoundDataTemplateSelector>
                                            </ContentControl.ContentTemplateSelector>
                                        </ContentControl>

                                        <my:DropDownButton Style="{StaticResource MyNet.Styles.DropDownButton.Icon.ToolTip}" PlacementMode="BottomAndAlignCentres" Visibility="{Binding Item.AllMatches.Count, Converter={x:Static my:CountToVisibilityConverter.CollapsedIfNotAny}}">
                                            <my:DropDownButton.ToggleContent>
                                                <my:Icon Kind="InfoCircle" />
                                            </my:DropDownButton.ToggleContent>
                                            <ItemsControl Style="{StaticResource MyNet.Styles.ItemsControl}"
                                                          Width="400"
                                                          AlternationCount="2"
                                                          ItemsSource="{Binding Item.AllMatches}">
                                                <ItemsControl.ItemTemplate>
                                                    <DataTemplate>
                                                        <Border x:Name="border" Padding="{StaticResource MyNet.Margins.Small}">
                                                            <ctrl:MatchControl Style="{StaticResource Teamup.Styles.MatchControl.Small}" EnableContextMenu="False" Match="{Binding}" />
                                                        </Border>
                                                        <DataTemplate.Triggers>
                                                            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                                                                <Setter TargetName="border" Property="Background" Value="{my:BrushBinding InheritPath=(TextElement.Foreground), Opacity=0.03}" />
                                                            </Trigger>
                                                        </DataTemplate.Triggers>
                                                    </DataTemplate>
                                                </ItemsControl.ItemTemplate>
                                            </ItemsControl>
                                        </my:DropDownButton>
                                    </my:SimpleStackPanel>

                                </DockPanel>
                            </DockPanel>
                        </Grid>

                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding Item.IsPostponed}" Value="True">
                                <Setter TargetName="Icon" Property="Kind" Value="ProgressQuestion" />
                                <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource MyNet.Brushes.Warning}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type my:CalendarAppointment}}}" Value="True">
                                <Setter TargetName="Selection" Property="Visibility" Value="Visible" />
                                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                <Setter TargetName="Selection" Property="Visibility" Value="Visible" />
                                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True" />
                                    <Condition Binding="{Binding Data.SelectedWrappers.Count, Source={StaticResource Proxy}, Converter={x:Static my:CountToBooleanConverter.NotMany}}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="ToolBar" Property="Visibility" Value="Visible" />
                            </MultiDataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="Teamup.Styles.CalendarItem.Matchday" BasedOn="{StaticResource MyNet.Styles.CalendarItem.DaysByMonth}" TargetType="{x:Type my:CalendarItem}">
            <Setter Property="my:HeaderAssist.Foreground" Value="{DynamicResource MyNet.Brushes.Accent}" />
            <Setter Property="ContextMenu">
                <Setter.Value>
                    <ContextMenu>
                        <MenuItem Command="{Binding Data.AddMultipleCommand, Source={StaticResource Proxy}}"
                                  Header="{my:Resource Add}"
                                  Icon="{my:ToolIcon Kind=Plus}"
                                  InputGestureText="Ctrl+Shift+N" />
                        <MenuItem Command="{Binding Data.DuplicateCommand, Source={StaticResource Proxy}}"
                                  Header="{my:Resource Duplicate}"
                                  Icon="{my:ToolIcon Kind=ContentDuplicate}"
                                  InputGestureText="Ctrl+D" />
                        <MenuItem Command="{Binding Data.RemoveMatchdaysInSelectedDatesCommand, Source={StaticResource Proxy}}"
                                  Header="{my:Resource Remove}"
                                  Icon="{my:ToolIcon Kind=Trash}"
                                  InputGestureText="Ctrl+Suppr" />
                        <Separator />
                        <MenuItem Command="{Binding Data.SelectMatchdaysInSelectedDatesCommand, Source={StaticResource Proxy}}" Header="{my:Resource Select}" Icon="{my:ToolIcon Kind=CheckboxesMarked}" />
                        <MenuItem Command="{Binding Data.UnselectMatchdaysInSelectedDatesCommand, Source={StaticResource Proxy}}" Header="{my:Resource Unselect}" Icon="{my:ToolIcon Kind=CheckboxesBlank}" />
                    </ContextMenu>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Data.ShowHolidays, Source={StaticResource Proxy}}" Value="True">
                    <Setter Property="Background">
                        <Setter.Value>
                            <MultiBinding Converter="{x:Static c:DateToPeriodColorConverter.Brush}" ConverterParameter="0.25">
                                <Binding Path="" />
                                <Binding Path="Data.Holidays" Source="{StaticResource Proxy}" UpdateSourceTrigger="PropertyChanged" />
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ToolTip">
                        <Setter.Value>
                            <MultiBinding Converter="{x:Static c:DateToPeriodColorConverter.Label}">
                                <Binding Path="" />
                                <Binding Path="Data.Holidays" Source="{StaticResource Proxy}" UpdateSourceTrigger="PropertyChanged" />
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <Trigger Property="IsNow" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource MyNet.Brushes.Accent}" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>

    <my:Card Margin="2" Padding="0" Background="{DynamicResource MyNet.Brushes.Application.Background.Secondary}">
        <my:CalendarDaysByMonth my:HeaderAssist.Background="{DynamicResource MyNet.Brushes.Control.Background}"
                                AddCommand="{Binding AddToDateCommand}"
                                Appointments="{Binding Wrappers}"
                                BorderThickness="0"
                                CalendarItemStyle="{StaticResource Teamup.Styles.CalendarItem.Matchday}"
                                DatesSelectionMode="MultipleRange"
                                DisplayDate="{Binding Display.Mode.DisplayDate}"
                                FirstDayOfWeek="{Binding Display.Mode.FirstDayOfWeek}"
                                ItemContainerStyle="{StaticResource Teamup.Styles.CalendarAppointment.Matchday}"
                                MaximumDate="{Binding EndDate}"
                                MinimumDate="{Binding StartDate}"
                                ScrollViewer.VerticalScrollBarVisibility="Auto"
                                SelectedDates="{Binding SelectedDates, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                SelectionMode="Extended"
                                ShowHeader="False" />
    </my:Card>
</UserControl>
