<UserControl x:Class="MyClub.Teamup.Wpf.Views.Edition.MatchEditionGeneralView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:my="http://mynet.com/xaml/themes"
             xmlns:v="clr-namespace:MyClub.Teamup.Wpf.Views.Edition"
             xmlns:vm="clr-namespace:MyClub.Teamup.Wpf.ViewModels.Edition"
             d:DataContext="{d:DesignInstance Type=vm:MatchEditionViewModel}"
             mc:Ignorable="d">
    <UserControl.Resources>
        <my:BindingProxy x:Key="Proxy" Data="{Binding}" />
    </UserControl.Resources>

    <my:SimpleStackPanel>

        <my:SimpleStackPanel Orientation="Horizontal">

            <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Edition}" Header="{my:MediumIcon Kind=CalendarOutline}">
                <my:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Large}">

                    <!--  Date  -->
                    <my:SimpleStackPanel Orientation="Horizontal">
                        <my:SimpleStackPanel.Style>
                            <Style BasedOn="{StaticResource MyNet.Styles.SimpleStackPanel}" TargetType="{x:Type my:SimpleStackPanel}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ShowPostponedDate}" Value="True">
                                        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </my:SimpleStackPanel.Style>
                        <DatePicker my:HintAssist.Hint="{my:Resource Date}" SelectedDate="{Binding Date, UpdateSourceTrigger=PropertyChanged}" />
                        <my:TimePicker my:HintAssist.Hint="{my:Resource Time}" SelectedTime="{my:Time Time}" />
                    </my:SimpleStackPanel>

                    <ToggleButton Style="{StaticResource MyNet.Styles.ToggleButton.Icon}"
                                  my:ThemeAssist.IsCheckedForeground="{DynamicResource MyNet.Brushes.Warning}"
                                  Content="{my:MediumIcon Kind=CalendarSync}"
                                  IsChecked="{Binding ShowPostponedDate}"
                                  ToolTip="{my:Resource PostponedDate}" />

                    <!--  Postponed Date  -->
                    <my:SimpleStackPanel Orientation="Horizontal" Visibility="{Binding ShowPostponedDate, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                        <DatePicker my:HintAssist.Hint="{my:Resource PostponedDate}" SelectedDate="{my:NullableBinding PostponedDate, UpdateSourceTrigger=PropertyChanged}" />
                        <my:TimePicker my:HintAssist.Hint="{my:Resource Time}" SelectedTime="{my:Time PostponedTime}" />
                    </my:SimpleStackPanel>
                </my:SimpleStackPanel>
            </GroupBox>

        </my:SimpleStackPanel>

        <!--  Stadium  -->
        <StackPanel>
            <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Edition}" Header="{my:MediumIcon Kind=Stadium}">
                <my:SimpleStackPanel Orientation="Horizontal">
                    <v:EditableStadiumSelectionView Width="300" HorizontalAlignment="Left" DataContext="{Binding StadiumSelection}" />
                    <ToggleButton Style="{StaticResource MyNet.Styles.ToggleButton.Switch}" my:ToggleButtonAssist.OnContent="{my:Resource NeutralVenue}" IsChecked="{Binding NeutralVenue}">
                        <TextBlock Opacity="{StaticResource MyNet.Opacity.Disabled}" Text="{my:Resource NeutralVenue}" />
                    </ToggleButton>
                </my:SimpleStackPanel>
            </GroupBox>
            <TextBlock Margin="80 0 0 0"
                       FontSize="{StaticResource MyNet.Font.Size.Secondary}"
                       Foreground="{DynamicResource MyNet.Brushes.Warning}"
                       Text="{my:Resource NewStadiumWillBeCreated}"
                       Visibility="{Binding NewStadiumWillBeCreated, Converter={x:Static my:BooleanToVisibilityConverter.HiddenIfFalse}}" />
        </StackPanel>

        <!--  State  -->
        <ListBox Style="{StaticResource MyNet.Styles.ListBox.Toggle}"
                 Margin="{StaticResource MyNet.Margins.Large.Top}"
                 HorizontalAlignment="Center"
                 SelectedValue="{Binding State}"
                 SelectedValuePath="DataContext">
            <ListBoxItem Width="95"
                         my:IconAssist.Icon="{my:MediumIcon Kind=ProgressClock}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource MyNet.Brushes.None}"
                         my:ListBoxItemAssist.IsSelectedForeground="{my:BrushBinding Path=(my:ListBoxItemAssist.IsSelectedBackground),
                                                                                     RelativeSource={RelativeSource Self},
                                                                                     Contrast=True}"
                         Content="{my:Resource MatchStateNone}"
                         DataContext="{x:Static enums:MatchState.None}" />
            <ListBoxItem Width="95"
                         my:IconAssist.Icon="{my:MediumIcon Kind=ProgressHelper}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource MyNet.Brushes.Information}"
                         my:ListBoxItemAssist.IsSelectedForeground="{my:BrushBinding Path=(my:ListBoxItemAssist.IsSelectedBackground),
                                                                                     RelativeSource={RelativeSource Self},
                                                                                     Contrast=True}"
                         Content="{my:Resource MatchStateInProgress}"
                         DataContext="{x:Static enums:MatchState.InProgress}" />
            <ListBoxItem Width="95"
                         my:IconAssist.Icon="{my:MediumIcon Kind=ProgressAlert}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource Teamup.Brushes.Match.State.Suspended}"
                         my:ListBoxItemAssist.IsSelectedForeground="{my:BrushBinding Path=(my:ListBoxItemAssist.IsSelectedBackground),
                                                                                     RelativeSource={RelativeSource Self},
                                                                                     Contrast=True}"
                         Content="{my:Resource MatchStateSuspended}"
                         DataContext="{x:Static enums:MatchState.Suspended}" />
            <ListBoxItem Width="95"
                         my:IconAssist.Icon="{my:MediumIcon Kind=ProgressCheck}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource MyNet.Brushes.Positive}"
                         my:ListBoxItemAssist.IsSelectedForeground="{my:BrushBinding Path=(my:ListBoxItemAssist.IsSelectedBackground),
                                                                                     RelativeSource={RelativeSource Self},
                                                                                     Contrast=True}"
                         Content="{my:Resource MatchStatePlayed}"
                         DataContext="{x:Static enums:MatchState.Played}" />
            <ListBoxItem Width="95"
                         my:IconAssist.Icon="{my:MediumIcon Kind=ProgressQuestion}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource MyNet.Brushes.Warning}"
                         my:ListBoxItemAssist.IsSelectedForeground="{my:BrushBinding Path=(my:ListBoxItemAssist.IsSelectedBackground),
                                                                                     RelativeSource={RelativeSource Self},
                                                                                     Contrast=True}"
                         Content="{my:Resource MatchStatePostponed}"
                         DataContext="{x:Static enums:MatchState.Postponed}" />
            <ListBoxItem Width="95"
                         my:IconAssist.Icon="{my:MediumIcon Kind=ProgressClose}"
                         my:ListBoxItemAssist.IsSelectedBackground="{DynamicResource MyNet.Brushes.Negative}"
                         my:ListBoxItemAssist.IsSelectedForeground="{my:BrushBinding Path=(my:ListBoxItemAssist.IsSelectedBackground),
                                                                                     RelativeSource={RelativeSource Self},
                                                                                     Contrast=True}"
                         Content="{my:Resource MatchStateCancelled}"
                         DataContext="{x:Static enums:MatchState.Cancelled}" />
        </ListBox>

        <Grid Margin="{StaticResource MyNet.Margins.Medium.Top}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="10" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <!--  Team 1  -->
            <ContentControl Content="{Binding HomeTeam}" ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Large}" Validation.ErrorTemplate="{x:Null}" />

            <!--  Withdraw  -->
            <my:SimpleStackPanel Grid.Row="2" HorizontalAlignment="Center" Spacing="{StaticResource MyNet.Margin.Default}">
                <my:SimpleStackPanel.IsEnabled>
                    <Binding Converter="{x:Static my:EnumToBooleanConverter.Any}" Path="State">
                        <Binding.ConverterParameter>
                            <x:Array Type="{x:Type enums:MatchState}">
                                <x:Static Member="enums:MatchState.None" />
                                <x:Static Member="enums:MatchState.Played" />
                                <x:Static Member="enums:MatchState.InProgress" />
                                <x:Static Member="enums:MatchState.Suspended" />
                            </x:Array>
                        </Binding.ConverterParameter>
                    </Binding>
                </my:SimpleStackPanel.IsEnabled>
                <ToggleButton Style="{StaticResource MyNet.Styles.ToggleButton.Filled}"
                              HorizontalAlignment="Center"
                              my:IconAssist.Icon="{my:Icon Kind=Close}"
                              my:ThemeAssist.IsCheckedBackground="{DynamicResource MyNet.Brushes.Negative}"
                              my:ThemeAssist.IsCheckedBorderBrush="{DynamicResource MyNet.Brushes.Negative}"
                              Content="{my:Resource Withdraw}"
                              IsChecked="{Binding HomeIsWithdrawn}" />
                <my:NumericUpDown Width="85"
                                  HorizontalAlignment="Center"
                                  my:TextFieldAssist.PrefixText="-"
                                  my:TextFieldAssist.SuffixText="{my:Resource PointsAbbr,
                                                                              Casing=LowerCase}"
                                  Value="{my:NullableBinding HomePenaltyPoints}">
                    <my:NumericUpDown.Visibility>
                        <MultiBinding Converter="{x:Static my:MultipleBooleanToVisibilityConverter.AndHidden}">
                            <Binding Path="HomeIsWithdrawn" />
                            <Binding Path="CanEditPenaltyPoints" />
                        </MultiBinding>
                    </my:NumericUpDown.Visibility>
                </my:NumericUpDown>
            </my:SimpleStackPanel>

            <Grid Grid.Column="2" VerticalAlignment="Center">
                <Grid.IsEnabled>
                    <Binding Converter="{x:Static my:EnumToBooleanConverter.Any}" Path="State">
                        <Binding.ConverterParameter>
                            <x:Array Type="{x:Type enums:MatchState}">
                                <x:Static Member="enums:MatchState.None" />
                                <x:Static Member="enums:MatchState.Played" />
                                <x:Static Member="enums:MatchState.InProgress" />
                                <x:Static Member="enums:MatchState.Suspended" />
                            </x:Array>
                        </Binding.ConverterParameter>
                    </Binding>
                </Grid.IsEnabled>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <!--  Score  -->
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <my:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Filled}"
                                      Width="70"
                                      my:NumericUpDownAssist.AcceptableValue="{Binding HomeScore}"
                                      ButtonsAlignment="Opposite"
                                      FontSize="{StaticResource MyNet.Font.Size.Title}"
                                      TextAlignment="Center" />
                    <TextBlock Grid.Column="1" HorizontalAlignment="Center" Text="-" />
                    <my:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Filled}"
                                      Grid.Column="2"
                                      Width="70"
                                      my:NumericUpDownAssist.AcceptableValue="{Binding AwayScore}"
                                      ButtonsAlignment="Opposite"
                                      FontSize="{StaticResource MyNet.Font.Size.Title}"
                                      TextAlignment="Center" />
                </Grid>

                <!--  ExraTime  -->
                <ToggleButton Grid.Row="1"
                              Margin="{StaticResource MyNet.Margins.Medium.Top}"
                              HorizontalAlignment="Center"
                              my:ToggleButtonAssist.OnContent="{my:Resource AfterExtraTimeAbbr,
                                                                            Casing=Title}"
                              IsChecked="{Binding AfterExtraTime}"
                              ToolTip="{my:Resource AfterExtraTime}"
                              Visibility="{Binding MatchFormat.ExtraTimeIsEnabled, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                    <TextBlock Opacity="{StaticResource MyNet.Opacity.Disabled}" Text="{my:Resource AfterExtraTimeAbbr, Casing=Title}" />
                    <ToggleButton.IsEnabled>
                        <MultiBinding Converter="{x:Static my:MultipleBooleanConverter.And}">
                            <Binding Converter="{x:Static my:NotBooleanConverter.Default}" Path="HasDraw" />
                            <Binding Converter="{x:Static my:NotBooleanConverter.Default}" Path="HomeIsWithdrawn" />
                            <Binding Converter="{x:Static my:NotBooleanConverter.Default}" Path="AwayIsWithdrawn" />
                        </MultiBinding>
                    </ToggleButton.IsEnabled>
                </ToggleButton>

                <!--  Shootout  -->
                <Grid Grid.Row="2" Margin="{StaticResource MyNet.Margins.Medium.Top}" Visibility="{Binding MatchFormat.ShootoutsIsEnabled, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                    <Grid.IsEnabled>
                        <MultiBinding Converter="{x:Static my:MultipleBooleanConverter.And}">
                            <Binding Path="HasDraw" />
                            <Binding Converter="{x:Static my:NotBooleanConverter.Default}" Path="HomeIsWithdrawn" />
                            <Binding Converter="{x:Static my:NotBooleanConverter.Default}" Path="AwayIsWithdrawn" />
                        </MultiBinding>
                    </Grid.IsEnabled>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <my:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Filled}"
                                      Width="60"
                                      HorizontalAlignment="Center"
                                      my:NumericUpDownAssist.AcceptableValue="{Binding HomeShootoutScore}"
                                      ButtonsAlignment="Opposite"
                                      TextAlignment="Center" />
                    <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                               Grid.Column="1"
                               HorizontalAlignment="Center"
                               Text="{my:Resource ShootoutsAbbr}" />
                    <my:NumericUpDown Style="{StaticResource MyNet.Styles.NumericUpDown.Filled}"
                                      Grid.Column="2"
                                      Width="60"
                                      HorizontalAlignment="Center"
                                      my:NumericUpDownAssist.AcceptableValue="{Binding AwayShootoutScore}"
                                      ButtonsAlignment="Opposite"
                                      TextAlignment="Center" />
                </Grid>
            </Grid>

            <!--  Team 2  -->
            <ContentControl Grid.Column="4"
                            Content="{Binding AwayTeam}"
                            ContentTemplate="{StaticResource Teamup.DataTemplates.Team.Large}"
                            Validation.ErrorTemplate="{x:Null}" />

            <!--  Withdraw  -->
            <my:SimpleStackPanel Grid.Row="2"
                                 Grid.Column="4"
                                 HorizontalAlignment="Center"
                                 Spacing="{StaticResource MyNet.Margin.Default}">
                <my:SimpleStackPanel.IsEnabled>
                    <Binding Converter="{x:Static my:EnumToBooleanConverter.Any}" Path="State">
                        <Binding.ConverterParameter>
                            <x:Array Type="{x:Type enums:MatchState}">
                                <x:Static Member="enums:MatchState.None" />
                                <x:Static Member="enums:MatchState.Played" />
                                <x:Static Member="enums:MatchState.InProgress" />
                                <x:Static Member="enums:MatchState.Suspended" />
                            </x:Array>
                        </Binding.ConverterParameter>
                    </Binding>
                </my:SimpleStackPanel.IsEnabled>
                <ToggleButton Style="{StaticResource MyNet.Styles.ToggleButton.Filled}"
                              HorizontalAlignment="Center"
                              my:IconAssist.Icon="{my:Icon Kind=Close}"
                              my:ThemeAssist.IsCheckedBackground="{DynamicResource MyNet.Brushes.Negative}"
                              my:ThemeAssist.IsCheckedBorderBrush="{DynamicResource MyNet.Brushes.Negative}"
                              Content="{my:Resource Withdraw}"
                              IsChecked="{Binding AwayIsWithdrawn}" />
                <my:NumericUpDown Width="85"
                                  HorizontalAlignment="Center"
                                  my:TextFieldAssist.PrefixText="-"
                                  my:TextFieldAssist.SuffixText="{my:Resource PointsAbbr,
                                                                              Casing=LowerCase}"
                                  Value="{my:NullableBinding AwayPenaltyPoints}">
                    <my:NumericUpDown.Visibility>
                        <MultiBinding Converter="{x:Static my:MultipleBooleanToVisibilityConverter.AndHidden}">
                            <Binding Path="AwayIsWithdrawn" />
                            <Binding Path="CanEditPenaltyPoints" />
                        </MultiBinding>
                    </my:NumericUpDown.Visibility>
                </my:NumericUpDown>
            </my:SimpleStackPanel>

        </Grid>

    </my:SimpleStackPanel>

</UserControl>
