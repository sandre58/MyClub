<UserControl x:Class="MyClub.Teamup.Wpf.Views.MedicalCenterPage.InjuriesTab.InjuriesGridView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:ctrl="clr-namespace:MyClub.Teamup.Wpf.Controls"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:my="http://mynet.com/xaml/themes"
             xmlns:tabs="clr-namespace:MyClub.Teamup.Wpf.Enums"
             xmlns:v="clr-namespace:MyClub.Teamup.Wpf.Views.MedicalCenterPage.InjuriesTab"
             xmlns:vm="clr-namespace:MyClub.Teamup.Wpf.ViewModels.MedicalCenterPage.InjuriesTab"
             d:DataContext="{d:DesignInstance Type=vm:InjuriesViewModel}"
             d:DesignHeight="450"
             d:DesignWidth="800"
             mc:Ignorable="d">
    <UserControl.Resources>
        <my:BindingProxy x:Key="Proxy" Data="{Binding}" />

        <DataTemplate x:Key="Teamup.DataTemplates.ListBoxItem.Injury">
            <Grid Width="150" Height="180">

                <Grid Margin="{StaticResource MyNet.Margins.Medium}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="10" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="5" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="10" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <DockPanel>

                        <!--  Photo  -->
                        <my:PictureControl x:Name="Picture"
                                           Style="{StaticResource Teamup.Styles.PictureControl.Player.SmallMedium}"
                                           Margin="{StaticResource MyNet.Margins.Default.Right}"
                                           VerticalAlignment="Top"
                                           Background="{DynamicResource MyNet.Brushes.White}"
                                           DataContext="{Binding Item.Player}"
                                           DockPanel.Dock="Left">
                            <my:PictureControl.Foreground>
                                <SolidColorBrush Opacity="{StaticResource MyNet.Opacity.Medium}" Color="{DynamicResource MyNet.Colors.Black}" />
                            </my:PictureControl.Foreground>
                        </my:PictureControl>

                        <!--  Name  -->
                        <ctrl:PlayerButton BorderBrush="{Binding Foreground, RelativeSource={RelativeSource Self}}"
                                           Command="{Binding Data.OpenCommand, Source={StaticResource Proxy}}"
                                           CommandParameter="{Binding Item}"
                                           IsEnabled="{Binding Data.SelectedWrappers.Count, Converter={x:Static my:CountToBooleanConverter.NotMany}, Source={StaticResource Proxy}}"
                                           Item="{Binding Item.Player}"
                                           Orientation="Vertical" />

                    </DockPanel>

                    <!--  Date  -->
                    <TextBlock Grid.Row="2" HorizontalAlignment="Center" Text="{my:Translation Item.Date, Format=MidDateFormat}" />

                    <!--  Condition  -->
                    <Button Style="{StaticResource MyNet.Styles.Button.HyperLink.Foreground}"
                            Grid.Row="4"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Top"
                            Command="{Binding Data.OpenCommand, Source={StaticResource Proxy}}"
                            CommandParameter="{Binding Item}">
                        <TextBlock FontWeight="Bold"
                                   Text="{Binding Item.Condition, Converter={x:Static my:StringConverter.ToUpper}}"
                                   TextAlignment="Center"
                                   TextWrapping="Wrap" />
                    </Button>

                    <my:GhostControl Grid.Row="6" Ghost="{my:Resource NoExpectedReturn}" ShowGhost="{Binding Item.EndDate, Converter={x:Static my:NullToBooleanConverter.TrueIfNull}}">
                        <Grid>

                            <!--  Expected Return  -->
                            <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Clean.Left}"
                                      my:HeaderAssist.Padding="0 8 5 0"
                                      Header="{my:Resource ReturnIn}"
                                      Visibility="{Binding Item.IsCurrent, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                                <my:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
                                    <TextBlock FontFamily="{StaticResource MyNet.Font.Family.Jersey}" FontSize="{StaticResource MyNet.Font.Size.Title}" Text="{Binding Item.Duration, Converter={x:Static my:StringConverter.Default}, ConverterParameter=1}" />
                                    <TextBlock Margin="0 0 0 1" VerticalAlignment="Bottom" Text="{my:Translation Item.Duration, Casing=AllCaps, ConverterParameter=2}" />
                                </my:SimpleStackPanel>
                            </GroupBox>

                            <!--  Duration  -->
                            <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Clean.Left}"
                                      my:HeaderAssist.Padding="0 8 5 0"
                                      Header="{my:Resource Duration}"
                                      Visibility="{Binding Item.IsCurrent, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfTrue}}">
                                <my:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Default}">
                                    <TextBlock FontFamily="{StaticResource MyNet.Font.Family.Jersey}" FontSize="{StaticResource MyNet.Font.Size.Title}" Text="{Binding Item.Duration, Converter={x:Static my:StringConverter.Default}, ConverterParameter=1}" />
                                    <TextBlock Margin="0 0 0 1" VerticalAlignment="Bottom" Text="{Binding Item.Duration, Converter={x:Static my:StringConverter.ToUpper}, ConverterParameter=2}" />
                                </my:SimpleStackPanel>
                            </GroupBox>
                        </Grid>
                    </my:GhostControl>

                    <!--  Actions  -->
                    <DockPanel Grid.Row="8">

                        <my:SimpleStackPanel DockPanel.Dock="Left" Orientation="Horizontal">
                            <!--  Selection  -->
                            <CheckBox x:Name="Selection"
                                      Style="{StaticResource MyNet.Styles.CheckBox.Circle}"
                                      BorderBrush="{my:BrushBinding SelfPath=(TextElement.Foreground),
                                                                    Opacity={StaticResource MyNet.Opacity.Secondary}}"
                                      Focusable="False"
                                      IsChecked="{Binding IsSelected}"
                                      IsTabStop="False"
                                      Visibility="Hidden" />
                        </my:SimpleStackPanel>

                        <!--  Item ToolBar  -->
                        <v:InjuryToolBar x:Name="ToolBar"
                                         Padding="0"
                                         HorizontalAlignment="Right"
                                         DataContext="{Binding Item}"
                                         EditCommand="{Binding Data.EditCommand, Source={StaticResource Proxy}}"
                                         RemoveCommand="{Binding Data.RemoveCommand, Source={StaticResource Proxy}}"
                                         Visibility="Hidden" />

                    </DockPanel>
                </Grid>
            </Grid>

            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
                    <Setter TargetName="Selection" Property="Visibility" Value="Visible" />
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True" />
                        <Condition Binding="{Binding Data.SelectedWrappers.Count, Source={StaticResource Proxy}, Converter={x:Static my:CountToBooleanConverter.NotMany}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ToolBar" Property="Visibility" Value="Visible" />
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding IsSelected}" Value="True">
                    <Setter TargetName="Selection" Property="Visibility" Value="Visible" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

    </UserControl.Resources>

    <ListBox Style="{StaticResource MyNet.Styles.ListBox.Cards}"
             my:ListBoxItemAssist.IsSelectedForeground="{DynamicResource MyNet.Brushes.White}"
             ItemTemplate="{StaticResource Teamup.DataTemplates.ListBoxItem.Injury}"
             ItemsSource="{Binding Wrappers}">
        <ListBox.ItemContainerStyle>
            <Style BasedOn="{StaticResource MyNet.Styles.ListBoxItem.Card}" TargetType="{x:Type ListBoxItem}">
                <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                <Setter Property="IsEnabled" Value="{Binding IsSelectable}" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="Foreground" Value="{DynamicResource MyNet.Brushes.White}" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Item.IsCurrent}" Value="False">
                        <Setter Property="Opacity" Value="{StaticResource MyNet.Opacity.Secondary}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Item.Severity}" Value="{x:Static enums:InjurySeverity.Serious}">
                        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Serious}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Item.Severity}" Value="{x:Static enums:InjurySeverity.Moderate}">
                        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Moderate}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Item.Severity}" Value="{x:Static enums:InjurySeverity.Minor}">
                        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Minor}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Item.Severity}" Value="{x:Static enums:InjurySeverity.Severe}">
                        <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Severe}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </ListBox.ItemContainerStyle>
    </ListBox>
</UserControl>
