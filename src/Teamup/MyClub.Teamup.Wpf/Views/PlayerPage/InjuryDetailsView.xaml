<UserControl x:Class="MyClub.Teamup.Wpf.Views.PlayerPage.InjuryDetailsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:ctrl="clr-namespace:MyClub.Teamup.Wpf.Controls"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:entities="clr-namespace:MyClub.Teamup.Wpf.ViewModels.Entities"
             xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain"
             xmlns:h="clr-namespace:MyNet.Humanizer;assembly=MyNet.Humanizer"
             xmlns:utils="clr-namespace:MyNet.Utilities;assembly=MyNet.Utilities"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:my="http://mynet.com/xaml/themes"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:tabs="clr-namespace:MyClub.Teamup.Wpf.Enums"
             d:DataContext="{d:DesignInstance Type=entities:InjuryViewModel}"
             d:DesignHeight="450"
             d:DesignWidth="800"
             mc:Ignorable="d">
    <UserControl.Resources>
        <my:BindingProxy x:Key="Proxy" Data="{Binding}" />

        <Style x:Key="Teamup.Styles.ContentControl.Injury.Dates" BasedOn="{StaticResource MyNet.Styles.ContentControl}" TargetType="{x:Type ContentControl}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContentControl}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!--  Line  -->
                            <Border x:Name="border"
                                    Grid.Column="1"
                                    Height="26"
                                    Margin="-10 0">
                                <Border.Background>
                                    <LinearGradientBrush>
                                        <GradientStop Offset="0.5" Color="{Binding Fill.Color, ElementName=dateEllipse}" />
                                        <GradientStop Offset="1" Color="{Binding Fill.Color, ElementName=end}" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>

                            <!--  Duration  -->
                            <TextBlock Grid.Column="1"
                                       HorizontalAlignment="Center"
                                       Foreground="{DynamicResource MyNet.Brushes.White}"
                                       Opacity="{StaticResource MyNet.Opacity.Secondary}"
                                       Text="{my:Translation Duration,
                                                             Casing=Sentence}" />

                            <!--  Date  -->
                            <Grid Width="48" Height="48">
                                <Grid.ToolTip>
                                    <MultiBinding Converter="{x:Static my:DatesIntervalToStringConverter.Date}" ConverterParameter="{x:Static h:LetterCasing.Sentence}">
                                        <Binding Path="Date" />
                                        <Binding Source="{x:Static sys:DateTime.Today}" />
                                    </MultiBinding>
                                </Grid.ToolTip>
                                <Ellipse x:Name="dateEllipse" Fill="{TemplateBinding Background}" />
                                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Secondary}"
                                               HorizontalAlignment="Center"
                                               Foreground="{DynamicResource MyNet.Brushes.White}"
                                               Text="{my:Translation Date,
                                                                     Casing=AllCaps,
                                                                     Format='dd MMM'}"
                                               Typography.Capitals="SmallCaps" />
                                    <TextBlock HorizontalAlignment="Center" Foreground="{DynamicResource MyNet.Brushes.White}" Text="{my:Translation Date, Casing=AllCaps, Format='yyy'}" />
                                </StackPanel>
                            </Grid>

                            <!--  Return Date  -->
                            <TextBlock Grid.Column="1"
                                       HorizontalAlignment="Right"
                                       Foreground="{DynamicResource MyNet.Brushes.White}"
                                       Text="{my:Translation EndDate,
                                                             Casing=AllCaps,
                                                             Format='dd MMM yyy'}"
                                       Visibility="{Binding EndDate, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}}">
                                <TextBlock.ToolTip>
                                    <MultiBinding Converter="{x:Static my:DatesIntervalToStringConverter.Date}" ConverterParameter="{x:Static h:LetterCasing.Sentence}">
                                        <Binding Path="EndDate" />
                                        <Binding Source="{x:Static sys:DateTime.Today}" />
                                    </MultiBinding>
                                </TextBlock.ToolTip>
                            </TextBlock>

                            <Path x:Name="end"
                                  Grid.Column="2"
                                  Width="40"
                                  Height="26"
                                  Data="M10 26 L16 13 L10 0 L0 0 L0 26 Z M20 26 L26 13 L20 0 L14 0 L20 13 L14 26 Z M30 26 L36 13 L30 0 L24 0 L30 13 L24 26 Z"
                                  Fill="{DynamicResource MyNet.Brushes.None}" />
                        </Grid>

                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Severe}">
                                <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Severe}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Serious}">
                                <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Serious}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Moderate}">
                                <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Moderate}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Minor}">
                                <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Minor}" />
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding EndDate, Converter={x:Static my:NullToBooleanConverter.TrueIfNull}}" Value="False" />
                                    <Condition Binding="{Binding IsCurrent}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="end" Property="Fill" Value="{DynamicResource MyNet.Brushes.Information}" />
                                <Setter TargetName="end" Property="Data" Value="M10 26 L16 13 L10 0 L0 0 L0 26 Z M20 26 L26 13 L20 0 L14 0 L20 13 L14 26 Z" />
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding EndDate, Converter={x:Static my:NullToBooleanConverter.TrueIfNull}}" Value="False" />
                                    <Condition Binding="{Binding IsCurrent}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <Setter TargetName="end" Property="Fill" Value="{DynamicResource MyNet.Brushes.Positive}" />
                                <Setter TargetName="end" Property="Data" Value="M10 26 L16 13 L10 0 L0 0 L0 40 Z" />
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <DockPanel>

            <!--  Category  -->
            <Label VerticalAlignment="Top" Content="{my:Translation Category}" DockPanel.Dock="Right">
                <Label.Style>
                    <Style BasedOn="{StaticResource MyNet.Styles.Label.Elevation.Custom}" TargetType="{x:Type Label}">
                        <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.None}" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Category}" Value="{x:Static enums:InjuryCategory.Fracture}">
                                <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Fracture}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Category}" Value="{x:Static enums:InjuryCategory.Ligament}">
                                <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Ligament}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Category}" Value="{x:Static enums:InjuryCategory.Muscular}">
                                <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Muscular}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Category}" Value="{x:Static enums:InjuryCategory.Sickness}">
                                <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Sickness}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Category}" Value="{x:Static enums:InjuryCategory.Trauma}">
                                <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Trauma}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Label.Style>
            </Label>

            <!--  Condition  -->
            <TextBlock x:Name="text"
                       Margin="{StaticResource MyNet.Margins.Medium.Bottom}"
                       HorizontalAlignment="Center"
                       Opacity="{StaticResource MyNet.Opacity.Default}"
                       Text="{Binding Condition, Converter={x:Static my:StringConverter.ToUpper}}">
                <TextBlock.Style>
                    <Style BasedOn="{StaticResource MyNet.Styles.TextBlock.Caption}" TargetType="{x:Type TextBlock}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Severe}">
                                <Setter Property="Foreground" Value="{DynamicResource Teamup.Brushes.Injury.Severe}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Minor}">
                                <Setter Property="Foreground" Value="{DynamicResource Teamup.Brushes.Injury.Minor}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Moderate}">
                                <Setter Property="Foreground" Value="{DynamicResource Teamup.Brushes.Injury.Moderate}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Serious}">
                                <Setter Property="Foreground" Value="{DynamicResource Teamup.Brushes.Injury.Serious}" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </DockPanel>

        <!--  Description  -->
        <TextBlock Grid.Row="1"
                   HorizontalAlignment="Center"
                   Text="{Binding Description}"
                   TextWrapping="Wrap" />

        <!--  Type  -->
        <ctrl:InjurySelector Grid.Row="2"
                             Margin="{StaticResource MyNet.Margins.Large.Vertical}"
                             HorizontalAlignment="Center"
                             VerticalAlignment="Center"
                             IsFemale="{Binding Player.Gender, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static utils:GenderType.Female}}"
                             IsReadOnly="True"
                             SelectedValue="{Binding Type, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"
                             Severity="{Binding Severity, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}" />

        <ContentControl Style="{StaticResource Teamup.Styles.ContentControl.Injury.Dates}"
                        Grid.Row="3"
                        Content="{Binding}"
                        DockPanel.Dock="Bottom"
                        Visibility="{Binding Converter={x:Static my:NullToVisibilityConverter.HiddenIfNull}}" />

    </Grid>
</UserControl>
