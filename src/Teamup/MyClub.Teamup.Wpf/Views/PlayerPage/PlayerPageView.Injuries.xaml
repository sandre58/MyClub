<UserControl x:Class="MyClub.Teamup.Wpf.Views.PlayerPage.PlayerPageInjuriesView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:ctrl="clr-namespace:MyClub.Teamup.Wpf.Controls"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:enums="clr-namespace:MyClub.Domain.Enums;assembly=MyClub.Domain"
             xmlns:h="clr-namespace:MyNet.Humanizer;assembly=MyNet.Humanizer"
             xmlns:utils="clr-namespace:MyNet.Utilities;assembly=MyNet.Utilities"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:my="http://mynet.com/xaml/themes"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:v="clr-namespace:MyClub.Teamup.Wpf.Views.PlayerPage"
             xmlns:vm="clr-namespace:MyClub.Teamup.Wpf.ViewModels.PlayerPage"
             d:DataContext="{d:DesignInstance Type=vm:PlayerPageInjuriesViewModel}"
             mc:Ignorable="d">
    <UserControl.Resources>
        <my:BindingProxy x:Key="InjuriesProxy" Data="{Binding}" />
    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="280" />
            <ColumnDefinition Width="10" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!--  Medical  -->
        <GroupBox VerticalAlignment="Top">
            <GroupBox.Style>
                <Style BasedOn="{StaticResource MyNet.Styles.GroupBox.Elevation.Custom}" TargetType="{x:Type GroupBox}">
                    <Setter Property="Background" Value="{StaticResource MyNet.Brushes.Positive}" />
                    <Setter Property="my:IconAssist.Icon" Value="{my:MediumIcon Kind=HeartPulse}" />
                    <Setter Property="Header" Value="{my:Resource NotInjured, Casing=AllCaps}" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Item.Injury.Severity, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:InjurySeverity.Severe}">
                            <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Severe}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Item.Injury.Severity, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:InjurySeverity.Minor}">
                            <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Minor}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Item.Injury.Severity, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:InjurySeverity.Moderate}">
                            <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Moderate}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Item.Injury.Severity, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static enums:InjurySeverity.Serious}">
                            <Setter Property="Background" Value="{DynamicResource Teamup.Brushes.Injury.Serious}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Item.Injury, Converter={x:Static my:NullToBooleanConverter.TrueIfNull}, UpdateSourceTrigger=PropertyChanged}" Value="False">
                            <Setter Property="Header" Value="{my:Resource Injured, Casing=AllCaps}" />
                            <Setter Property="my:IconAssist.Icon" Value="{my:MediumIcon Kind=Ambulance}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </GroupBox.Style>

            <my:DynamicScrollViewer>
                <StackPanel>

                    <!--  Not Injured  -->
                    <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}"
                               HorizontalAlignment="Center"
                               FontWeight="Normal"
                               Opacity="{StaticResource MyNet.Opacity.Default}"
                               Text="{my:Resource InFettle}"
                               Typography.Capitals="AllSmallCaps"
                               Visibility="{Binding Item.Injury, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}, UpdateSourceTrigger=PropertyChanged}" />


                    <!--  Injured  -->
                    <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}"
                               HorizontalAlignment="Center"
                               FontWeight="Normal"
                               Opacity="{StaticResource MyNet.Opacity.Default}"
                               Text="{Binding Item.Injury.Condition}"
                               Typography.Capitals="AllSmallCaps"
                               Visibility="{Binding Item.Injury, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}, UpdateSourceTrigger=PropertyChanged}" />


                    <!--  Injury  -->
                    <ctrl:InjurySelector Height="270"
                                         Margin="{StaticResource MyNet.Margins.Medium.Vertical}"
                                         HorizontalAlignment="Center"
                                         IsFemale="{Binding Item.Gender, Converter={x:Static my:EnumToBooleanConverter.Any}, ConverterParameter={x:Static utils:GenderType.Female}}"
                                         IsReadOnly="True"
                                         SelectedValue="{Binding Item.Injury.Type, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}">
                        <ctrl:InjurySelector.ItemContainerStyle>
                            <Style BasedOn="{StaticResource Teamup.Styles.ListBoxItem.Injury}" TargetType="{x:Type ListBoxItem}">
                                <Setter Property="Background" Value="{DynamicResource MyNet.Brushes.White}" />
                            </Style>
                        </ctrl:InjurySelector.ItemContainerStyle>
                    </ctrl:InjurySelector>


                    <!--  Expected Return  -->
                    <Grid HorizontalAlignment="Right" Visibility="{Binding Item.IsInjured, Converter={x:Static my:BooleanToVisibilityConverter.CollapsedIfFalse}}">
                        <StackPanel Orientation="Horizontal" Visibility="{Binding Item.Injury.EndDate, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNull}, UpdateSourceTrigger=PropertyChanged}">
                            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}" Margin="{StaticResource MyNet.Margins.Default.Right}" Text="{my:Resource ExpectedReturn}" />
                            <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}" Opacity="{StaticResource MyNet.Opacity.Default}">
                                <TextBlock.Text>
                                    <MultiBinding Converter="{x:Static my:DatesIntervalToStringConverter.Date}" ConverterParameter="{x:Static h:LetterCasing.Sentence}">
                                        <Binding Path="Item.Injury.EndDate" />
                                        <Binding Source="{x:Static sys:DateTime.Today}" />
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                        </StackPanel>
                        <TextBlock Style="{StaticResource MyNet.Styles.TextBlock.Caption}"
                                   FontStyle="Italic"
                                   FontWeight="Normal"
                                   Text="{my:Resource NoExpectedReturn}"
                                   Visibility="{Binding Item.Injury.EndDate, Converter={x:Static my:NullToVisibilityConverter.CollapsedIfNotNull}, UpdateSourceTrigger=PropertyChanged}" />
                    </Grid>
                </StackPanel>
            </my:DynamicScrollViewer>

        </GroupBox>

        <!--  Injuries  -->
        <GroupBox Grid.Column="2" my:IconAssist.Icon="{my:MediumIcon Kind=MedicalBag}" Background="Transparent">
            <GroupBox.Header>
                <my:SimpleStackPanel Orientation="Horizontal" Spacing="{StaticResource MyNet.Margin.Huge}">
                    <TextBlock FontSize="{StaticResource MyNet.Font.Size.Caption}" Text="{my:Resource InjuriesHistory, Casing=AllCaps}" Typography.Capitals="AllSmallCaps" />
                    <Button Style="{StaticResource MyNet.Styles.Button.Filled}"
                            my:IconAssist.Icon="{my:ToolIcon Kind=PlusBold}"
                            Command="{Binding AddCommand}"
                            Content="{my:Resource New}" />
                </my:SimpleStackPanel>
            </GroupBox.Header>

            <!--  Injuries  -->
            <my:GhostControl GhostTemplate="{StaticResource Teamup.DataTemplates.Ghost.NoData.Large}" ShowGhost="{Binding Item.Injuries.Count, Converter={x:Static my:CountToBooleanConverter.NotAny}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="10" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <ListView my:InputAssist.PropagateInWindow="False"
                              my:ItemsControlAssist.SortDirection="Descending"
                              my:ItemsControlAssist.SortingProperty="Date"
                              my:ListViewAssist.AutoResizeIsEnabled="True"
                              my:ListViewAssist.CanSort="False"
                              my:ListViewAssist.HeaderHeight="35"
                              my:ListViewAssist.ShowHeader="False"
                              ItemsSource="{Binding Item.Injuries}"
                              SelectedItem="{Binding SelectedInjury}"
                              SelectionMode="Single">

                        <ListView.InputBindings>
                            <KeyBinding Modifiers="Ctrl" Key="N" Command="{Binding Data.AddCommand, Source={StaticResource InjuriesProxy}}" />
                            <KeyBinding Modifiers="Ctrl" Key="E" Command="{Binding Data.EditSelectedInjuryCommand, Source={StaticResource InjuriesProxy}}" />
                            <KeyBinding Key="Delete" Command="{Binding Data.RemoveSelectedInjuryCommand, Source={StaticResource InjuriesProxy}}" />
                        </ListView.InputBindings>

                        <ListView.View>
                            <GridView>

                                <!--  Date  -->
                                <GridViewColumn my:GridViewColumnAssist.Width="90">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <TextBlock FontWeight="Bold" Text="{my:Translation Date, Format=ShortDatePattern}" />
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <!--  Condition  -->
                                <GridViewColumn my:GridViewColumnAssist.Width="*">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <DockPanel>
                                                <Grid Width="25"
                                                      Height="25"
                                                      Margin="{StaticResource MyNet.Margins.Medium.Horizontal}"
                                                      DockPanel.Dock="Left">
                                                    <Ellipse x:Name="Ellipse" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                                                    <my:PackIcon x:Name="icon"
                                                                 Width="20"
                                                                 Height="20"
                                                                 Margin="-1 0 0 0"
                                                                 HorizontalAlignment="Center"
                                                                 VerticalAlignment="Center"
                                                                 Kind="PlusThick" />
                                                </Grid>
                                                <StackPanel Margin="{StaticResource MyNet.Margins.Default.Vertical}">
                                                    <TextBlock x:Name="Condition" Text="{Binding Condition}" />
                                                    <GroupBox Style="{StaticResource MyNet.Styles.GroupBox.Clean.Left}" Margin="{StaticResource MyNet.Margins.Small.Top}" Header="{my:Resource Duration}">
                                                        <my:GhostControl Content="{my:Translation Duration, Casing=Sentence}" Ghost="{my:Resource UnknownFemale}" ShowGhost="{Binding EndDate, Converter={x:Static my:NullToBooleanConverter.TrueIfNull}}" />
                                                    </GroupBox>

                                                </StackPanel>
                                            </DockPanel>

                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Severe}">
                                                    <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource Teamup.Brushes.Injury.Severe}" />
                                                    <Setter TargetName="Condition" Property="Foreground" Value="{DynamicResource Teamup.Brushes.Injury.Severe}" />
                                                    <Setter TargetName="icon" Property="Foreground" Value="White" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Minor}">
                                                    <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource Teamup.Brushes.Injury.Minor}" />
                                                    <Setter TargetName="Condition" Property="Foreground" Value="{DynamicResource Teamup.Brushes.Injury.Minor}" />
                                                    <Setter TargetName="icon" Property="Foreground" Value="White" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Moderate}">
                                                    <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource Teamup.Brushes.Injury.Moderate}" />
                                                    <Setter TargetName="Condition" Property="Foreground" Value="{DynamicResource Teamup.Brushes.Injury.Moderate}" />
                                                    <Setter TargetName="icon" Property="Foreground" Value="White" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Severity}" Value="{x:Static enums:InjurySeverity.Serious}">
                                                    <Setter TargetName="Ellipse" Property="Fill" Value="{DynamicResource Teamup.Brushes.Injury.Serious}" />
                                                    <Setter TargetName="Condition" Property="Foreground" Value="{DynamicResource Teamup.Brushes.Injury.Serious}" />
                                                    <Setter TargetName="icon" Property="Foreground" Value="White" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                                <!--  Actions  -->
                                <GridViewColumn my:GridViewColumnAssist.Width="80">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate>
                                            <ToolBar>
                                                <Button Command="{Binding EditCommand}" Content="{my:ToolIcon Kind=Edit}" ToolTip="{my:Resource Edit}" />

                                                <Button my:RippleAssist.Feedback="{DynamicResource MyNet.Brushes.Negative}"
                                                        Command="{Binding RemoveCommand}"
                                                        Content="{my:ToolIcon Kind=Trash}"
                                                        Foreground="{DynamicResource MyNet.Brushes.Negative}"
                                                        ToolTip="{my:Resource Remove}" />
                                            </ToolBar>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>

                            </GridView>
                        </ListView.View>
                    </ListView>

                    <v:InjuryDetailsView Grid.Column="2" DataContext="{Binding SelectedInjury}" Visibility="{Binding Converter={x:Static my:NullToVisibilityConverter.HiddenIfNull}}" />
                </Grid>
            </my:GhostControl>

        </GroupBox>

    </Grid>

</UserControl>
